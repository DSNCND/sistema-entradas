"21:53:20, 30 October 2019: Compressed sources"!

DevelopmentSessionManager installNew!

SessionManager current defaultResourceLibrary loadFlags: 0.
SessionManager current stashBootInfo!

"Ensure all structures have calculated size to avoid recompilation messages later"
ExternalStructure allSubclasses do: [:e | e ensureDefined]!

"Mark all the booted packages as base"
Package manager markAllPackagesAsBase!

"Save the booted image"
| devsesh |
SourceManager default flushChanges.
devsesh := SessionManager current.
devsesh onPreSaveImage.
[devsesh primSnapshot: devsesh imageFileName
	backup: false
	type: 0
	maxObjects: 24576*1024
] ensure: [devsesh onPostSaveImage]!

"Remove unnecessary .chg files"
File delete: 'DBOOT.chg'!

SessionManager current onExit; primQuit: 0!

"16:12:22, 12 May 2020: Dolphin Smalltalk Professional started"!

1+1!

1+1!

1+1!

1+1!

2!

2!

2!

2!

2!

2!

1+1!

2!

|a b|
a:=6.
b:=1.
(a<b)ifTrue:[a:=a+1]
	ifFalse:[a:=b*2].
a inspect.!

|a b|
a:=6.
b:=1.
(a<b)ifTrue:[a:=a+1]
	ifFalse:[a:=b*2].
a inspect.!

|a b|
a:=6.
b:=1.
(a<b)ifTrue:[a:=a+1]
	ifFalse:[a:=b*2].
a inspect.!

|a b|
a:=6.
b:=8.
(a<b)ifTrue:[a:=a+1]
	ifFalse:[a:=b*2].
a inspect.!

"00:00:11, 13 May 2020: Image saved"!

"12:02:28, 17 May 2020: Dolphin Smalltalk Professional started"!

ProfStef next.!

ProfStef next.!

ProfStef next.!

ProfStef next.!

ProfStef go.!

ProfStef next.!

MessageBox notify: 'hello world!!'.!

MessageBox notify: 'hello world!!'.!

Object subclass: #Libro
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Libro guid: (GUID fromString: '{0bcc285e-1c13-484a-a67d-cc1a16c46635}')!
Libro comment: ''!
!Libro categoriesForClass!Kernel-Objects! !
Object subclass: #Libro
	instanceVariableNames: 'isbn'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Object subclass: #Libro
	instanceVariableNames: 'isbn titulo'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Object subclass: #Libro
	instanceVariableNames: 'isbn titulo autor'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Object subclass: #Libro
	instanceVariableNames: 'isbn titulo autor editorial'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Object subclass: #Libro
	instanceVariableNames: 'isbn titulo autor editorial estado'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Object subclass: #Libro
	instanceVariableNames: 'isbn titulo autor editorial estado dni'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Object subclass: #Libro
	instanceVariableNames: 'isbn titulo au editorial estado dni'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Object subclass: #Libro
	instanceVariableNames: 'isbn titulo autor editorial estado dni'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Object subclass: #Libro
	instanceVariableNames: 'isbn titulo autor editorial estado dni'
	classVariableNames: 'isbnP'
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Object subclass: #Libro
	instanceVariableNames: 'isbn titulo autor editorial estado dni'
	classVariableNames: 'ISBNP'
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Object subclass: #Libro
	instanceVariableNames: 'isbn titulo autor editorial estado dni'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

!Libro class methodsFor!
crearLibro:unIsbn tit:unTit aut:unAut edit:unaEdit! !
!Libro class categoriesFor: #crearLibro:tit:aut:edit:!public! !

!Libro class methodsFor!
crearLibro:unIsbn
tit:unTit aut:unAut edit:unaEdit! !
!Libro class categoriesFor: #crearLibro:tit:aut:edit:!public! !

!Libro class methodsFor!
crearLibro:unIsbn
tit:unTit
aut:unAut edit:unaEdit! !
!Libro class categoriesFor: #crearLibro:tit:aut:edit:!public! !

!Libro class methodsFor!
crearLibro:unIsbn
tit:unTit
aut:unAut
edit:unaEdit! !
!Libro class categoriesFor: #crearLibro:tit:aut:edit:!public! !

!Libro class methodsFor!
crearLibro:unIsbn
tit:unTit
aut:unAut
edit:unaEdit! !
!Libro class categoriesFor: #crearLibro:tit:aut:edit:!public! !

!Libro class methodsFor!
crearLibro:unIsbn
tit:unTit
aut:unAut
edit:unaEdit! !
!Libro class categoriesFor: #crearLibro:tit:aut:edit:!public! !

| suma|
suma :=0.
1 to: 100 do:[:i | (i%7==0) ifTrue: [(i%2~=0) ifTrue: [suma:=suma+i] ] ].
suma inspect.!

| suma|
suma :=0.
1 to: 100 do:[:i | (i%7==0) ifTrue: [(i%2~=0) ifTrue: [suma:=suma+i] ] ].
suma inspect.!

| suma|
suma :=0.
1 to: 100 do:[:i | (i%7==0) ifTrue: [(i%2~=0) ifTrue: [suma:=suma+i] ] ].
suma inspect.
!

| suma|
suma :=0.
1 to: 100 do:[:i | (i%7==0) ifTrue: [(i%2~=0) ifTrue: [suma:=suma+i] ] ].
suma inspect.!

Object subclass: #Libro
	instanceVariableNames: 'isbn titulo'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Object subclass: #Libro
	instanceVariableNames: 'isbn titulo'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Object subclass: #Libro
	instanceVariableNames: 'isbn titulo'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

!Libro class methodsFor!
crearLibroIsbn: unIsbn tit: unTit aut: unAut edit: unaEdit
	! !
!Libro class categoriesFor: #crearLibroIsbn:tit:aut:edit:!public! !

Libro class removeSelector: #crearLibro:tit:aut:edit: ifAbsent: []!

!Libro class methodsFor!
crearLibroIsbn: unIsbn tit: unTit aut: unAut edit: unaEdit
"Retorna una instancia de Libro inicializada"
^(self new) iniIsbn:unIsbn.! !
!Libro class categoriesFor: #crearLibroIsbn:tit:aut:edit:!public! !

!Libro class methodsFor!
crearLibroIsbn: unIsbn tit: unTit aut: unAut edit: unaEdit
"Retorna una instancia de Libro inicializada"
^(self new) iniIsbn:unIsbn.! !
!Libro class categoriesFor: #crearLibroIsbn:tit:aut:edit:!public! !

!Libro methodsFor!
iniIsbn:unsbn
"Inicializa una instancia de Libro"
! !
!Libro categoriesFor: #iniIsbn:!public! !

!Libro methodsFor!
iniIsbn:unIsbn
"Inicializa una instancia de Libro"
! !
!Libro categoriesFor: #iniIsbn:!public! !

!Libro methodsFor!
iniIsbn:unIsbn
"Inicializa una instancia de Libro"
! !
!Libro categoriesFor: #iniIsbn:!public! !

!Libro methodsFor!
iniIsbn:unIsbn
"Inicializa una instancia de Libro"
! !
!Libro categoriesFor: #iniIsbn:!public! !

!Libro methodsFor!
iniIsbn:unIsbn
"Inicializa una instancia de Libro"
! !
!Libro categoriesFor: #iniIsbn:!public! !

!Libro methodsFor!
iniIsbn:unIsbn
"Inicializa una instancia de Libro"
! !
!Libro categoriesFor: #iniIsbn:!public! !

!Libro methodsFor!
iniIsbn:unIsbn
"Inicializa una instancia de Libro"
! !
!Libro categoriesFor: #iniIsbn:!public! !

!Libro methodsFor!
iniIsbn:unIsbn
"Inicializa una instancia de Libro"
! !
!Libro categoriesFor: #iniIsbn:!public! !

!Libro methodsFor!
iniIsbn:unIsbn
"Inicializa una instancia de Libro"
! !
!Libro categoriesFor: #iniIsbn:!public! !

!Libro methodsFor!
iniIsbn:unIsbn
"Inicializa una instancia de Libro"
! !
!Libro categoriesFor: #iniIsbn:!public! !

!Libro methodsFor!
iniIsbn:unIsbn
"Inicializa una instancia de Libro"
! !
!Libro categoriesFor: #iniIsbn:!public! !

!Libro methodsFor!
iniIsbn:unIsbn
"Inicializa una instancia de Libro"
! !
!Libro categoriesFor: #iniIsbn:!public! !

!Libro methodsFor!
iniIsbn:unIsbn
"Inicializa una instancia de Libro"
! !
!Libro categoriesFor: #iniIsbn:!public! !

!Libro methodsFor!
iniIsbn:unIsbn
"Inicializa una instancia de Libro"
! !
!Libro categoriesFor: #iniIsbn:!public! !

!Libro methodsFor!
iniIsbn:unIsbn
"Inicializa una instancia de Libro"
! !
!Libro categoriesFor: #iniIsbn:!public! !

!Libro methodsFor!
iniIsbn:unIsbn
"Inicializa una instancia de Libro"
! !
!Libro categoriesFor: #iniIsbn:!public! !

!Libro methodsFor!
iniIsbn:unIsbn
"Inicializa una instancia de Libro"
! !
!Libro categoriesFor: #iniIsbn:!public! !

!Libro methodsFor!
verIsbn
"retorna el isbn del libro"! !
!Libro categoriesFor: #verIsbn!public! !

!Libro methodsFor!
verIsbn
"retorna el isbn del libro"! !
!Libro categoriesFor: #verIsbn!public! !

!Libro methodsFor!
verIsbn
"retorna el isbn del libro"! !
!Libro categoriesFor: #verIsbn!public! !

!Libro methodsFor!
verIsbn
"retorna el isbn del libro"! !
!Libro categoriesFor: #verIsbn!public! !

!Libro methodsFor!
iniIsbn:unIsbn
"Inicializa una instancia de Libro"
! !
!Libro categoriesFor: #iniIsbn:!public! !

!Libro methodsFor!
iniIsbn:unIsbn
"Inicializa una instancia de Libro"
! !
!Libro categoriesFor: #iniIsbn:!public! !

"23:33:22, 17 May 2020: Image saved"!

"23:33:28, 17 May 2020: Image saved"!

"23:33:40, 17 May 2020: Image saved"!

"23:41:12, 17 May 2020: Image saved"!

"07:26:16, 18 May 2020: Dolphin Smalltalk Professional started"!

"07:27:46, 18 May 2020: Image saved"!

"07:27:49, 18 May 2020: Dolphin Smalltalk Professional started"!

"07:28:52, 18 May 2020: Image saved"!

"07:28:54, 18 May 2020: Dolphin Smalltalk Professional started"!

!Libro methodsFor!
verIsbn
"retorna el isbn del libro"
! !
!Libro categoriesFor: #verIsbn!public! !

!Libro methodsFor!
iniIsbn:unIsbn
"Inicializa una instancia de Libro"
isbn:=unIsbn.! !
!Libro categoriesFor: #iniIsbn:!public! !

!Libro methodsFor!
iniLibroIsbn:unIsbn
"Inicializa una instancia de Libro"
isbn:=unIsbn.! !
!Libro categoriesFor: #iniLibroIsbn:!public! !

!Libro methodsFor!
iniLibroIsbn:unIsbn
"Inicializa una instancia de Libro"
isbn:=unIsbn.
! !
!Libro categoriesFor: #iniLibroIsbn:!public! !

!Libro methodsFor!
verIsbn:Isbn
"retorna el isbn del libro"
! !
!Libro categoriesFor: #verIsbn:!public! !

Libro removeSelector: #verIsbn ifAbsent: []!

!Libro methodsFor!
verIsbn:isbn
"retorna el isbn del libro"
! !
!Libro categoriesFor: #verIsbn:!public! !

!Libro methodsFor!
verIsbn:isbn
"retorna el isbn del libro"
! !
!Libro categoriesFor: #verIsbn:!public! !

!Libro methodsFor!
verIsbn:isbn
"retorna el isbn del libro"
! !
!Libro categoriesFor: #verIsbn:!public! !

!Libro methodsFor!
verIsbn:Isbn
"retorna el isbn del libro"
! !
!Libro categoriesFor: #verIsbn:!public! !

!Libro methodsFor!
verIsbn:Isbn
"retorna el isbn del libro"
^isbn.! !
!Libro categoriesFor: #verIsbn:!public! !

Libro removeSelector: #iniIsbn: ifAbsent: []!

!Libro methodsFor!
tit:unTit
'Inicializa una instancia de Libro'! !
!Libro categoriesFor: #tit:!public! !

Libro removeSelector: #tit: ifAbsent: []!

!Libro methodsFor!
iniLibroIsbn:unIsbn tit:unTit aut:unAut edit:unaEdit
"Inicializa una instancia de Libro"
isbn:=unIsbn.
! !
!Libro categoriesFor: #iniLibroIsbn:tit:aut:edit:!public! !

!Libro class methodsFor!
crearLibroIsbn: unIsbn tit: unTit aut: unAut edit: unaEdit
"Retorna una instancia de Libro inicializada"
^(self new) iniIsbn:unIsbn.! !
!Libro class categoriesFor: #crearLibroIsbn:tit:aut:edit:!public! !

!Libro class methodsFor!
crearLibroIsbn: unIsbn tit: unTit aut: unAut edit: unaEdit
"Retorna una instancia de Libro inicializada"
^(self new) iniLibroIsbn: unIsbn.! !
!Libro class categoriesFor: #crearLibroIsbn:tit:aut:edit:!public! !

"11:31:52, 18 May 2020: Image saved"!

"11:32:11, 18 May 2020: Image saved"!

"11:32:13, 18 May 2020: Image saved"!

"11:32:20, 18 May 2020: Image saved"!

"14:13:38, 18 May 2020: Dolphin Smalltalk Professional started"!

"14:46:13, 18 May 2020: Image saved"!

!Libro methodsFor!
iniLibroIsbn:unIsbn tit:unTit aut:unAut edit:unaEdit
"Inicializa una instancia de Libro"
isbn:=unIsbn.
! !
!Libro categoriesFor: #iniLibroIsbn:tit:aut:edit:!public! !

LayoutContext subclass: #Alumno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Alumno guid: (GUID fromString: '{55fbc49d-a3d9-4300-bb3d-2ddb06eaeca2}')!
Alumno comment: ''!
!Alumno categoriesForClass!Kernel-Objects! !
Alumno removeFromSystem!

Object subclass: #Alumno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Alumno guid: (GUID fromString: '{d9613c07-5830-4efe-841e-903d3bbcd268}')!
Alumno comment: ''!
!Alumno categoriesForClass!Kernel-Objects! !
!Alumno class methodsFor!
crearAlumno
^ self new! !
!Alumno class categoriesFor: #crearAlumno!public! !

!Alumno class methodsFor!
crearAlumno
^(self new).! !
!Alumno class categoriesFor: #crearAlumno!public! !

!Alumno class methodsFor!
crearAlumno
^(self new).! !
!Alumno class categoriesFor: #crearAlumno!public! !

Object subclass: #Alumno
	instanceVariableNames: 'nombre legajo'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Object subclass: #Alumno
	instanceVariableNames: 'nombre legajo'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Object subclass: #Alumno
	instanceVariableNames: 'nombre legajo'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

!Alumno methodsFor!
iniAlu
nombre:='Pepe'.
legajo:='1'.! !
!Alumno categoriesFor: #iniAlu!public! !

!Alumno methodsFor!
iniAlu
nombre:='Pepe'.
legajo:='1234'.! !
!Alumno categoriesFor: #iniAlu!public! !

!Alumno methodsFor!
iniAlu
nombre:='Pepe'.
legajo:='1234'.! !
!Alumno categoriesFor: #iniAlu!public! !

"14:54:43, 18 May 2020: Image saved"!

!Alumno methodsFor!
iniAlu
nombre:='Pepe'.
legajo:='1234'.! !
!Alumno categoriesFor: #iniAlu!public! !

!Alumno methodsFor!
verNombre
^nombre.! !
!Alumno categoriesFor: #verNombre!public! !

!Alumno methodsFor!
verLegajo
^legajo.! !
!Alumno categoriesFor: #verLegajo!public! !

!Alumno methodsFor!
verLegajo
^legajo.! !
!Alumno categoriesFor: #verLegajo!public! !

!Alumno class methodsFor!
crearAlumno
^(self new)iniAlu.! !
!Alumno class categoriesFor: #crearAlumno!public! !

!Alumno class methodsFor!
crearAlumno
^(self new)iniAlu.! !
!Alumno class categoriesFor: #crearAlumno!public! !

|a1 nom|
a1:=Alumno crearAlumno.

nom:=a1 verNombre.
nom inspect.!

!Alumno class methodsFor!
crearAlumno
^(self new)iniAlu.! !
!Alumno class categoriesFor: #crearAlumno!public! !

!Alumno methodsFor!
verNombre
^nombre.! !
!Alumno categoriesFor: #verNombre!public! !

!Alumno methodsFor!
verLegajo
^legajo.! !
!Alumno categoriesFor: #verLegajo!public! !

!Alumno methodsFor!
iniAlu
nombre:='Pepe'.
legajo:='1234'.! !
!Alumno categoriesFor: #iniAlu!public! !

"15:09:38, 18 May 2020: Image saved"!

|a1 nom|
a1:=Alumno crearAlumno.

nom:=a1 verNombre.
nom inspect.!

"15:11:45, 18 May 2020: Image saved"!

|a1 nom|
a1:=Alumno crearAlumno.

nom:=a1 verNombre.
nom inspect.
a1 inspect.
!

!Alumno methodsFor!
modNom:unNom
nombre:=unNom.! !
!Alumno categoriesFor: #modNom:!public! !

!Alumno methodsFor!
modNom:unNom
nombre:=unNom.! !
!Alumno categoriesFor: #modNom:!public! !

|a1 nom|
a1:=Alumno crearAlumno.

nom:=a1 verNombre.
nom inspect.
a1 inspect.
a1 modNom: 'Silvia'.
a1 inspect.!

|a1 nom|
a1:=Alumno crearAlumno.

nom:=a1 verNombre.
nom inspect.
'a1 inspect.'
a1 modNom: 'Silvia'.
a1 inspect.!

|a1 nom|
a1:=Alumno crearAlumno.

nom:=a1 verNombre.
nom inspect.
"a1 inspect."
a1 modNom: 'Silvia'.
a1 inspect.!

"16:27:00, 18 May 2020: Image saved"!

!Alumno class methodsFor!
creaAlumnoN:unNom
^(self new) iniAluN:unNom.! !
!Alumno class categoriesFor: #creaAlumnoN:!public! !

!Alumno class methodsFor!
creaAlumnoN:unNom
^(self new) iniAluN:unNom.! !
!Alumno class categoriesFor: #creaAlumnoN:!public! !

!Alumno methodsFor!
iniAluN:unNom 
nombre:=unNom.
legajo:='1234'.! !
!Alumno categoriesFor: #iniAluN:!public! !

|a1 nom|
nom:=Prompter prompt: 'Ingrese un nombre'.
"a1:=Alumno crearAlumno."
a1:=Alumno creaAlumnoN: nom.
nom:=a1 verNombre.
nom inspect.!

|a1 nom|
nom:=Prompter prompt: 'Ingrese un nombre'.
"a1:=Alumno crearAlumno."
a1:=Alumno creaAlumnoN: nom.
nom:=a1 verNombre.
nom inspect.!

!Alumno methodsFor!
iniAluN:unNom
nombre:=unNom.
legajo:='1234'.! !
!Alumno categoriesFor: #iniAluN:!public! !

!Alumno methodsFor!
iniAluN:unNom
nombre:=unNom leg:legajo.
legajo:='1234'.! !
!Alumno categoriesFor: #iniAluN:!public! !

!Alumno methodsFor!
iniAluN:unNom
nombre:=unNom leg:legajo.
"legajo:='1234'."
legajo:=legajo.! !
!Alumno categoriesFor: #iniAluN:!public! !

!Alumno methodsFor!
iniAluN:unNom
nombre:=unNom leg:legajo.
"legajo:='1234'."
legajo:=legajo.! !
!Alumno categoriesFor: #iniAluN:!public! !

!Alumno methodsFor!
iniAluN:unNom
nombre:=unNom legajo:legajo.
"legajo:='1234'."
legajo:=legajo.! !
!Alumno categoriesFor: #iniAluN:!public! !

!Alumno class methodsFor!
creaAlumnoN:unNom legajo:legajo
^(self new) iniAluN:unNom legajo.! !
!Alumno class categoriesFor: #creaAlumnoN:legajo:!public! !

!Alumno class methodsFor!
creaAlumnoN:unNom legajo:legajo
^(self new) iniAluN:unNom legajo:legajo.! !
!Alumno class categoriesFor: #creaAlumnoN:legajo:!public! !

!Alumno class methodsFor!
creaAlumnoN:unNom legajo:legajo
^(self new) iniAluN:unNom legajo:legajo.! !
!Alumno class categoriesFor: #creaAlumnoN:legajo:!public! !

!Alumno class methodsFor!
creaAlumnoN:unNom legajo:legajo
^(self new) iniAluN:unNom legajo:legajo.! !
!Alumno class categoriesFor: #creaAlumnoN:legajo:!public! !

!Alumno methodsFor!
iniAluN:unNom
nombre:=unNom legajo:legajo.
"legajo:='1234'."
legajo:=legajo.! !
!Alumno categoriesFor: #iniAluN:!public! !

!Alumno class methodsFor!
creaAlumnoN:unNom legajo:legajo
^(self new) iniAluN:unNom legajo:legajo.! !
!Alumno class categoriesFor: #creaAlumnoN:legajo:!public! !

!Alumno methodsFor!
iniAluN:unNom legajo:leg 
nombre:=unNom legajo:leg.
"legajo:='1234'."
legajo:=legajo.! !
!Alumno categoriesFor: #iniAluN:legajo:!public! !

!Alumno methodsFor!
iniAluN:unNom legajo:leg 
nombre:=unNom legajo:leg.
"legajo:='1234'."
legajo:=legajo.! !
!Alumno categoriesFor: #iniAluN:legajo:!public! !

!Alumno methodsFor!
iniAluN:unNom legajo:leg 
nombre:=unNom.
"legajo:='1234'."
legajo:=leg.! !
!Alumno categoriesFor: #iniAluN:legajo:!public! !

!Alumno methodsFor!
iniAluN:unNom legajo:leg 
nombre:=unNom.
"legajo:='1234'."
legajo:=leg.! !
!Alumno categoriesFor: #iniAluN:legajo:!public! !

!Alumno class methodsFor!
creaAlumnoN:unNom legajo:legajo
^(self new) iniAluN:unNom legajo:legajo.! !
!Alumno class categoriesFor: #creaAlumnoN:legajo:!public! !

!Alumno methodsFor!
iniAluN:unNom
nombre:=unNom.
legajo:='1234'.
! !
!Alumno categoriesFor: #iniAluN:!public! !

!Alumno methodsFor!
iniAluN:unNom
nombre:=unNom.
legajo:='1234'.
! !
!Alumno categoriesFor: #iniAluN:!public! !

!Alumno methodsFor!
iniAluN:unNom legajo:leg 
nombre:=unNom.
"legajo:='1234'."
legajo:=leg.! !
!Alumno categoriesFor: #iniAluN:legajo:!public! !

!Alumno methodsFor!
iniAluN:unNom legajo:leg 
nombre:=unNom.
"legajo:='1234'."
legajo:=leg.! !
!Alumno categoriesFor: #iniAluN:legajo:!public! !

!Alumno methodsFor!
iniAluN:unNom legajo:leg 
nombre:=unNom.
legajo:=leg.! !
!Alumno categoriesFor: #iniAluN:legajo:!public! !

|a2 nom leg|
nom:=Prompter prompt: 'Ingrese un nombre'.
leg:=Prompter prompt: 'Ingrese un legajo'.
a2:=Alumno creaAlumnoN: nom legajo: leg.
a2 inspect.!

Object subclass: #Alumno
	instanceVariableNames: 'nombre dni legajo'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

!Alumno methodsFor!
iniAluN:unNom
nombre:=unNom.
legajo:='1234'.
dni=''.
! !
!Alumno categoriesFor: #iniAluN:!public! !

!Alumno methodsFor!
iniAlu
nombre:='Pepe'.
legajo:='1234'.
dni=''.! !
!Alumno categoriesFor: #iniAlu!public! !

!Alumno methodsFor!
iniAlu
nombre:='Pepe'.
legajo:='1234'.
dni=''.! !
!Alumno categoriesFor: #iniAlu!public! !

!Alumno methodsFor!
iniAluN
nombre:='Pepe'.
legajo:='1234'.
dni=''.! !
!Alumno categoriesFor: #iniAluN!public! !

!Alumno methodsFor!
iniAluN:unNom legajo:leg 
nombre:=unNom.
legajo:=leg.
dni=''.! !
!Alumno categoriesFor: #iniAluN:legajo:!public! !

|a2 nom leg|
nom:=Prompter prompt: 'Ingrese un nombre'.
leg:=Prompter prompt: 'Ingrese un legajo'.
a2:=Alumno creaAlumnoN: nom legajo: leg.
a2 inspect.!

!Alumno methodsFor!
iniAluN:unNom legajo:leg dni:dni
nombre:=unNom.
legajo:=leg.
dni=dni.! !
!Alumno categoriesFor: #iniAluN:legajo:dni:!public! !

!Alumno class methodsFor!
creaAlumnoN:unNom legajo:legajo dni:dni
^(self new) iniAluN:unNom legajo:legajo dni:dni.! !
!Alumno class categoriesFor: #creaAlumnoN:legajo:dni:!public! !

!Alumno class methodsFor!
creaAlumnoN:unNom legajo:legajo dni:dni
^(self new) iniAluN:unNom legajo:legajo dni:dni.! !
!Alumno class categoriesFor: #creaAlumnoN:legajo:dni:!public! !

!Alumno methodsFor!
verDni
^dni.! !
!Alumno categoriesFor: #verDni!public! !

!Alumno methodsFor!
verDni
^dni.! !
!Alumno categoriesFor: #verDni!public! !

!Alumno methodsFor!
modDni:unDni
dni:=unDni.! !
!Alumno categoriesFor: #modDni:!public! !

!Alumno methodsFor!
modDni:unDni
dni:=unDni.! !
!Alumno categoriesFor: #modDni:!public! !

!Alumno methodsFor!
modDni:unDni
dni:=unDni.! !
!Alumno categoriesFor: #modDni:!public! !

!Alumno methodsFor!
modDni:unDni
dni:=unDni.! !
!Alumno categoriesFor: #modDni:!public! !

!Alumno methodsFor!
modDni:unDni
dni:=unDni.! !
!Alumno categoriesFor: #modDni:!public! !

!Alumno methodsFor!
modDni:unDni
dni:=unDni.! !
!Alumno categoriesFor: #modDni:!public! !

!Alumno methodsFor!
modLegajo:unLegajo
legajo:=unLegajo.! !
!Alumno categoriesFor: #modLegajo:!public! !

!Alumno methodsFor!
modLegajo:unLegajo
legajo:=unLegajo.! !
!Alumno categoriesFor: #modLegajo:!public! !

!Alumno methodsFor!
modLegajo:unLegajo
legajo:=unLegajo.! !
!Alumno categoriesFor: #modLegajo:!public! !

!Alumno methodsFor!
modNom:unNom
nombre:=unNom.! !
!Alumno categoriesFor: #modNom:!public! !

"19:11:21, 18 May 2020: Image saved"!

"19:11:22, 18 May 2020: Image saved"!

!Alumno methodsFor!
verNombre
^nombre.! !
!Alumno categoriesFor: #verNombre!public! !

!Alumno methodsFor!
verLegajo
^legajo.! !
!Alumno categoriesFor: #verLegajo!public! !

!Alumno methodsFor!
verDni
^dni.! !
!Alumno categoriesFor: #verDni!public! !

!Alumno methodsFor!
modNom:unNom
nombre:=unNom.! !
!Alumno categoriesFor: #modNom:!public! !

!Alumno methodsFor!
modLegajo:unLegajo
legajo:=unLegajo.! !
!Alumno categoriesFor: #modLegajo:!public! !

!Alumno methodsFor!
modDni:unDni
dni:=unDni.! !
!Alumno categoriesFor: #modDni:!public! !

!Alumno methodsFor!
iniAluN:unNom legajo:leg dni:dni
nombre:=unNom.
legajo:=leg.
dni=dni.! !
!Alumno categoriesFor: #iniAluN:legajo:dni:!public! !

!Alumno methodsFor!
iniAluN:unNom legajo:leg 
nombre:=unNom.
legajo:=leg.
dni=''.! !
!Alumno categoriesFor: #iniAluN:legajo:!public! !

|a2 nom leg|
nom:=Prompter prompt: 'Ingrese un nombre'.
leg:=Prompter prompt: 'Ingrese un legajo'.
a2:=Alumno creaAlumnoN: nom legajo: leg.
a2 inspect.!

!Alumno methodsFor!
iniAluN:unNom legajo:leg dni:unDni
nombre:=unNom.
legajo:=leg.
dni=unDni.! !
!Alumno categoriesFor: #iniAluN:legajo:dni:!public! !

!Alumno methodsFor!
iniAluN
nombre:='Pepe'.
legajo:='1234'.
dni='9999'.! !
!Alumno categoriesFor: #iniAluN!public! !

!Alumno methodsFor!
iniAluN
nombre:='Pepe'.
legajo:='1234'.
dni='9999'.! !
!Alumno categoriesFor: #iniAluN!public! !

!Alumno methodsFor!
iniAluN:unNom
nombre:=unNom.
legajo:='41234'.
dni='7777777'.
! !
!Alumno categoriesFor: #iniAluN:!public! !

!Alumno methodsFor!
iniAluN:unNom legajo:leg 
nombre:=unNom.
legajo:=leg.
dni='6666666666'.! !
!Alumno categoriesFor: #iniAluN:legajo:!public! !

!Alumno methodsFor!
iniAlu
nombre:='Pepe'.
legajo:='1234'.
dni='444444'.! !
!Alumno categoriesFor: #iniAlu!public! !

|a2 nom leg|
nom:=Prompter prompt: 'Ingrese un nombre'.
leg:=Prompter prompt: 'Ingrese un legajo'.
a2:=Alumno creaAlumnoN: nom legajo: leg.
a2 inspect.!

!Alumno methodsFor!
iniAluN:unNom legajo:leg 
nombre:=unNom.
legajo:=leg.
dni='6666666666'.! !
!Alumno categoriesFor: #iniAluN:legajo:!public! !

!Alumno methodsFor!
iniAluN:unNom legajo:leg 
nombre:=unNom.
legajo:=leg.
dni='6666666666'.! !
!Alumno categoriesFor: #iniAluN:legajo:!public! !

!Alumno methodsFor!
iniAluN:unNom legajo:leg dni:unDni
nombre:=unNom.
legajo:=leg.
dni=unDni.! !
!Alumno categoriesFor: #iniAluN:legajo:dni:!public! !

!Alumno methodsFor!
iniAluN:unNom
nombre:=unNom.
legajo:='41234'.
dni='7777777'.
! !
!Alumno categoriesFor: #iniAluN:!public! !

!Alumno methodsFor!
iniAluN
nombre:='Pepe'.
legajo:='1234'.
dni='9999'.! !
!Alumno categoriesFor: #iniAluN!public! !

!Alumno methodsFor!
iniAlu
nombre:='Pepe'.
legajo:='1234'.
dni='444444'.! !
!Alumno categoriesFor: #iniAlu!public! !

!Alumno methodsFor!
iniAluN:unNom legajo:leg dni:unDni
nombre:=unNom.
legajo:=leg.
dni=unDni.! !
!Alumno categoriesFor: #iniAluN:legajo:dni:!public! !

|a2 nom leg|
nom:=Prompter prompt: 'Ingrese un nombre'.
leg:=Prompter prompt: 'Ingrese un legajo'.
a2:=Alumno creaAlumnoN: nom legajo: leg.
a2 inspect.!

"19:18:58, 18 May 2020: Image saved"!

"19:18:59, 18 May 2020: Image saved"!

|a2 nom leg|
nom:=Prompter prompt: 'Ingrese un nombre'.
leg:=Prompter prompt: 'Ingrese un legajo'.
a2:=Alumno creaAlumnoN: nom legajo: leg.
a2 inspect.!

!Alumno methodsFor!
iniAluN:unNom legajo:leg 
nombre:=unNom.
legajo:=leg.
dni:='6666666666'.! !
!Alumno categoriesFor: #iniAluN:legajo:!public! !

!Alumno methodsFor!
iniAluN:unNom legajo:leg 
nombre:=unNom.
legajo:=leg.
dni:='6666666666'.! !
!Alumno categoriesFor: #iniAluN:legajo:!public! !

!Alumno methodsFor!
iniAluN:unNom
nombre:=unNom.
legajo:='41234'.
dni:='7777777'.
! !
!Alumno categoriesFor: #iniAluN:!public! !

!Alumno methodsFor!
iniAluN:unNom
nombre:=unNom.
legajo:='41234'.
dni:='7777777'.
! !
!Alumno categoriesFor: #iniAluN:!public! !

!Alumno methodsFor!
iniAluN
nombre:='Pepe'.
legajo:='1234'.
dni:='9999'.! !
!Alumno categoriesFor: #iniAluN!public! !

!Alumno methodsFor!
iniAluN
nombre:='Pepe'.
legajo:='1234'.
dni:='9999'.! !
!Alumno categoriesFor: #iniAluN!public! !

!Alumno methodsFor!
iniAlu
nombre:='Pepe'.
legajo:='1234'.
dni:='444444'.! !
!Alumno categoriesFor: #iniAlu!public! !

!Alumno methodsFor!
iniAlu
nombre:='Pepe'.
legajo:='1234'.
dni:='444444'.! !
!Alumno categoriesFor: #iniAlu!public! !

!Alumno methodsFor!
iniAluN:unNom legajo:leg dni:unDni
nombre:=unNom.
legajo:=leg.
dni:=unDni.! !
!Alumno categoriesFor: #iniAluN:legajo:dni:!public! !

!Alumno methodsFor!
iniAluN:unNom legajo:leg dni:unDni
nombre:=unNom.
legajo:=leg.
dni:=unDni.! !
!Alumno categoriesFor: #iniAluN:legajo:dni:!public! !

|a2 nom leg|
nom:=Prompter prompt: 'Ingrese un nombre'.
leg:=Prompter prompt: 'Ingrese un legajo'.
a2:=Alumno creaAlumnoN: nom legajo: leg.
a2 inspect.
!

!Alumno methodsFor!
iniAluN:unNom legajo:leg 
nombre:=unNom.
legajo:=leg.
"dni:='6666666666'."! !
!Alumno categoriesFor: #iniAluN:legajo:!public! !

!Alumno methodsFor!
iniAluN:unNom legajo:leg 
nombre:=unNom.
legajo:=leg.
"dni:='6666666666'."! !
!Alumno categoriesFor: #iniAluN:legajo:!public! !

!Alumno methodsFor!
iniAluN:unNom legajo:leg dni:unDni
nombre:=unNom.
legajo:=leg.
dni:=unDni.! !
!Alumno categoriesFor: #iniAluN:legajo:dni:!public! !

|a2 nom leg|
nom:=Prompter prompt: 'Ingrese un nombre'.
leg:=Prompter prompt: 'Ingrese un legajo'.
a2:=Alumno creaAlumnoN: nom legajo: leg.
a2 inspect.!

!Alumno methodsFor!
iniAluN:unNom legajo:leg 
nombre:=unNom.
legajo:=leg.

dni:= (Alumno creaAlumnoN).
"dni:='6666666666'."! !
!Alumno categoriesFor: #iniAluN:legajo:!public! !

!Alumno methodsFor!
iniAluN:unNom legajo:leg 
nombre:=unNom.
legajo:=leg.

dni:= (Alumno creaAlumnoN).
"dni:='6666666666'."! !
!Alumno categoriesFor: #iniAluN:legajo:!public! !

!Alumno methodsFor!
iniAluN:unNom legajo:leg 
nombre:=unNom.
legajo:=leg.

dni:= (Alumno creaAlumnoN).dni.
"dni:='6666666666'."! !
!Alumno categoriesFor: #iniAluN:legajo:!public! !

!Alumno methodsFor!
iniAluN:unNom legajo:leg 
nombre:=unNom.
legajo:=leg.

dni:= (Alumno creaAlumnoN).dni.
"dni:='6666666666'."! !
!Alumno categoriesFor: #iniAluN:legajo:!public! !

!Alumno methodsFor!
iniAluN:unNom legajo:leg 
nombre:=unNom.
legajo:=leg.

dni:= (Alumno creaAlumnoN) verDni
"dni:='6666666666'."! !
!Alumno categoriesFor: #iniAluN:legajo:!public! !

!Alumno methodsFor!
iniAluN:unNom legajo:leg 
nombre:=unNom.
legajo:=leg.

dni:= (Alumno creaAlumnoN) verDni
"dni:='6666666666'."! !
!Alumno categoriesFor: #iniAluN:legajo:!public! !

!Alumno class methodsFor!
creaAlumnoN
^(self new) iniAluN.! !
!Alumno class categoriesFor: #creaAlumnoN!public! !

!Alumno methodsFor!
iniAluN:unNom legajo:leg 
nombre:=unNom.
legajo:=leg.

dni:= (Alumno creaAlumnoN) verDni
"dni:='6666666666'."! !
!Alumno categoriesFor: #iniAluN:legajo:!public! !

|a2 nom leg|
nom:=Prompter prompt: 'Ingrese un nombre'.
leg:=Prompter prompt: 'Ingrese un legajo'.
a2:=Alumno creaAlumnoN: nom legajo: leg.
a2 inspect.!

Object subclass: #Libro
	instanceVariableNames: 'isbn titulo autor editorial estado dni'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Object subclass: #Libro
	instanceVariableNames: 'isbn titulo autor editorial estado dni'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

!Libro class methodsFor!
crearLibroIsbn:unIsbn tit: unTit aut: unAut edit: unaEdit
"Retorna una instancia de Libro inicializada"
^(self new) iniLibroIsbn: unIsbn.! !
!Libro class categoriesFor: #crearLibroIsbn:tit:aut:edit:!public! !

!Libro class methodsFor!
crearLibroIsbn:unIsbn tit:unTit aut:unAut edit: unaEdit
"Retorna una instancia de Libro inicializada"
^(self new) iniLibroIsbn:unIsbn.! !
!Libro class categoriesFor: #crearLibroIsbn:tit:aut:edit:!public! !

Libro removeSelector: #iniLibroIsbn: ifAbsent: []!

!Libro methodsFor!
iniLibroIsbn:unIsbn tit:unTit aut:unAut edit:unaEdit
"Inicializa una instancia de Libro"
isbn:=unIsbn.
titulo:=unTit.
autor:=unAut.
editorial:=unaEdit.
! !
!Libro categoriesFor: #iniLibroIsbn:tit:aut:edit:!public! !

!Libro methodsFor!
iniLibroIsbn:unIsbn tit:unTit aut:unAut edit:unaEdit
"Inicializa una instancia de Libro"
isbn:=unIsbn.
titulo:=unTit.
autor:=unAut.
editorial:=unaEdit.
! !
!Libro categoriesFor: #iniLibroIsbn:tit:aut:edit:!public! !

!Libro methodsFor!
iniLibroIsbn:unIsbn tit:unTit aut:unAut edit:unaEdit
"Inicializa una instancia de Libro"
isbn:=unIsbn.
titulo:=unTit.
autor:=unAut.
editorial:=unaEdit.
! !
!Libro categoriesFor: #iniLibroIsbn:tit:aut:edit:!public! !

!Libro methodsFor!
iniLibroIsbn:unIsbn tit:unTit aut:unAut edit:unaEdit
"Inicializa una instancia de Libro"
isbn:=unIsbn.
titulo:=unTit.
autor:=unAut.
editorial:=unaEdit.
! !
!Libro categoriesFor: #iniLibroIsbn:tit:aut:edit:!public! !

!Libro methodsFor!
iniLibroIsbn:unIsbn tit:unTit aut:unAut edit:unaEdit
"Inicializa una instancia de Libro"
isbn:=unIsbn.
titulo:=unTit.
autor:=unAut.
editorial:=unaEdit.
! !
!Libro categoriesFor: #iniLibroIsbn:tit:aut:edit:!public! !

!Libro methodsFor!
iniLibroIsbn:unIsbn tit:unTit aut:unAut edit:unaEdit
"Inicializa una instancia de Libro"
isbn:=unIsbn.
titulo:=unTit.
autor:=unAut.
editorial:=unaEdit.
! !
!Libro categoriesFor: #iniLibroIsbn:tit:aut:edit:!public! !

!Libro methodsFor!
iniLibroIsbn:unIsbn tit:unTit aut:unAut edit:unaEdit
"Inicializa una instancia de Libro"
isbn:=unIsbn.
titulo:=unTit.
autor:=unAut.
editorial:=unaEdit.
! !
!Libro categoriesFor: #iniLibroIsbn:tit:aut:edit:!public! !

"19:59:06, 18 May 2020: Image saved"!

!Libro methodsFor!
iniLibroIsbn:unIsbn tit:unTit aut:unAut edit:unaEdit
"Inicializa una instancia de Libro"
isbn:=unIsbn.
titulo:=unTit.
autor:=unAut.
editorial:=unaEdit.
! !
!Libro categoriesFor: #iniLibroIsbn:tit:aut:edit:!public! !

!Libro class methodsFor!
crearLibroIsbn:unIsbn tit:unTit aut:unAut edit: unaEdit
"Retorna una instancia de Libro inicializada"
^(self new) iniLibroIsbn:unIsbn tit:unTit aut:unAut edit:unaEdit.! !
!Libro class categoriesFor: #crearLibroIsbn:tit:aut:edit:!public! !

!Libro class methodsFor!
crearLibroIsbn:unIsbn tit:unTit aut:unAut edit: unaEdit
"Retorna una instancia de Libro inicializada"
^(self new) iniLibroIsbn:unIsbn tit:unTit aut:unAut edit:unaEdit.! !
!Libro class categoriesFor: #crearLibroIsbn:tit:aut:edit:!public! !

!Libro class methodsFor!
crearLibroIsbn:unIsbn tit:unTit aut:unAut edit: unaEdit
"Retorna una instancia de Libro inicializada"
^(self new) iniLibroIsbn:unIsbn tit:unTit aut:unAut edit:unaEdit.! !
!Libro class categoriesFor: #crearLibroIsbn:tit:aut:edit:!public! !

!Libro class methodsFor!
crearLibroIsbn:unIsbn tit:unTit aut:unAut edit: unaEdit
"Retorna una instancia de Libro inicializada"
^(self new) iniLibroIsbn:unIsbn tit:unTit aut:unAut edit:unaEdit.! !
!Libro class categoriesFor: #crearLibroIsbn:tit:aut:edit:!public! !

!Libro methodsFor!
iniLibroIsbn:unIsbn tit:unTit aut:unAut edit:unaEdit
"Inicializa una instancia de Libro"
isbn:=unIsbn.
titulo:=unTit.
autor:=unAut.
editorial:=unaEdit.
! !
!Libro categoriesFor: #iniLibroIsbn:tit:aut:edit:!public! !

!Libro methodsFor!
verIsbn:Isbn
"retorna el isbn del libro"
^isbn.! !
!Libro categoriesFor: #verIsbn:!public! !

!Libro class methodsFor!
crearLibroIsbn:unIsbn tit:unTit aut:unAut edit: unaEdit
"Retorna una instancia de Libro inicializada"
^(self new) iniLibroIsbn:unIsbn tit:unTit aut:unAut edit:unaEdit.! !
!Libro class categoriesFor: #crearLibroIsbn:tit:aut:edit:!public! !

!Libro class methodsFor!
crearLibroIsbn:unIsbn tit:unTit aut:unAut edit: unaEdit
"Retorna una instancia de Libro inicializada"
^(self new) iniLibroIsbn:unIsbn tit:unTit aut:unAut edit:unaEdit.! !
!Libro class categoriesFor: #crearLibroIsbn:tit:aut:edit:!public! !

|l1 isbn titulo autor editorial|
isbn:=Prompter prompt: 'Ingrese ISBN'.
titulo:=Prompter prompt: 'Ingrese titulo del libro'.
autor:=Prompter prompt: 'Ingrese nombre del autor'.
editorial:=Prompter prompt: 'Ingrese editorial'.
l1:=Libro crearLibroIsbn: isbn tit: titulo aut: autor edit: editorial.
l1 inspect.!

!Libro methodsFor!
verIsbn
"retorna el isbn del libro"
^isbn.! !
!Libro categoriesFor: #verIsbn!public! !

!Libro methodsFor!
verIsbn:Isbn
"retorna el isbn del libro"
^isbn.! !
!Libro categoriesFor: #verIsbn:!public! !

!Libro methodsFor!
verIsbn
"retorna el isbn del libro"
^isbn.! !
!Libro categoriesFor: #verIsbn!public! !

|l1 isbn titulo autor editorial|
isbn:=Prompter prompt: 'Ingrese ISBN'.
titulo:=Prompter prompt: 'Ingrese titulo del libro'.
autor:=Prompter prompt: 'Ingrese nombre del autor'.
editorial:=Prompter prompt: 'Ingrese editorial'.
l1:=Libro crearLibroIsbn: isbn tit: titulo aut: autor edit: editorial.
l1 inspect.
isbn:=l1 verIsbn.
isbn inspect.
isbn:=l1 verIsbn:11.
isbn inspect.!

|l1 isbn titulo autor editorial|
isbn:=Prompter prompt: 'Ingrese ISBN'.
titulo:=Prompter prompt: 'Ingrese titulo del libro'.
autor:=Prompter prompt: 'Ingrese nombre del autor'.
editorial:=Prompter prompt: 'Ingrese editorial'.
l1:=Libro crearLibroIsbn: isbn tit: titulo aut: autor edit: editorial.
l1 inspect.
isbn:=l1 verIsbn.
isbn inspect.
isbn:=l1 verIsbn:11.
isbn inspect.!

Libro removeSelector: #verIsbn: ifAbsent: []!

!Libro methodsFor!
verTitulo
"retorna el titulo del libro"
^titulo.! !
!Libro categoriesFor: #verTitulo!public! !

!Libro methodsFor!
verTitulo
"retorna el titulo del libro"
^titulo.! !
!Libro categoriesFor: #verTitulo!public! !

!Libro methodsFor!
verAutor
"retorna el titulo del libro"
^autor.! !
!Libro categoriesFor: #verAutor!public! !

!Libro methodsFor!
verEditorial
"retorna la editorial del libro"
^editorial.! !
!Libro categoriesFor: #verEditorial!public! !

!Libro methodsFor!
verAutor
"retorna el autor del libro"
^autor.! !
!Libro categoriesFor: #verAutor!public! !

!Libro methodsFor!
verAutor
"retorna el autor del libro"
^autor.! !
!Libro categoriesFor: #verAutor!public! !

!Libro methodsFor!
verAutor
"retorna el autor del libro"
^autor.! !
!Libro categoriesFor: #verAutor!public! !

!Libro methodsFor!
verAutor
"retorna el autor del libro"
^autor.! !
!Libro categoriesFor: #verAutor!public! !

!Libro methodsFor!
verAutor
"retorna el autor del libro"
^autor.! !
!Libro categoriesFor: #verAutor!public! !

!Libro methodsFor!
verEstado
"retorna el estado del libro"
^estado.! !
!Libro categoriesFor: #verEstado!public! !

!Libro methodsFor!
verDni
"retorna el dni del libro"
^dni.! !
!Libro categoriesFor: #verDni!public! !

!Libro methodsFor!
verDni
"retorna el dni del libro"
^dni.! !
!Libro categoriesFor: #verDni!public! !

!Libro methodsFor!
modiIsbn:unIsbn
"modifica el isbn del libro"
isbn:=unIsbn.! !
!Libro categoriesFor: #modiIsbn:!public! !

!Libro methodsFor!
modiTitulo:unTit
"modifica el titulo del libro"
isbn:=unTit.! !
!Libro categoriesFor: #modiTitulo:!public! !

!Libro methodsFor!
modiTitulo:unAut
"modifica el titulo del libro"
autor:=unAut.! !
!Libro categoriesFor: #modiTitulo:!public! !

!Libro methodsFor!
modiAutor:unAut
"modifica el titulo del libro"
autor:=unAut.! !
!Libro categoriesFor: #modiAutor:!public! !

!Libro methodsFor!
modiEditorial:unaEdit
"modifica el titulo del libro"
editorial:=unaEdit.! !
!Libro categoriesFor: #modiEditorial:!public! !

!Libro methodsFor!
modiEditorial:unaEdit
"modifica la editorial del libro"
editorial:=unaEdit.! !
!Libro categoriesFor: #modiEditorial:!public! !

!Libro methodsFor!
modiEstado
"modifica el estado del libro"
estado:=estado negated.! !
!Libro categoriesFor: #modiEstado!public! !

!Libro methodsFor!
modiDni:unDni
"modifica el dni del libro"
dni:=unDni.! !
!Libro categoriesFor: #modiDni:!public! !

!Libro methodsFor!
modiEditorial:unaEdit
"modifica la editorial del libro"
editorial:=unaEdit.! !
!Libro categoriesFor: #modiEditorial:!public! !

!Libro methodsFor!
iniLibroIsbn:unIsbn tit:unTit aut:unAut edit:unaEdit
"Inicializa una instancia de Libro"
isbn:=unIsbn.
titulo:=unTit.
autor:=unAut.
editorial:=unaEdit.
! !
!Libro categoriesFor: #iniLibroIsbn:tit:aut:edit:!public! !

!Libro methodsFor!
modiAutor:unAut
"modifica el titulo del libro"
autor:=unAut.! !
!Libro categoriesFor: #modiAutor:!public! !

!Libro methodsFor!
modiDni:unDni
"modifica el dni del libro"
dni:=unDni.! !
!Libro categoriesFor: #modiDni:!public! !

!Libro methodsFor!
modiEditorial:unaEdit
"modifica la editorial del libro"
editorial:=unaEdit.! !
!Libro categoriesFor: #modiEditorial:!public! !

!Libro methodsFor!
modiEstado
"modifica el estado del libro"
estado:=estado negated.! !
!Libro categoriesFor: #modiEstado!public! !

!Libro methodsFor!
verAutor
"retorna el autor del libro"
^autor.! !
!Libro categoriesFor: #verAutor!public! !

!Libro methodsFor!
verDni
"retorna el dni del libro"
^dni.! !
!Libro categoriesFor: #verDni!public! !

!Libro methodsFor!
modiTitulo:unAut
"modifica el titulo del libro"
autor:=unAut.! !
!Libro categoriesFor: #modiTitulo:!public! !


|l1 l2 isbn titulo autor editorial|
isbn:=Prompter prompt: 'Ingrese ISBN'.
titulo:=Prompter prompt: 'Ingrese titulo del libro'.
autor:=Prompter prompt: 'Ingrese nombre del autor'.
editorial:=Prompter prompt: 'Ingrese editorial'.
l1:=Libro crearLibroIsbn: isbn tit: titulo aut: autor edit: editorial.
l1 inspect.
"isbn:=l1 verIsbn."
"isbn inspect."
isbn:=Prompter prompt: 'Ingrese ISBN'.
titulo:=Prompter prompt: 'Ingrese titulo del libro'.
autor:=Prompter prompt: 'Ingrese nombre del autor'.
editorial:=Prompter prompt: 'Ingrese editorial'.
l2:=Libro crearLibroIsbn: isbn tit: titulo aut: autor edit: editorial.
l2 inspect.!

"ejemplo libro"

|l1 l2 isbn titulo autor editorial|
isbn:=Prompter prompt: 'Ingrese ISBN'.
titulo:=Prompter prompt: 'Ingrese titulo del libro'.
autor:=Prompter prompt: 'Ingrese nombre del autor'.
editorial:=Prompter prompt: 'Ingrese editorial'.
l1:=Libro crearLibroIsbn: isbn tit: titulo aut: autor edit: editorial.
l1 inspect.
"isbn:=l1 verIsbn."
"isbn inspect."
isbn:=Prompter prompt: 'Ingrese ISBN'.
titulo:=Prompter prompt: 'Ingrese titulo del libro'.
autor:=Prompter prompt: 'Ingrese nombre del autor'.
editorial:=Prompter prompt: 'Ingrese editorial'.
l2:=Libro crearLibroIsbn: isbn tit: titulo aut: autor edit: editorial.
l2 inspect.
"Mostrar el título del libro con menor isbn si los libros tienen el mismo autor."
(l1 verAutor=l2 verAutor)ifTrue:[
						(l1 verIsbn<l2 verIsbn)	ifTrue:[(l1 verTitulo)inspect]
											ifFalse:[(l2 verTitulo)inspect]
							]
					ifFalse:[^'Los libros no tienen el mismo autor'].!

"ejemplo libro"

|l1 l2 isbn titulo autor editorial|
isbn:=Prompter prompt: 'Ingrese ISBN'.
titulo:=Prompter prompt: 'Ingrese titulo del libro'.
autor:=Prompter prompt: 'Ingrese nombre del autor'.
editorial:=Prompter prompt: 'Ingrese editorial'.
l1:=Libro crearLibroIsbn: isbn tit: titulo aut: autor edit: editorial.
l1 inspect.
"isbn:=l1 verIsbn."
"isbn inspect."
isbn:=Prompter prompt: 'Ingrese ISBN'.
titulo:=Prompter prompt: 'Ingrese titulo del libro'.
autor:=Prompter prompt: 'Ingrese nombre del autor'.
editorial:=Prompter prompt: 'Ingrese editorial'.
l2:=Libro crearLibroIsbn: isbn tit: titulo aut: autor edit: editorial.
l2 inspect.
"Mostrar el título del libro con menor isbn si los libros tienen el mismo autor."
(l1 verAutor=l2 verAutor)ifTrue:[
						(l1 verIsbn<l2 verIsbn)	ifTrue:[(l1 verTitulo)inspect]
											ifFalse:[(l2 verTitulo)inspect]
							]
					ifFalse:[^'Los libros no tienen el mismo autor'].!


"ejemplo libro"

|l1 l2 isbn titulo autor editorial|
isbn:=Prompter prompt: 'Ingrese ISBN'.
titulo:=Prompter prompt: 'Ingrese titulo del libro'.
autor:=Prompter prompt: 'Ingrese nombre del autor'.
editorial:=Prompter prompt: 'Ingrese editorial'.
l1:=Libro crearLibroIsbn: isbn tit: titulo aut: autor edit: editorial.
l1 inspect.
"isbn:=l1 verIsbn."
"isbn inspect."
isbn:=Prompter prompt: 'Ingrese ISBN'.
titulo:=Prompter prompt: 'Ingrese titulo del libro'.
autor:=Prompter prompt: 'Ingrese nombre del autor'.
editorial:=Prompter prompt: 'Ingrese editorial'.
l2:=Libro crearLibroIsbn: isbn tit: titulo aut: autor edit: editorial.
l2 inspect.
"Mostrar el título del libro con menor isbn si los libros tienen el mismo autor."
(l1 verAutor=l2 verAutor)ifTrue:[
						(l1 verIsbn<l2 verIsbn)	ifTrue:[(l1 verTitulo)inspect]
											ifFalse:[(l2 verTitulo)inspect]
							]
					ifFalse:[^'Los libros no tienen el mismo autor'].







!

!Libro methodsFor!
iniLibroIsbn:unIsbn tit:unTit aut:unAut edit:unaEdit
"Inicializa una instancia de Libro"
isbn:=unIsbn.
titulo:=unTit.
autor:=unAut.
editorial:=unaEdit.
estado:=false.
! !
!Libro categoriesFor: #iniLibroIsbn:tit:aut:edit:!public! !

!Libro methodsFor!
iniLibroIsbn:unIsbn tit:unTit aut:unAut edit:unaEdit
"Inicializa una instancia de Libro"
isbn:=unIsbn.
titulo:=unTit.
autor:=unAut.
editorial:=unaEdit.
estado:=false.
dni:=0.
! !
!Libro categoriesFor: #iniLibroIsbn:tit:aut:edit:!public! !

!Libro methodsFor!
iniLibroIsbn:unIsbn tit:unTit aut:unAut edit:unaEdit
"Inicializa una instancia de Libro"
isbn:=unIsbn.
titulo:=unTit.
autor:=unAut.
editorial:=unaEdit.
estado:=false.
dni:=0.
! !
!Libro categoriesFor: #iniLibroIsbn:tit:aut:edit:!public! !

!Libro methodsFor!
iniLibroIsbn:unIsbn tit:unTit aut:unAut edit:unaEdit
"Inicializa una instancia de Libro"
isbn:=unIsbn.
titulo:=unTit.
autor:=unAut.
editorial:=unaEdit.
estado:=false.
dni:=0.
! !
!Libro categoriesFor: #iniLibroIsbn:tit:aut:edit:!public! !

!Libro methodsFor!
verTitulo
"retorna el titulo del libro"
^titulo.! !
!Libro categoriesFor: #verTitulo!public! !

!Libro class methodsFor!
crearLibroIsbn:unIsbn tit:unTit aut:unAut edit: unaEdit
"Retorna una instancia de Libro inicializada"
^(self new) iniLibroIsbn:unIsbn tit:unTit aut:unAut edit:unaEdit.! !
!Libro class categoriesFor: #crearLibroIsbn:tit:aut:edit:!public! !

"00:12:09, 19 May 2020: Image saved"!

"00:12:11, 19 May 2020: Image saved"!

"00:12:15, 19 May 2020: Image saved"!

"00:13:11, 19 May 2020: Image saved"!

"00:13:14, 19 May 2020: Image saved"!

"00:13:19, 19 May 2020: Image saved"!

"00:13:21, 19 May 2020: Image saved"!

"00:13:50, 19 May 2020: Image saved"!

"05:17:39, 19 May 2020: Dolphin Smalltalk Professional started"!

Object subclass: #Punto
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Punto guid: (GUID fromString: '{0d1df4e5-3665-4fc1-8b59-2352a9b7b43d}')!
Punto comment: ''!
!Punto categoriesForClass!Kernel-Objects! !
Punto removeFromSystem!

Object subclass: #PuntoDelPlano
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
PuntoDelPlano guid: (GUID fromString: '{e88c7d49-ce03-41e5-81bc-79e0df72afe6}')!
PuntoDelPlano comment: ''!
!PuntoDelPlano categoriesForClass!Kernel-Objects! !
Object subclass: #PuntoDelPlano
	instanceVariableNames: 'x y'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

!PuntoDelPlano methodsFor!
verCoordenadaX
^x.! !
!PuntoDelPlano categoriesFor: #verCoordenadaX!public! !

!PuntoDelPlano methodsFor!
verCoordenadaY
^y.! !
!PuntoDelPlano categoriesFor: #verCoordenadaY!public! !

!PuntoDelPlano methodsFor!
modificarY:unaCordY
! !
!PuntoDelPlano categoriesFor: #modificarY:!public! !

!PuntoDelPlano methodsFor!
modificarY:unaCordY
! !
!PuntoDelPlano categoriesFor: #modificarY:!public! !

!PuntoDelPlano methodsFor!
verCoordenadaY
^y.! !
!PuntoDelPlano categoriesFor: #verCoordenadaY!public! !

!PuntoDelPlano methodsFor!
verCoordenadaX
^x.! !
!PuntoDelPlano categoriesFor: #verCoordenadaX!public! !

!PuntoDelPlano methodsFor!
modificarY:unaCordY
! !
!PuntoDelPlano categoriesFor: #modificarY:!public! !

!PuntoDelPlano methodsFor!
modificarX:unaCordX
! !
!PuntoDelPlano categoriesFor: #modificarX:!public! !

!PuntoDelPlano methodsFor!
modificarX:unaCordX
x:=unaCordX.
! !
!PuntoDelPlano categoriesFor: #modificarX:!public! !

!PuntoDelPlano methodsFor!
modificarY:unaCordY
y:=unaCordY.
! !
!PuntoDelPlano categoriesFor: #modificarY:!public! !

!PuntoDelPlano class methodsFor!
crearConX:abscisa conY:ordenada
"^(self new)iniPunto:"! !
!PuntoDelPlano class categoriesFor: #crearConX:conY:!public! !

!PuntoDelPlano methodsFor!
iniPunto:modificarX iniY:modificarY
! !
!PuntoDelPlano categoriesFor: #iniPunto:iniY:!public! !

!PuntoDelPlano methodsFor!
iniPunto:modificarX iniY:modificarY
! !
!PuntoDelPlano categoriesFor: #iniPunto:iniY:!public! !

!PuntoDelPlano class methodsFor!
crearConX:abscisa conY:ordenada
^(self new)iniPunto:abscisa y: ordenada.! !
!PuntoDelPlano class categoriesFor: #crearConX:conY:!public! !

!PuntoDelPlano class methodsFor!
crearConX:abscisa conY:ordenada
^(self new)iniPunto:abscisa ordenadaY: ordenada.! !
!PuntoDelPlano class categoriesFor: #crearConX:conY:!public! !

!PuntoDelPlano class methodsFor!
crearConX:abscisa conY:ordenada
"^(self new)iniPunto:abscisa ordenadaY:ordenada."! !
!PuntoDelPlano class categoriesFor: #crearConX:conY:!public! !

!PuntoDelPlano class methodsFor!
crearConX:abscisa conY:ordenada
"^(self new)iniPunto:abscisa ordenadaY:ordenada."! !
!PuntoDelPlano class categoriesFor: #crearConX:conY:!public! !

!PuntoDelPlano methodsFor!
iniPunto:unX iniY:unY
! !
!PuntoDelPlano categoriesFor: #iniPunto:iniY:!public! !

!PuntoDelPlano methodsFor!
iniPunto:unX iniY:unY
x:=unX.
y:=unY.
! !
!PuntoDelPlano categoriesFor: #iniPunto:iniY:!public! !

!PuntoDelPlano methodsFor!
iniPunto:unX iniY:unY
x:=unX.
y:=unY.
! !
!PuntoDelPlano categoriesFor: #iniPunto:iniY:!public! !

!PuntoDelPlano methodsFor!
iniPunto:unX iniY:unY
x:=unX.
y:=unY.
! !
!PuntoDelPlano categoriesFor: #iniPunto:iniY:!public! !

!PuntoDelPlano methodsFor!
iniPunto:unX iniY:unY
x:=unX.
y:=unY.
! !
!PuntoDelPlano categoriesFor: #iniPunto:iniY:!public! !

!PuntoDelPlano methodsFor!
iniPunto:unX iniY:unY
x:=unX.
y:=unY.
! !
!PuntoDelPlano categoriesFor: #iniPunto:iniY:!public! !

!PuntoDelPlano methodsFor!
iniPunto:unX iniY:unY
x:=unX.
y:=unY.
! !
!PuntoDelPlano categoriesFor: #iniPunto:iniY:!public! !

!PuntoDelPlano methodsFor!
iniPunto:unX iniY:unY
x:=unX.
y:=unY.
! !
!PuntoDelPlano categoriesFor: #iniPunto:iniY:!public! !

!PuntoDelPlano methodsFor!
iniPunto:unX iniY:unY
x:=unX.
y:=unY.
! !
!PuntoDelPlano categoriesFor: #iniPunto:iniY:!public! !

!PuntoDelPlano methodsFor!
iniPunto:unX iniY:unY
x:=unX.
y:=unY.
! !
!PuntoDelPlano categoriesFor: #iniPunto:iniY:!public! !

!PuntoDelPlano methodsFor!
iniPunto:unX iniY:unY
x:=unX.
y:=unY.
! !
!PuntoDelPlano categoriesFor: #iniPunto:iniY:!public! !

!PuntoDelPlano class methodsFor!
crearConX:abscisa conY:ordenada
^(self new)iniPunto:abscisa ordenadaY:ordenada.! !
!PuntoDelPlano class categoriesFor: #crearConX:conY:!public! !

!PuntoDelPlano class methodsFor!
crearConX:abscisa conY:ordenada
^(self new)iniPunto:abscisa ordenada:ordenada.! !
!PuntoDelPlano class categoriesFor: #crearConX:conY:!public! !

!PuntoDelPlano class methodsFor!
crearConX:abscisa conY:ordenada
"^(self new)iniPunto:abscisa ordenada:ordenada."! !
!PuntoDelPlano class categoriesFor: #crearConX:conY:!public! !

!PuntoDelPlano methodsFor!
iniPunto:unX iniY:unY
x:=unX.
y:=unY.
! !
!PuntoDelPlano categoriesFor: #iniPunto:iniY:!public! !

!PuntoDelPlano class methodsFor!
crearConX:abscisa conY:ordenada
^(self new)iniPunto:abscisa ordenada:ordenada.! !
!PuntoDelPlano class categoriesFor: #crearConX:conY:!public! !

!PuntoDelPlano class methodsFor!
crearConX:abscisa conY:ordenada
^(self new)iniPunto:abscisa conY:ordenada.! !
!PuntoDelPlano class categoriesFor: #crearConX:conY:!public! !

!PuntoDelPlano class methodsFor!
crearConX:abscisa conY:ordenada
^(self new)iniPunto:abscisa conY:ordenada.! !
!PuntoDelPlano class categoriesFor: #crearConX:conY:!public! !

!PuntoDelPlano class methodsFor!
crearConX:abscisa conY:ordenada
"^(self new)iniPunto:abscisa conY:ordenada."! !
!PuntoDelPlano class categoriesFor: #crearConX:conY:!public! !

!PuntoDelPlano class methodsFor!
crearConX:abscisa conY:ordenada
^(self new)iniPunto:abscisa conY:ordenada.! !
!PuntoDelPlano class categoriesFor: #crearConX:conY:!public! !

!PuntoDelPlano class methodsFor!
crearConX:abscisa conY:ordenada
^(self new)iniPunto:abscisa conY:ordenada.! !
!PuntoDelPlano class categoriesFor: #crearConX:conY:!public! !

!PuntoDelPlano class methodsFor!
crearConX:abscisa conY:ordenada
^(self new)iniPunto:abscisa conY:ordenada.! !
!PuntoDelPlano class categoriesFor: #crearConX:conY:!public! !

!PuntoDelPlano class methodsFor!
crearConX:abscisa conY:ordenada
^(self new)iniPunto:abscisa conY:ordenada.! !
!PuntoDelPlano class categoriesFor: #crearConX:conY:!public! !

!PuntoDelPlano class methodsFor!
crearConX:abscisa conY:ordenada
^(self new)iniPunto:abscisa conY:ordenada.! !
!PuntoDelPlano class categoriesFor: #crearConX:conY:!public! !

!PuntoDelPlano class methodsFor!
crearConX:abscisa conY:ordenada
^(self new)iniPunto:abscisa conY:ordenada.! !
!PuntoDelPlano class categoriesFor: #crearConX:conY:!public! !

!PuntoDelPlano class methodsFor!
crearConX:abscisa conY:ordenada
^(self new)iniPunto:abscisa conY:ordenada.! !
!PuntoDelPlano class categoriesFor: #crearConX:conY:!public! !

!PuntoDelPlano class methodsFor!
crearConX:abscisa conY:ordenada
^(self new)iniPunto:abscisa conY:ordenada.! !
!PuntoDelPlano class categoriesFor: #crearConX:conY:!public! !

!PuntoDelPlano class methodsFor!
crearConX:abscisa conY:ordenada
^(self new)iniPunto:abscisa conY:ordenada.! !
!PuntoDelPlano class categoriesFor: #crearConX:conY:!public! !

!PuntoDelPlano class methodsFor!
crearConX:abscisa conY:ordenada
^(self new)iniPunto:abscisa conY:ordenada.! !
!PuntoDelPlano class categoriesFor: #crearConX:conY:!public! !

!PuntoDelPlano class methodsFor!
crearConX:abscisa conY:ordenada
^(self new) iniPunto:abscisa conY:ordenada.! !
!PuntoDelPlano class categoriesFor: #crearConX:conY:!public! !

!PuntoDelPlano class methodsFor!
crearConX:abscisa conY:ordenada
^(self new) iniPunto:abscisa conY:ordenada.! !
!PuntoDelPlano class categoriesFor: #crearConX:conY:!public! !

!PuntoDelPlano class methodsFor!
crearConX:abscisa conY:ordenada
^(self new) iniPunto:abscisa conY:ordenada.! !
!PuntoDelPlano class categoriesFor: #crearConX:conY:!public! !

!PuntoDelPlano class methodsFor!
crearConX:abscisa conY:ordenada
^(self new) iniPunto:abscisa conY:ordenada.! !
!PuntoDelPlano class categoriesFor: #crearConX:conY:!public! !

!PuntoDelPlano class methodsFor!
crearConX:abscisa conY:ordenada
^(self new) iniPunto:abscisa conY:ordenada.! !
!PuntoDelPlano class categoriesFor: #crearConX:conY:!public! !

!PuntoDelPlano class methodsFor!
crearConX:abscisa conY:ordenada
^(self new) iniPunto:abscisa conY:ordenada.! !
!PuntoDelPlano class categoriesFor: #crearConX:conY:!public! !

!PuntoDelPlano class methodsFor!
crearConX:abscisa conY:ordenada
^(self new) iniPunto:abscisa conY:ordenada.! !
!PuntoDelPlano class categoriesFor: #crearConX:conY:!public! !

!PuntoDelPlano methodsFor!
iniPunto:unX iniY:unY
x:=unX.
y:=unY.
! !
!PuntoDelPlano categoriesFor: #iniPunto:iniY:!public! !

!PuntoDelPlano methodsFor!
iniPunto:unX iniY:unY
x:=unX.
y:=unY.
! !
!PuntoDelPlano categoriesFor: #iniPunto:iniY:!public! !

!PuntoDelPlano class methodsFor!
crearConX:abscisa conY:ordenada
^(self new) iniPunto:abscisa conY:ordenada.! !
!PuntoDelPlano class categoriesFor: #crearConX:conY:!public! !

!PuntoDelPlano class methodsFor!
crearConX:abscisa conY:ordenada
^(self new) iniPunto:abscisa conY:ordenada.! !
!PuntoDelPlano class categoriesFor: #crearConX:conY:!public! !

!PuntoDelPlano class methodsFor!
crearConX:abscisa conY:ordenada
^(self new) iniPunto:abscisa conY:ordenada.! !
!PuntoDelPlano class categoriesFor: #crearConX:conY:!public! !

!PuntoDelPlano methodsFor!
iniPunto:unX conY:unY
x:=unX.
y:=unY.
! !
!PuntoDelPlano categoriesFor: #iniPunto:conY:!public! !

!PuntoDelPlano methodsFor!
iniPunto:unX conY:unY
x:=unX.
y:=unY.
! !
!PuntoDelPlano categoriesFor: #iniPunto:conY:!public! !

!PuntoDelPlano class methodsFor!
crearConX:abscisa conY:ordenada
^(self new) iniPunto:abscisa conY:ordenada.! !
!PuntoDelPlano class categoriesFor: #crearConX:conY:!public! !

PuntoDelPlano removeSelector: #iniPunto:iniY: ifAbsent: []!


|p1 p2 x y|
x:=Prompter prompt: 'Ingrese la posicion en X'.
y:=Prompter prompt: 'Ingrese la posicion en Y'.
p1:=PuntoDelPlano crearConX: x conY: y.
x:=Prompter prompt: 'Ingrese la posicion en X'.
y:=Prompter prompt: 'Ingrese la posicion en Y'.
p2:=PuntoDelPlano crearConX: x conY: y.
p1 inspect.
p2 inspect.
!


|p1 p2 x y r sx sy|
x:=Prompter prompt: 'Ingrese la posicion en X'.
y:=Prompter prompt: 'Ingrese la posicion en Y'.
p1:=PuntoDelPlano crearConX: x conY: y.
x:=Prompter prompt: 'Ingrese la posicion en X'.
y:=Prompter prompt: 'Ingrese la posicion en Y'.
p2:=PuntoDelPlano crearConX: x conY: y.
p1 inspect.
p2 inspect.

"****************************************************
Fórmula de distancia entre dos puntos en el plano cartesiano.
La distancia entre dos puntos P1 y P2 del plano se denota por d(P1,P2).
La fórmula de la distancia usa las coordenadas de los puntos.
Está fórmula puede ser deducida a partir del Teorema de Pitágoras.
****************************************************"
sx:=p1 verCoordenadaX+p2 verCoordenadaX.
sy:=p1 verCoordenadaY+p2 verCoordenadaY.
sx:=sx exp:2.
sx inspect.
sy:=sy exp:2.
sy inspect .
r:=(sx+sy)sqrt.
r inspect.!

|p1 p2 x y r sx sy|
x:=Prompter prompt: 'Ingrese la posicion en X'.
y:=Prompter prompt: 'Ingrese la posicion en Y'.
p1:=PuntoDelPlano crearConX: x conY: y.
x:=Prompter prompt: 'Ingrese la posicion en X'.
y:=Prompter prompt: 'Ingrese la posicion en Y'.
p2:=PuntoDelPlano crearConX: x conY: y.
p1 inspect.
p2 inspect.

"****************************************************
Fórmula de distancia entre dos puntos en el plano cartesiano.
La distancia entre dos puntos P1 y P2 del plano se denota por d(P1,P2).
La fórmula de la distancia usa las coordenadas de los puntos.
Está fórmula puede ser deducida a partir del Teorema de Pitágoras.
****************************************************"
sx:=p1 verCoordenadaX-p2 verCoordenadaX.
sy:=p1 verCoordenadaY-p2 verCoordenadaY.
sx:=sx exp:2.
sx inspect.
sy:=sy exp:2.
sy inspect .
r:=(sx+sy)sqrt.
r inspect.!

"13:33:18, 19 May 2020: Image saved"!

|p1 p2 x y r sx sy|
x:=Prompter prompt: 'Ingrese la posicion en X'.
y:=Prompter prompt: 'Ingrese la posicion en Y'.
p1:=PuntoDelPlano crearConX: x conY: y.
x:=Prompter prompt: 'Ingrese la posicion en X'.
y:=Prompter prompt: 'Ingrese la posicion en Y'.
p2:=PuntoDelPlano crearConX: x conY: y.
p1 inspect.
p2 inspect.

"****************************************************
Fórmula de distancia entre dos puntos en el plano cartesiano.
La distancia entre dos puntos P1 y P2 del plano se denota por d(P1,P2).
La fórmula de la distancia usa las coordenadas de los puntos.
Está fórmula puede ser deducida a partir del Teorema de Pitágoras.
****************************************************"
sx:=(p1 verCoordenadaX)-(p2 verCoordenadaX).
sy:=(p1 verCoordenadaY)-(p2 verCoordenadaY).
sx:=sx exp:2.
sx inspect.
sy:=sy exp:2.
sy inspect .
r:=(sx+sy)sqrt.
r inspect.!

|p1 p2 x y r sx sy|
x:=Prompter prompt: 'Ingrese la posicion en X'.
y:=Prompter prompt: 'Ingrese la posicion en Y'.
p1:=PuntoDelPlano crearConX: x conY: y.
x:=Prompter prompt: 'Ingrese la posicion en X'.
y:=Prompter prompt: 'Ingrese la posicion en Y'.
p2:=PuntoDelPlano crearConX: x conY: y.
p1 inspect.
p2 inspect.

"****************************************************
Fórmula de distancia entre dos puntos en el plano cartesiano.
La distancia entre dos puntos P1 y P2 del plano se denota por d(P1,P2).
La fórmula de la distancia usa las coordenadas de los puntos.
Está fórmula puede ser deducida a partir del Teorema de Pitágoras.
****************************************************"
x:=p1 verCoordenadaX.
y:=p2 verCoordenadaX.
sx:=x-y.
x:=p1 verCoordenadaY.
y:=p2 verCoordenadaY.
sy:=x-y.
sx:=sx exp:2.
sx inspect.
sy:=sy exp:2.
sy inspect .
r:=(sx+sy)sqrt.
r inspect.!


|p1 p2 x y r sx sy|
x:=Prompter prompt: 'Ingrese la posicion en X'.
y:=Prompter prompt: 'Ingrese la posicion en Y'.
p1:=PuntoDelPlano crearConX: x conY: y.
x:=Prompter prompt: 'Ingrese la posicion en X'.
y:=Prompter prompt: 'Ingrese la posicion en Y'.
p2:=PuntoDelPlano crearConX: x conY: y.
p1 inspect.
p2 inspect.

"****************************************************
Fórmula de distancia entre dos puntos en el plano cartesiano.
La distancia entre dos puntos P1 y P2 del plano se denota por d(P1,P2).
La fórmula de la distancia usa las coordenadas de los puntos.
Está fórmula puede ser deducida a partir del Teorema de Pitágoras.
****************************************************"
x:=p1 verCoordenadaX.
y:=p2 verCoordenadaX.
sx:=x-y.
x:=p1 verCoordenadaY.
y:=p2 verCoordenadaY.
sy:=x-y.
sx:=sx exp:2.
sx inspect.
sy:=sy exp:2.
sy inspect .
r:=(sx+sy)sqrt.
r inspect.!


|p1 p2 x y r sx sy x1 y1|
x:=Prompter prompt: 'Ingrese la posicion en X'.
y:=Prompter prompt: 'Ingrese la posicion en Y'.
p1:=PuntoDelPlano crearConX: x conY: y.
x:=Prompter prompt: 'Ingrese la posicion en X'.
y:=Prompter prompt: 'Ingrese la posicion en Y'.
p2:=PuntoDelPlano crearConX: x conY: y.
p1 inspect.
p2 inspect.

"****************************************************
Fórmula de distancia entre dos puntos en el plano cartesiano.
La distancia entre dos puntos P1 y P2 del plano se denota por d(P1,P2).
La fórmula de la distancia usa las coordenadas de los puntos.
Está fórmula puede ser deducida a partir del Teorema de Pitágoras.
****************************************************"
x1:=p1 verCoordenadaX.
y1:=p2 verCoordenadaX.
sx:=x1-y1.
x1:=p1 verCoordenadaY.
y1:=p2 verCoordenadaY.
sy:=x1-y1.
sx:=sx exp:2.
sx inspect.
sy:=sy exp:2.
sy inspect .
r:=(sx+sy)sqrt.
r inspect.
!

|p1 p2 x y r sx sy x1 y1|
x:=Prompter prompt: 'Ingrese la posicion en X'.
y:=Prompter prompt: 'Ingrese la posicion en Y'.
p1:=PuntoDelPlano crearConX: x conY: y.
x:=Prompter prompt: 'Ingrese la posicion en X'.
y:=Prompter prompt: 'Ingrese la posicion en Y'.
p2:=PuntoDelPlano crearConX: x conY: y.
p1 inspect.
p2 inspect.

"****************************************************
Fórmula de distancia entre dos puntos en el plano cartesiano.
La distancia entre dos puntos P1 y P2 del plano se denota por d(P1,P2).
La fórmula de la distancia usa las coordenadas de los puntos.
Está fórmula puede ser deducida a partir del Teorema de Pitágoras.
****************************************************"
x1:=p1 verCoordenadaX.
y1:=p2 verCoordenadaX.
sx:=x1-y1.
sx inspect.
x1:=p1 verCoordenadaY.
y1:=p2 verCoordenadaY.
sy:=x1-y1.
sx inspect.
sx:=sx exp:2.
sx inspect.
sy:=sy exp:2.
sy inspect .
r:=(sx+sy)sqrt.
r inspect.!

|p1 p2 x y r sx sy x1 y1|
x:=Prompter prompt: 'Ingrese la posicion en X'.
y:=Prompter prompt: 'Ingrese la posicion en Y'.
p1:=PuntoDelPlano crearConX: x conY: y.
x:=Prompter prompt: 'Ingrese la posicion en X'.
y:=Prompter prompt: 'Ingrese la posicion en Y'.
p2:=PuntoDelPlano crearConX: x conY: y.
p1 inspect.
p2 inspect.

"****************************************************
Fórmula de distancia entre dos puntos en el plano cartesiano.
La distancia entre dos puntos P1 y P2 del plano se denota por d(P1,P2).
La fórmula de la distancia usa las coordenadas de los puntos.
Está fórmula puede ser deducida a partir del Teorema de Pitágoras.
****************************************************"
x1:=p1 verCoordenadaX.
y1:=p2 verCoordenadaX.
x1 inspect.
sx:=x1-y1.
sx inspect.
x1:=p1 verCoordenadaY.
y1:=p2 verCoordenadaY.
sy:=x1-y1.
sx inspect.
sx:=sx exp:2.
sx inspect.
sy:=sy exp:2.
sy inspect .
r:=(sx+sy)sqrt.
r inspect.!

|p1 p2 x y r sx sy x1 y1|
x:=Prompter prompt: 'Ingrese la posicion en X'.
y:=Prompter prompt: 'Ingrese la posicion en Y'.
p1:=PuntoDelPlano crearConX: x conY: y.
x:=Prompter prompt: 'Ingrese la posicion en X'.
y:=Prompter prompt: 'Ingrese la posicion en Y'.
p2:=PuntoDelPlano crearConX: x conY: y.
p1 inspect.
p2 inspect.

"****************************************************
Fórmula de distancia entre dos puntos en el plano cartesiano.
La distancia entre dos puntos P1 y P2 del plano se denota por d(P1,P2).
La fórmula de la distancia usa las coordenadas de los puntos.
Está fórmula puede ser deducida a partir del Teorema de Pitágoras.
****************************************************"
x1:=p1 verCoordenadaX.
y1:=p2 verCoordenadaX.
x1 inspect.
sx:=x1-y1.
sx inspect.
x1:=p1 verCoordenadaY.
y1:=p2 verCoordenadaY.
sy:=x1-y1.
sx inspect.
sx:=sx exp:2.
sx inspect.
sy:=sy exp:2.
sy inspect .
r:=(sx+sy)sqrt.
r inspect.!

|p1 p2 x y r sx sy x1 y1|
x:=Prompter prompt: 'Ingrese la posicion en X'.
y:=Prompter prompt: 'Ingrese la posicion en Y'.
p1:=PuntoDelPlano crearConX: x conY: y.
x:=Prompter prompt: 'Ingrese la posicion en X'.
y:=Prompter prompt: 'Ingrese la posicion en Y'.
p2:=PuntoDelPlano crearConX: x conY: y.
p1 inspect.
p2 inspect.

"****************************************************
Fórmula de distancia entre dos puntos en el plano cartesiano.
La distancia entre dos puntos P1 y P2 del plano se denota por d(P1,P2).
La fórmula de la distancia usa las coordenadas de los puntos.
Está fórmula puede ser deducida a partir del Teorema de Pitágoras.
****************************************************"
x1:=p1 verCoordenadaX.
y1:=p2 verCoordenadaX.
x1 inspect.
sx:=(x1-y1).
sx inspect.
x1:=p1 verCoordenadaY.
y1:=p2 verCoordenadaY.
sy:=x1-y1.
sx inspect.
sx:=sx exp:2.
sx inspect.
sy:=sy exp:2.
sy inspect .
r:=(sx+sy)sqrt.
r inspect.!

|p1 p2 x y r sx sy x1 y1|
x:=Prompter prompt: 'Ingrese la posicion en X' asInteger.
y:=Prompter prompt: 'Ingrese la posicion en Y' asInteger.
p1:=PuntoDelPlano crearConX: x conY: y.
x:=Prompter prompt: 'Ingrese la posicion en X' asInteger.
y:=Prompter prompt: 'Ingrese la posicion en Y' asInteger.
p2:=PuntoDelPlano crearConX: x conY: y.
p1 inspect.
p2 inspect.

"****************************************************
Fórmula de distancia entre dos puntos en el plano cartesiano.
La distancia entre dos puntos P1 y P2 del plano se denota por d(P1,P2).
La fórmula de la distancia usa las coordenadas de los puntos.
Está fórmula puede ser deducida a partir del Teorema de Pitágoras.
****************************************************"
x1:=p1 verCoordenadaX.
y1:=p2 verCoordenadaX.
x1 inspect.
sx:=(x1-y1).
sx inspect.
x1:=p1 verCoordenadaY.
y1:=p2 verCoordenadaY.
sy:=x1-y1.
sx inspect.
sx:=sx exp:2.
sx inspect.
sy:=sy exp:2.
sy inspect .
r:=(sx+sy)sqrt.
r inspect.
!

|p1 p2 x y r sx sy x1 y1|
x:=Prompter prompt: 'Ingrese la posicion en X' asInteger.
y:=Prompter prompt: 'Ingrese la posicion en Y' asInteger.
p1:=PuntoDelPlano crearConX: x conY: y.
x:=Prompter prompt: 'Ingrese la posicion en X' asInteger.
y:=Prompter prompt: 'Ingrese la posicion en Y' asInteger.
p2:=PuntoDelPlano crearConX: x conY: y.
p1 inspect.
p2 inspect.

"****************************************************
Fórmula de distancia entre dos puntos en el plano cartesiano.
La distancia entre dos puntos P1 y P2 del plano se denota por d(P1,P2).
La fórmula de la distancia usa las coordenadas de los puntos.
Está fórmula puede ser deducida a partir del Teorema de Pitágoras.
****************************************************"
x1:=p1 verCoordenadaX.
y1:=p2 verCoordenadaX.
x1 inspect.
sx:=(x1-y1).
sx inspect.
x1:=p1 verCoordenadaY.
y1:=p2 verCoordenadaY.
sy:=x1-y1.
sx inspect.
sx:=sx exp:2.
sx inspect.
sy:=sy exp:2.
sy inspect .
r:=(sx+sy)sqrt.
r inspect.
!

|p1 p2 x y r sx sy x1 y1|
x:=(Prompter prompt: 'Ingrese la posicion en X') asInteger.
y:=(Prompter prompt: 'Ingrese la posicion en Y') asInteger.
p1:=PuntoDelPlano crearConX: x conY: y.
x:=(Prompter prompt: 'Ingrese la posicion en X') asInteger.
y:=(Prompter prompt: 'Ingrese la posicion en Y') asInteger.
p2:=PuntoDelPlano crearConX: x conY: y.
p1 inspect.
p2 inspect.

"****************************************************
Fórmula de distancia entre dos puntos en el plano cartesiano.
La distancia entre dos puntos P1 y P2 del plano se denota por d(P1,P2).
La fórmula de la distancia usa las coordenadas de los puntos.
Está fórmula puede ser deducida a partir del Teorema de Pitágoras.
****************************************************"
x1:=p1 verCoordenadaX.
y1:=p2 verCoordenadaX.
x1 inspect.
sx:=(x1-y1).
sx inspect.
x1:=p1 verCoordenadaY.
y1:=p2 verCoordenadaY.
sy:=x1-y1.
sx inspect.
sx:=sx exp:2.
sx inspect.
sy:=sy exp:2.
sy inspect .
r:=(sx+sy)sqrt.
r inspect.!

|p1 p2 x y r sx sy x1 y1|
x:=(Prompter prompt: 'Ingrese la posicion en X') asInteger.
y:=(Prompter prompt: 'Ingrese la posicion en Y') asInteger.
p1:=PuntoDelPlano crearConX: x conY: y.
x:=(Prompter prompt: 'Ingrese la posicion en X') asInteger.
y:=(Prompter prompt: 'Ingrese la posicion en Y') asInteger.
p2:=PuntoDelPlano crearConX: x conY: y.
p1 inspect.
p2 inspect.

"****************************************************
Fórmula de distancia entre dos puntos en el plano cartesiano.
La distancia entre dos puntos P1 y P2 del plano se denota por d(P1,P2).
La fórmula de la distancia usa las coordenadas de los puntos.
Está fórmula puede ser deducida a partir del Teorema de Pitágoras.
****************************************************"
x1:=p1 verCoordenadaX.
y1:=p2 verCoordenadaX.
x1 inspect.
sx:=(x1-y1).
sx inspect.
x1:=p1 verCoordenadaY.
y1:=p2 verCoordenadaY.
sy:=x1-y1.
sx inspect.
sx:=sx exp:2.
sx inspect.
sy:=sy exp:2.
sy inspect .
r:=(sx+sy)sqrt.
r inspect.
!

|p1 p2 x y r sx sy x1 y1|
x:=(Prompter prompt: 'Ingrese la posicion en X') asNumber.
y:=(Prompter prompt: 'Ingrese la posicion en Y') asInteger.
p1:=PuntoDelPlano crearConX: x conY: y.
x:=(Prompter prompt: 'Ingrese la posicion en X') asInteger.
y:=(Prompter prompt: 'Ingrese la posicion en Y') asInteger.
p2:=PuntoDelPlano crearConX: x conY: y.
p1 inspect.
p2 inspect.

"****************************************************
Fórmula de distancia entre dos puntos en el plano cartesiano.
La distancia entre dos puntos P1 y P2 del plano se denota por d(P1,P2).
La fórmula de la distancia usa las coordenadas de los puntos.
Está fórmula puede ser deducida a partir del Teorema de Pitágoras.
****************************************************"
x1:=p1 verCoordenadaX.
y1:=p2 verCoordenadaX.
x1 inspect.
sx:=(x1-y1).
sx inspect.
x1:=p1 verCoordenadaY.
y1:=p2 verCoordenadaY.
sy:=x1-y1.
sx inspect.
sx:=sx exp:2.
sx inspect.
sy:=sy exp:2.
sy inspect .
r:=(sx+sy)sqrt.
r inspect.
!

|p1 p2 x y r sx sy x1 y1|
x:=(Prompter prompt: 'Ingrese la posicion en X') asNumber.
y:=(Prompter prompt: 'Ingrese la posicion en Y') asNumber .
p1:=PuntoDelPlano crearConX: x conY: y.
x:=(Prompter prompt: 'Ingrese la posicion en X') asNumber.
y:=(Prompter prompt: 'Ingrese la posicion en Y') asNumber.
p2:=PuntoDelPlano crearConX: x conY: y.
p1 inspect.
p2 inspect.

"****************************************************
Fórmula de distancia entre dos puntos en el plano cartesiano.
La distancia entre dos puntos P1 y P2 del plano se denota por d(P1,P2).
La fórmula de la distancia usa las coordenadas de los puntos.
Está fórmula puede ser deducida a partir del Teorema de Pitágoras.
****************************************************"
x1:=p1 verCoordenadaX.
y1:=p2 verCoordenadaX.
x1 inspect.
sx:=(x1-y1).
sx inspect.
x1:=p1 verCoordenadaY.
y1:=p2 verCoordenadaY.
sy:=x1-y1.
sx inspect.
sx:=sx exp:2.
sx inspect.
sy:=sy exp:2.
sy inspect .
r:=(sx+sy)sqrt.
r inspect.!

|p1 p2 x y r sx sy x1 y1|
x:=(Prompter prompt: 'Ingrese la posicion en X') asNumber.
y:=(Prompter prompt: 'Ingrese la posicion en Y') asNumber .
p1:=PuntoDelPlano crearConX: x conY: y.
x:=(Prompter prompt: 'Ingrese la posicion en X') asNumber.
y:=(Prompter prompt: 'Ingrese la posicion en Y') asNumber.
p2:=PuntoDelPlano crearConX: x conY: y.
p1 inspect.
p2 inspect.

"****************************************************
Fórmula de distancia entre dos puntos en el plano cartesiano.
La distancia entre dos puntos P1 y P2 del plano se denota por d(P1,P2).
La fórmula de la distancia usa las coordenadas de los puntos.
Está fórmula puede ser deducida a partir del Teorema de Pitágoras.
****************************************************"
x1:=p1 verCoordenadaX.
y1:=p2 verCoordenadaX.
x1 inspect.
sx:=(x1-y1).
sx inspect.
x1:=p1 verCoordenadaY.
y1:=p2 verCoordenadaY.
sy:=x1-y1.
sx inspect.
sx:=sx*sx.
sx inspect.
sy:=sy*self.
sy inspect .
r:=(sx+sy)sqrt.
r inspect.!


|p1 p2 x y r sx sy x1 y1|
x:=(Prompter prompt: 'Ingrese la posicion en X') asNumber.
y:=(Prompter prompt: 'Ingrese la posicion en Y') asNumber .
p1:=PuntoDelPlano crearConX: x conY: y.
x:=(Prompter prompt: 'Ingrese la posicion en X') asNumber.
y:=(Prompter prompt: 'Ingrese la posicion en Y') asNumber.
p2:=PuntoDelPlano crearConX: x conY: y.
p1 inspect.
p2 inspect.

"****************************************************
Fórmula de distancia entre dos puntos en el plano cartesiano.
La distancia entre dos puntos P1 y P2 del plano se denota por d(P1,P2).
La fórmula de la distancia usa las coordenadas de los puntos.
Está fórmula puede ser deducida a partir del Teorema de Pitágoras.
****************************************************"
x1:=p1 verCoordenadaX.
y1:=p2 verCoordenadaX.
x1 inspect.
sx:=(x1-y1).
sx inspect.
x1:=p1 verCoordenadaY.
y1:=p2 verCoordenadaY.
sy:=x1-y1.
sx inspect.
sx:=sx*sx.
sx inspect.
sy:=sy*sy.
sy inspect .
r:=(sx+sy)sqrt.
r inspect.!

|p1 p2 x y r sx sy x1 y1|
x:=(Prompter prompt: 'Ingrese la posicion en X') asNumber.
y:=(Prompter prompt: 'Ingrese la posicion en Y') asNumber .
p1:=PuntoDelPlano crearConX: x conY: y.
x:=(Prompter prompt: 'Ingrese la posicion en X') asNumber.
y:=(Prompter prompt: 'Ingrese la posicion en Y') asNumber.
p2:=PuntoDelPlano crearConX: x conY: y.
p1 inspect.
p2 inspect.

"****************************************************
Fórmula de distancia entre dos puntos en el plano cartesiano.
La distancia entre dos puntos P1 y P2 del plano se denota por d(P1,P2).
La fórmula de la distancia usa las coordenadas de los puntos.
Está fórmula puede ser deducida a partir del Teorema de Pitágoras.
****************************************************"
x1:=p1 verCoordenadaX.
y1:=p2 verCoordenadaX.
x1 inspect.
"sx:=(x1-y1)."
sx:=(p1 verCoordenadaX)-(p2 verCoordenadaX).
sx inspect.
x1:=p1 verCoordenadaY.
y1:=p2 verCoordenadaY.
sy:=x1-y1.
sx inspect.
sx:=sx*sx.
sx inspect.
sy:=sy*sy.
sy inspect .
r:=(sx+sy)sqrt.
r inspect.!

"14:14:22, 19 May 2020: Image saved"!

"14:14:23, 19 May 2020: Image saved"!

"14:14:24, 19 May 2020: Image saved"!

"14:14:25, 19 May 2020: Image saved"!

"14:14:25, 19 May 2020: Image saved"!


|p1 p2 x y r sx sy x1 y1|
x:=(Prompter prompt: 'Ingrese la posicion en X') asNumber.
y:=(Prompter prompt: 'Ingrese la posicion en Y') asNumber .
p1:=PuntoDelPlano crearConX: x conY: y.
x:=(Prompter prompt: 'Ingrese la posicion en X') asNumber.
y:=(Prompter prompt: 'Ingrese la posicion en Y') asNumber.
p2:=PuntoDelPlano crearConX: x conY: y.
p1 inspect.
p2 inspect.

"****************************************************
Fórmula de distancia entre dos puntos en el plano cartesiano.
La distancia entre dos puntos P1 y P2 del plano se denota por d(P1,P2).
La fórmula de la distancia usa las coordenadas de los puntos.
Está fórmula puede ser deducida a partir del Teorema de Pitágoras.
****************************************************"

sx:=(p1 verCoordenadaX)-(p2 verCoordenadaX).
sx inspect.
sy:=(p1 verCoordenadaY)-(p2 verCoordenadaY).
sx inspect.
sx:=sx*sx.
sx inspect.
sy:=sy*sy.
sy inspect .
r:=(sx+sy)sqrt.
r inspect.!

|p1 p2 x y r sx sy|
x:=(Prompter prompt: 'Ingrese la posicion en X') asNumber.
y:=(Prompter prompt: 'Ingrese la posicion en Y') asNumber .
p1:=PuntoDelPlano crearConX: x conY: y.
x:=(Prompter prompt: 'Ingrese la posicion en X') asNumber.
y:=(Prompter prompt: 'Ingrese la posicion en Y') asNumber.
p2:=PuntoDelPlano crearConX: x conY: y.
p1 inspect.
p2 inspect.

"****************************************************
Fórmula de distancia entre dos puntos en el plano cartesiano.
La distancia entre dos puntos P1 y P2 del plano se denota por d(P1,P2).
La fórmula de la distancia usa las coordenadas de los puntos.
Está fórmula puede ser deducida a partir del Teorema de Pitágoras.
****************************************************"

sx:=(p1 verCoordenadaX)-(p2 verCoordenadaX).
sx inspect.
sy:=(p1 verCoordenadaY)-(p2 verCoordenadaY).
sx inspect.
sx:=sx*sx.
sx inspect.
sy:=sy*sy.
sy inspect .
r:=(sx+sy)sqrt.
r inspect.!


|p1 p2 x y r sx sy|
x:=(Prompter prompt: 'Ingrese la posicion en X') asNumber.
y:=(Prompter prompt: 'Ingrese la posicion en Y') asNumber .
p1:=PuntoDelPlano crearConX: x conY: y.
x:=(Prompter prompt: 'Ingrese la posicion en X') asNumber.
y:=(Prompter prompt: 'Ingrese la posicion en Y') asNumber.
p2:=PuntoDelPlano crearConX: x conY: y.
p1 inspect.
p2 inspect.

"****************************************************
Fórmula de distancia entre dos puntos en el plano cartesiano.
La distancia entre dos puntos P1 y P2 del plano se denota por d(P1,P2).
La fórmula de la distancia usa las coordenadas de los puntos.
Está fórmula puede ser deducida a partir del Teorema de Pitágoras.
****************************************************"

sx:=(p1 verCoordenadaX)-(p2 verCoordenadaX).
sx inspect.
sy:=(p1 verCoordenadaY)-(p2 verCoordenadaY).
sy inspect.
sx:=sx*sx.
sx inspect.
sy:=sy*sy.
sy inspect .
r:=(sx+sy)sqrt.
r inspect.
!

|p1 p2 x y r sx sy|
x:=(Prompter prompt: 'Ingrese la posicion en X') asNumber.
y:=(Prompter prompt: 'Ingrese la posicion en Y') asNumber .
p1:=PuntoDelPlano crearConX: x conY: y.
x:=(Prompter prompt: 'Ingrese la posicion en X') asNumber.
y:=(Prompter prompt: 'Ingrese la posicion en Y') asNumber.
p2:=PuntoDelPlano crearConX: x conY: y.
p1 inspect.
p2 inspect.

"****************************************************
Fórmula de distancia entre dos puntos en el plano cartesiano.
La distancia entre dos puntos P1 y P2 del plano se denota por d(P1,P2).
La fórmula de la distancia usa las coordenadas de los puntos.
Está fórmula puede ser deducida a partir del Teorema de Pitágoras.
****************************************************"

sx:=(p1 verCoordenadaX)-(p2 verCoordenadaX).
sx inspect.
sy:=(p1 verCoordenadaY)-(p2 verCoordenadaY).
sy inspect.
sx:=sx*sx.
sx inspect.
sy:=sy*sy.
sy inspect .
r:=(sx+sy)sqrt.
r inspect.

!

"16:36:46, 19 May 2020: Image saved"!

"16:43:40, 19 May 2020: Image saved"!

"16:43:51, 19 May 2020: Image saved"!

"16:43:54, 19 May 2020: Image saved"!

'casa' isNil inspect.!

'casa' isNil inspect.!

'casa' isNil inspect.!

"19:07:00, 19 May 2020: Image saved"!

|p1 p2 x y r sx sy|
x:=(Prompter prompt: 'Ingrese la posicion en X') asNumber.
y:=(Prompter prompt: 'Ingrese la posicion en Y') asNumber .
p1:=PuntoDelPlano crearConX: x conY: y.
x:=(Prompter prompt: 'Ingrese la posicion en X') asNumber.
y:=(Prompter prompt: 'Ingrese la posicion en Y') asNumber.
p2:=PuntoDelPlano crearConX: x conY: y.
p1 inspect.
p2 inspect.

"****************************************************
Fórmula de distancia entre dos puntos en el plano cartesiano.
La distancia entre dos puntos P1 y P2 del plano se denota por d(P1,P2).
La fórmula de la distancia usa las coordenadas de los puntos.
Está fórmula puede ser deducida a partir del Teorema de Pitágoras.
****************************************************"

sx:=(p1 verCoordenadaX)-(p2 verCoordenadaX).
sx inspect.
sy:=(p1 verCoordenadaY)-(p2 verCoordenadaY).
sy inspect.
sx:=sx*sx.
sx inspect.
sy:=sy*sy.
sy inspect .
r:=(sx+sy)sqrt.
r inspect.
!

"20:04:16, 19 May 2020: Image saved"!

"20:05:37, 19 May 2020: Image saved"!

"09:57:46, 26 May 2020: Dolphin Smalltalk Professional started"!

|p1 p2 x y r sx sy|
x:=(Prompter prompt: 'Ingrese la posicion en X') asNumber.
y:=(Prompter prompt: 'Ingrese la posicion en Y') asNumber .
p1:=PuntoDelPlano crearConX: x conY: y.
x:=(Prompter prompt: 'Ingrese la posicion en X') asNumber.
y:=(Prompter prompt: 'Ingrese la posicion en Y') asNumber.
p2:=PuntoDelPlano crearConX: x conY: y.
p1 inspect.
p2 inspect.

"****************************************************
Fórmula de distancia entre dos puntos en el plano cartesiano.
La distancia entre dos puntos P1 y P2 del plano se denota por d(P1,P2).
La fórmula de la distancia usa las coordenadas de los puntos.
Está fórmula puede ser deducida a partir del Teorema de Pitágoras.
****************************************************"

sx:=(p1 verCoordenadaX)-(p2 verCoordenadaX).
sx inspect.
sy:=(p1 verCoordenadaY)-(p2 verCoordenadaY).
sy inspect.
sx:=sx*sx.
sx inspect.
sy:=sy*sy.
sy inspect .
r:=(sx+sy)sqrt.
r inspect.!

"Especificacion de la clase PuntoDelPlano"

"	-Clase PuntoDelPlano
	-Subclase de: Object
	-Variables de instancia: x y

	--Métodos de clase:
	>>crearPunto:unaCordX cordY:unaCordY
	-Retorna un punto con coordenadas X Y-
	
	--Métodos de instancia:
	>>iniPunto:unaCordX cordY:unaCordY
	-Inicializa una instancia de Libro-
	
	>>verCoordenadaX
	-Retorna la coordenada en X del punto-
	>>verCoordenadaY
	-Retorna la coordenada en Y del punto-

	>>modificarX:unaCordX
	-modifica la coordenada en X del punto-
	>>modificarY:unaCordY
	-modifica la coordenada en Y del punto-

	>>modPosicion:unaCordX modificarY:unaCordY
	-modifica la posicion del punto-
"

"b)  Realizar una aplicación que calcule y retorne la distancia entre dos puntos.
Desarrolle las siguientes aplicaciones en un Workspace."

|p1 p2 x y r sx sy|
x:=(Prompter prompt: 'Ingrese la posicion en X') asNumber.
y:=(Prompter prompt: 'Ingrese la posicion en Y') asNumber .
p1:=PuntoDelPlano crearConX: x conY: y.
x:=(Prompter prompt: 'Ingrese la posicion en X') asNumber.
y:=(Prompter prompt: 'Ingrese la posicion en Y') asNumber.
p2:=PuntoDelPlano crearConX: x conY: y.
p1 inspect.
p2 inspect.

"****************************************************
Fórmula de distancia entre dos puntos en el plano cartesiano.
La distancia entre dos puntos P1 y P2 del plano se denota por d(P1,P2).
La fórmula de la distancia usa las coordenadas de los puntos.
Está fórmula puede ser deducida a partir del Teorema de Pitágoras.
****************************************************"

sx:=(p1 verCoordenadaX)-(p2 verCoordenadaX).
sx inspect.
sy:=(p1 verCoordenadaY)-(p2 verCoordenadaY).
sy inspect.
sx:=sx*sx.
sx inspect.
sy:=sy*sy.
sy inspect .
r:=(sx+sy)sqrt.
r inspect.

!

"Especificacion de la clase PuntoDelPlano"

"	-Clase PuntoDelPlano
	-Subclase de: Object
	-Variables de instancia: x y

	--Métodos de clase:
	>>crearPunto:unaCordX cordY:unaCordY
	-Retorna un punto con coordenadas X Y-
	
	--Métodos de instancia:
	>>iniPunto:unaCordX cordY:unaCordY
	-Inicializa una instancia de Libro-
	
	>>verCoordenadaX
	-Retorna la coordenada en X del punto-
	>>verCoordenadaY
	-Retorna la coordenada en Y del punto-

	>>modificarX:unaCordX
	-modifica la coordenada en X del punto-
	>>modificarY:unaCordY
	-modifica la coordenada en Y del punto-

	>>modPosicion:unaCordX modificarY:unaCordY
	-modifica la posicion del punto-
"

"b)  Realizar una aplicación que calcule y retorne la distancia entre dos puntos.
Desarrolle las siguientes aplicaciones en un Workspace."

|p1 p2 x y r sx sy|
x:=(Prompter prompt: 'Ingrese la posicion en X') asNumber.
y:=(Prompter prompt: 'Ingrese la posicion en Y') asNumber .
p1:=PuntoDelPlano crearConX: x conY: y.
x:=(Prompter prompt: 'Ingrese la posicion en X') asNumber.
y:=(Prompter prompt: 'Ingrese la posicion en Y') asNumber.
p2:=PuntoDelPlano crearConX: x conY: y.
p1 inspect.
p2 inspect.

"****************************************************
Fórmula de distancia entre dos puntos en el plano cartesiano.
La distancia entre dos puntos P1 y P2 del plano se denota por d(P1,P2).
La fórmula de la distancia usa las coordenadas de los puntos.
Está fórmula puede ser deducida a partir del Teorema de Pitágoras.
****************************************************"

sx:=(p1 verCoordenadaX)-(p2 verCoordenadaX).
"sx inspect."
sy:=(p1 verCoordenadaY)-(p2 verCoordenadaY).
"sy inspect."
sx:=sx*sx.
"sx inspect."
sy:=sy*sy.
"sy inspect."
r:=(sx+sy)sqrt.
r inspect.

!

Object subclass: #Biblioteca
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Biblioteca guid: (GUID fromString: '{8c92999f-2b8d-4bcd-bc86-2862de1d4e91}')!
Biblioteca comment: ''!
!Biblioteca categoriesForClass!Kernel-Objects! !
!Biblioteca class methodsFor!
crearBiblioteca:unNombre
"Retorna una instancia de Biblioteca inicializada"
^(self new) iniBiblioteca:unNombre! !
!Biblioteca class categoriesFor: #crearBiblioteca:!public! !

!Biblioteca class methodsFor!
crearBiblioteca:unNombre
"Retorna una instancia de Biblioteca inicializada"
^(self new) iniBiblioteca:unNombre.! !
!Biblioteca class categoriesFor: #crearBiblioteca:!public! !

Object subclass: #Biblioteca
	instanceVariableNames: 'nombre libros'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

!Biblioteca methodsFor!
iniBiblioteca:unNombre
"Inicializa una instancia de Biblioteca"
nombre:=unNombre.
libros:= OrderedCollection new.
! !
!Biblioteca categoriesFor: #iniBiblioteca:!public! !

!Biblioteca methodsFor!
iniBiblioteca:unNombre
"Inicializa una instancia de Biblioteca"
nombre:=unNombre.
libros:=OrderedCollection new.
! !
!Biblioteca categoriesFor: #iniBiblioteca:!public! !

!Biblioteca methodsFor!
iniBiblioteca:unNombre
"Inicializa una instancia de Biblioteca"
nombre:=unNombre.
libros:=OrderedCollection new.
! !
!Biblioteca categoriesFor: #iniBiblioteca:!public! !

!Biblioteca methodsFor!
verNombre
"Retorna el nombre de la Biblioteca"
^nombre.
! !
!Biblioteca categoriesFor: #verNombre!public! !

!Biblioteca methodsFor!
modificarNombre:unNombre
"Modifica el nombre de la Biblioteca"
nombre:=unNombre.! !
!Biblioteca categoriesFor: #modificarNombre:!public! !

!Biblioteca methodsFor!
agregarLibro:unLibro
"Agrega un libro a la Biblioteca"
libros add:unLibro.! !
!Biblioteca categoriesFor: #agregarLibro:!public! !

!Biblioteca methodsFor!
eliminarLibro:unLibro
"Elimina un libro de la Biblioteca"
libros remove:unLibro.! !
!Biblioteca categoriesFor: #eliminarLibro:!public! !

!Biblioteca methodsFor!
existeLibro:unLibro
"Retorna V si el libro está en la Biblioteca, F en caso contrario(cc)"
^ libros includes:unLibro.! !
!Biblioteca categoriesFor: #existeLibro:!public! !

!Biblioteca methodsFor!
esVacia
"Retorna V si la Biblioteca no tiene libros, F en cc"
^ libros empty.! !
!Biblioteca categoriesFor: #esVacia!public! !

!Biblioteca methodsFor!
eliminarLibro:unLibro
"Elimina un libro de la Biblioteca"
libros remove:unLibro.! !
!Biblioteca categoriesFor: #eliminarLibro:!public! !

!Libro class methodsFor!
buscarLibroIsbn:unIsbn
"Retorna el libro de Isbn unIsbn si existe, nil en cc"! !
!Libro class categoriesFor: #buscarLibroIsbn:!public! !

Libro class removeSelector: #buscarLibroIsbn: ifAbsent: []!

!Biblioteca class methodsFor!
buscarLibroIsbn:unIsbn
"Retorna el libro de Isbn unIsbn si existe, nil en cc"! !
!Biblioteca class categoriesFor: #buscarLibroIsbn:!public! !

!Biblioteca class methodsFor!
todosLosLibros
"Retorna los libros de la Biblioteca"! !
!Biblioteca class categoriesFor: #todosLosLibros!public! !

!Biblioteca class methodsFor!
todosLosLibros
"Retorna los libros de la Biblioteca"
! !
!Biblioteca class categoriesFor: #todosLosLibros!public! !

Biblioteca class removeSelector: #todosLosLibros ifAbsent: []!

Biblioteca class removeSelector: #buscarLibroIsbn: ifAbsent: []!

!Biblioteca methodsFor!
buscarLibroIsbn:unIsbn
"Retorna el libro de Isbn unIsbn si existe, nil en cc"! !
!Biblioteca categoriesFor: #buscarLibroIsbn:!public! !

!Biblioteca methodsFor!
todosLosLibros
"Retorna los libros de la Biblioteca"
^libros.! !
!Biblioteca categoriesFor: #todosLosLibros!public! !

!Biblioteca methodsFor!
buscarLibroIsbn:unIsbn
"Retorna el libro de Isbn unIsbn si existe, nil en cc"

"^ libro: "! !
!Biblioteca categoriesFor: #buscarLibroIsbn:!public! !

!Biblioteca methodsFor!
buscarLibroIsbn:unIsbn
"Retorna el libro de Isbn unIsbn si existe, nil en cc"
"[resultado]
(existeLibro:unIsbn)ifTrue: []
ifFalse: [resultado:=nill]

^ resultado."! !
!Biblioteca categoriesFor: #buscarLibroIsbn:!public! !

!Biblioteca methodsFor!
buscarLibroIsbn:unIsbn
"Retorna el libro de Isbn unIsbn si existe, nil en cc"
"[resultado]
(unIsbn)ifTrue: []
ifFalse: [resultado:=nill]

^ resultado."! !
!Biblioteca categoriesFor: #buscarLibroIsbn:!public! !

!Biblioteca methodsFor!
esVacia
"Retorna V si la Biblioteca no tiene libros, F en cc"
^ libros Empty.! !
!Biblioteca categoriesFor: #esVacia!public! !

!Biblioteca methodsFor!
esVacia
"Retorna V si la Biblioteca no tiene libros, F en cc"
^ libros Empty.! !
!Biblioteca categoriesFor: #esVacia!public! !

!Biblioteca methodsFor!
esVacia
"Retorna V si la Biblioteca no tiene libros, F en cc"
^ libros Empty.! !
!Biblioteca categoriesFor: #esVacia!public! !

!Biblioteca methodsFor!
esVacia
"Retorna V si la Biblioteca no tiene libros, F en cc"
^ libros isEmpty.! !
!Biblioteca categoriesFor: #esVacia!public! !

!Biblioteca methodsFor!
esVacia
"Retorna V si la Biblioteca no tiene libros, F en cc"
^ libros isEmpty.! !
!Biblioteca categoriesFor: #esVacia!public! !

!Biblioteca methodsFor!
buscarLibroIsbn:unIsbn
"Retorna el libro de Isbn unIsbn si existe, nil en cc"
"[resultado]

(unIsbn)ifTrue: []
ifFalse: [resultado:=nill]

^ resultado."! !
!Biblioteca categoriesFor: #buscarLibroIsbn:!public! !

|libros x|
libros :=OrderedCollection new.

libros add: 3; add: 2; add: 1; add: 4.

x := libros indexOf: libros last.
x inspect .!

!Biblioteca methodsFor!
buscarLibro! !
!Biblioteca categoriesFor: #buscarLibro!public! !

!Biblioteca methodsFor!
buscarLibro":

1 to: libros indexOf: libros last do:[i| ].
^libros at:x."! !
!Biblioteca categoriesFor: #buscarLibro!public! !

|b n l is t a e col1 col2 |
n:= Prompter prompt:'Ingrese un nombre’ default:'.
b:= Biblioteca crearBiblioNombre:n.
1 to:3 do:[:i| is:= Prompter prompt:'Ingrese un isbn’ default:'.
t:= Prompter prompt:'Ingrese un título’ default:'.
a:= Prompter prompt:'Ingrese un autor’ default:'.
e:= Prompter prompt:'Ingrese una editorial’ default:'.
l:= Libro crearLibroIsbn:is tit:t aut:a edit:e.
b agregarLibro:l].
col1:=b todosLosLibros.
1 to: col1 size do:[:i|((col1 at:i) verEstado=false) 
				ifTrue:[col2 add:(col1 at:i)] ].
1 to: col2 size do:[:i|(col1 at:i) verTitulo inspect].!

"00:52:18, 27 May 2020: Image saved"!

"00:52:25, 27 May 2020: Image saved"!

"00:52:36, 27 May 2020: Image saved"!

"00:52:43, 27 May 2020: Image saved"!

"09:33:42, 31 May 2020: Dolphin Smalltalk Professional started"!


'casa' isNil inspect.
"ii) 9 + 3 * 2."
9+3*2 inspect .!

9+3*2 inspect .!

9+3 * 2 inspect .!

9 + 3 * 2 inspect .!


var:=9 + 3 * 2.
 var inspect.!

var:=9 + 3 .!

var:=9 + 3 .
 var inspect.!

true&false inspect.!

var := true&false.
var inspect.!

9+3.!

9+3.!

9+3.!

9+3.!

'casa' isNil inspect.!

'casa' isNil inspect.!

'casa' isNil inspect.!

var inspect.!

var isNil.!

var isNil.!

var inspect.!

var :='casa' isNil.!

var isNil.!

var isNil inspect.!

var isNil.!

var isNil.!

var := true&false.!

var:=9 + 3 * 2.
var inspect.

"iii) true & false."
var := true&false.!

var isNil.!

var:=nil.!

var isNil.!

var isNil.!

var isNil.!

var inspect.!

#(12 65 'olas' true)includes: 'viento'.!

var inspect.!

var inspect.!

var inspect.!

var := #(12 65 'olas' true)includes: 'viento'.
var inspect.!

var inspect.!

var := #(12 65 'olas' true)includes: 'viento'.!

var inspect.!

var inspect.!

var:=3*2 squared inspect.!

var:=3*2 squared inspect!

var inspect.!

var:=3*2 squared.!

var inspect.!

var:=3*2 squared.
var inspect.
!

var:=3*2 squared.
var inspect.
!


var:=3*2 squared.
var inspect.
!

var:=3*2 squared.
var inspect.!

var:=3*2 squared.
var inspect.!

'objetos'inludes:$e.!

'objetos'includes:$e.!

var:='objetos'includes:$e.!

var inspect.!

#('alumno' 'profesor' 'aula')size.!

var inspect.!

var inspect.!

var:=#('alumno' 'profesor' 'aula')size.!

var inspect.Inspector!

var inspect.!

'superclase'size.!

var inspect.!

var:='superclase'size.!

var inspect.!

'an','te','ayer'.!

var:='an','te','ayer'.!

var:='an','te','ayer' inspect.!

'an','te','ayer' inspect .!

4+2 negated between:3+4*5 and: 'hello' size*10.!

var inspect.!

var:=4+2 negated between:3+4*5 and: 'hello' size*10.
var inspect.!

4+2 negated.!

3+4*6+3.!

5 between: 1 and: 3 squared+4.!

5 between: 1 and: 3 squared+4.!

5 between: 1 and: 3 squared+4.!

5 between: 1 and: 3 squared+4.!

|a b|
a:=3.
b:=8.
(a<b)
ifTrue: [a:=a+1]
ifFalse:[a:=b*2].
a inspect.!

|a b|
a:=3.
b:=8.
(a<b)
ifTrue: [a:=a+1]
ifFalse:[a:=b*2].
a inspect.
b inspect.!

|a b|
a:=3.
b:=8.
(a<b)
ifTrue: [a:=a+1]
ifFalse:[a:=b*2].
a inspect.
b inspect.Inspector!


|a b|
a:=3.
b:=8.
(a<b)
ifTrue: [a:=a+1]
ifFalse:[a:=b*2].
a inspect.
b inspect.!

|a b|
a:=3.
b:=8.
(a<b)
ifTrue: [a:=a+1]
ifFalse:[a:=b*2].
a inspect.
b inspect.!

|a b|
a:=4.
b:=4.
(a<b)
ifTrue: [a:=a+1]
ifFalse:[a:=b*2].
a inspect.
b inspect.!

|a b|
a:=3.
b:=4.
(a<b)
ifTrue: [a:=a+1]
ifFalse:[a:=b*2].
a inspect.
b inspect.Inspector!

|a b|
a:=3.
b:=4.
(a<b)
ifTrue: [a:=a+1]
ifFalse:[a:=b*2].
a inspect.
b inspect.!

|a b|
a:=4.
b:=4.
(a<=b)
ifTrue: [a:=a+1]
ifFalse:[a:=b*2].
a inspect.
b inspect.
!

|a b|
a:=5.
b:=4.
(a<=b)
ifTrue: [a:=a+1]
ifFalse:[a:=b*2].
a inspect.
b inspect.!

|num b|
num:=9.
b:=0.
(num>6)ifTrue:[b:=b+1. num:=num-1.]
		ifFalse:[num:=num+1].
b inspect.
num inspect.!

|suma i|
i:=1.
suma:=0.

[i<=10]
whileTrue: [suma:=suma+i. i=i+1].
suma inspect.
!

|suma i|
i:=1.
suma:=0.

[i<=10]
whileTrue: 
[suma:=suma+i. i=i+1].
suma inspect.!

|suma i|
i:=1.
suma:=0.

[i<=10]
whileTrue:[suma:=suma+i. i=i+1].
suma inspect.!

|suma i|
i:=1.
suma:=0.

[i<=10]whileTrue:[suma:=suma+i. i=i+1].
suma inspect.!

|suma i|
i:=1.
suma:=0.

[i<=10]whileTrue:[suma:=suma+i. i=i+1].
suma inspect.!

i:=1.!

i<=10.!

|suma i|
i:=1.
suma:=0.

[i<=10]whileTrue:[suma:=suma+i. i=i+1].
suma inspect.
!

|suma i|
i:=1.
suma:=0.

[i<=10]whileTrue:[suma:=suma+i.
 i=i+1].
suma inspect.!

|suma i|
i:=1.
suma:=0.

[i<=10]whileTrue:[suma:=suma+i. i:=i+1].
suma inspect.!

i%7=0.!

i%7=0.false!

i%7=0.!


|total i|
i:=7.
total:=0.
i%7=0.false!

|total i|
i:=7.
total:=0.
i%7=0.!

i%2~=0.!


|total i|
i:=2.
total:=0.
i%2~=0.!


|total i|
i:=7.
total:=0.
i%2~=0.!


|total i|
i:=14.
total:=0.
i%2~=0.!


|total i|
i:=1.
total:=0.
[i%7=0&i%2~=0&i<101]whileTrue: [total:=total+i. i:=i+1].
total inspect.!

i<101.!


|total i|
i:=1.
total:=0.
[i%7=0&i%2~=0&i<101]whileTrue: [total:=total+i. i:=i+1].
[i%7=0&i%2~=0&i<101]whileFalse:[i:=i+1].
total inspect.!


|total i|
i:=1.
total:=0.
[i<101]whileTrue: [
	(i%7=0&i%2~=0)ifTrue: [total:=total+i].
	i:=i+1].
total inspect.!


|total i|
i:=1.
total:=0.
[i<101]whileTrue: [
	(i%7=0 & i%2~=0)ifTrue: [total:=total+i].
	i:=i+1].
total inspect.!


|total i|
i:=1.
total:=0.
[i<101]whileTrue: [
	(i%7=0 & (i%2)~=0)ifTrue: [total:=total+i].
	i:=i+1].
total inspect.!

i%7=0 & (i%2)~=0.!


|total i|
i:=1.
total:=0.
(i%7=0) & (i%2~=0).!


|total i|
i:=1.
total:=0.
"(i%7=0) & (i%2~=0)."
[i<101]whileTrue: [
	(i%7=0) & (i%2~=0)ifTrue: [total:=total+i].
	i:=i+1].
total inspect.!


|total i|
i:=1.
total:=0.
"(i%7=0) & (i%2~=0)."
[i<21]whileTrue: [
	(i%7=0) & (i%2~=0)ifTrue: [total:=total+i].
	i:=i+1].
total inspect.!


|total i|
i:=1.
total:=0.
"(i%7=0) & (i%2~=0)."
[i<22]whileTrue: [
	(i%7=0) & (i%2~=0)ifTrue: [total:=total+i].
	i:=i+1].
total inspect.!


|total i|
i:=1.
total:=0.
"(i%7=0) & (i%2~=0)."
[i<22]whileTrue: [
	((i%7=0) & (i%2~=0))ifTrue: [total:=total+i].
	i:=i+1].
total inspect.!


|total i|
i:=1.
total:=0.
"(i%7=0) & (i%2~=0)."
[i<22]whileTrue: [
	((i%7=0) & (i%2~=0))ifTrue: [total:=total+i].
	i:=i+1].
total inspect.!


|total i|
i:=1.
total:=0.
"(i%7=0) & (i%2~=0)."
[i<22]whileTrue: [
	(i%7=0) & (i%2~=0)ifTrue: [total:=total+i].
	i:=i+1].
total inspect.!


|total i|
i:=1.
total:=0.
"(i%7=0) & (i%2~=0)."
[i<21]whileTrue: [
	(i%7=0) & (i%2~=0)ifTrue: [total:=total+i].
	i:=i+1].
total inspect.!


|total i|
i:=1.
total:=0.
"(i%7=0) & (i%2~=0)."
[i<101]whileTrue: [
	(i%7=0) & (i%2~=0)ifTrue: [total:=total+i].
	i:=i+1].
total inspect.!

"16:57:24, 31 May 2020: Image saved"!

"16:57:51, 31 May 2020: Image saved"!

|suma|
suma:=0.
1to:10do:[:i|suma:=suma+i ].!


|suma|
suma:=0.
1 to: 10 do: [:i | suma:=suma+i ].!


|suma|
suma:=0.
1 to: 10 do: [:i | suma:=suma+i ].
suma inspect.!


|suma|
suma:=0.
1 to: 10 do: [:i | suma:=suma+i ].
suma inspect.!


|total|
total:=0.
1to:100do:
	[:i | 
	(i%7=0)&(i%2~=0)ifTrue:[total:=total+i].
	].
total inspect.!


|total i|
i:=1.
total:=0.
"(i%7=0) & (i%2~=0)."
[i<101]whileTrue: [
	(i%7=0) & (i%2~=0)ifTrue: [total:=total+i].
	i:=i+1].
total inspect.

"|total|"
total:=0.
1to:100do:
	[:i | 
	(i%7=0)&(i%2~=0)ifTrue:[total:=total+i].
	].
total inspect.!

"18:50:02, 31 May 2020: Image saved"!

#('alumno' 'profesor' 56 'aula') size.!

|test|
test:=#('alumno' 'profesor' 56 'aula') size.
test inspect.!

 25 notNil.!

|test|
test:=#('alumno' 'profesor' 56 'aula') size.
test inspect.

"b)"
 test:=25 notNil.
test inspect.!

test:=1 + 2 negated.!


|test|
test:=#('alumno' 'profesor' 56 'aula') size.
test inspect.

"b)"
 test:=25 notNil.
test inspect.
"c)"
test:=1 + 2 negated.
test inspect.!

test:=1 + 2 * 3.!

 test :=4 + 8 factorial between: 3 + 4* 10 and: 'hola' size *8.!

test:='objetos' includes:$e.!


|test|
test:=#('alumno' 'profesor' 56 'aula') size.
test inspect.

"b)"
 test:=25 notNil.
test inspect.
"c)"
test:=1 + 2 negated.
test inspect.
"d)"
test:=1 + 2 * 3.
test inspect.
"e)"
test :=4 + 8 factorial between: 3 + 4* 10 and: 'hola' size *8.
test inspect.
"f)"
test:='objetos' includes:$e.
test inspect.!

var:= ('an','te','ayer') size.!

('an','te','ayer') size.!


|var|
var:= ('an','te','ayer') size.
var inspect.!

 6 class.!

|var|
var:= ('an','te','ayer') size.
var inspect.
"h)"
 var:=6 class.
var inspect.!

 Integer superclass.!

"j)" 'hola' isKindOf: Integer.!


|var|
var:= ('an','te','ayer') size.
var inspect.
"h)"
 var:=6 class.
var inspect.
"i)"
 var:=Integer superclass.
var inspect.
"j)"
var:= 'hola' isKindOf: Integer.
var inspect.!

"k)" (2/3) asFloat.!


var:= (2/3) asFloat.
var inspect.!

var:= (2/3) asFloat.!

var inspect.!

var:= (2/3) asFloat.
var inspect.!

|n m x|
n:=3.
m:=1.
x:= ((n+m) factorial) squared.
!

|n m x|
n:=3.
m:=1.
x:= ((n+m) factorial) squared.!

|n m x|
n:=3.
m:=1.
((n+m) factorial) squared.
!

|n m x|
n:=3.
m:=1.
x:= ((n+m) factorial) squared.
x inspect.!

|n m x|
n:=3.
m:=1.
x:= ((n+m) factorial) squared.
x inspect.!

3 squared.!

|n m x|
n:=3.
m:=1.
(n+m) factorial.!

24 squared.!


|n m x|
n:=3.
m:=1.
x:= ((n+m) factorial) squared.
x inspect.!

 5 between:1 and:3 squared + 4.!

 5 between:1 and:3 squared + 4.!

 5 between:1 and:3 squared + 4.!

3 + 4 * 6 + 3.!

 2 factorial negated.!

"20:00:04, 31 May 2020: Image saved"!

"23:34:05, 31 May 2020: Image saved"!

"23:34:17, 31 May 2020: Image saved"!

"23:34:52, 31 May 2020: Image saved to 'C:\Users\chato\Documents\Dolphin Smalltalk 7\MeodologiasDPRO.img7'"!

"23:34:53, 31 May 2020: Image saved"!

"23:35:09, 31 May 2020: Image saved to 'C:\Users\chato\Documents\Dolphin Smalltalk 7\DPRO.img7'"!

"23:35:14, 31 May 2020: Image saved"!

"23:35:23, 31 May 2020: Dolphin Smalltalk Professional started"!

"23:36:46, 31 May 2020: Dolphin Smalltalk Professional started"!

ProfStef next.!

ProfStef next.!

MessageBox notify: 'hello world!!'.!

MessageBox notify: 'hello world!!'.!

ProfStef next.!

1 + 2.!

3!

1 + 2.3!

1 + 2.!

1 + 2.!

1 + 2.!

1 + 2.!

1 + 2.!

TimeStamp current.!

TimeStamp current date.!

TimeStamp current time.!

TimeStamp current.!

ProfStef next.!

2.!

(1/3).!

(1/3) + (4/5).!

(18/5) rounded.!

200 factorial.!

1 class.!

200 factorial class.!

1 negated.!

1 negated negated.!

(1 + 3) odd.!

ProfStef next.!

$A.!

$A class.!

$B asciiValue.!

Character cr asciiValue.!

Character care asciiValue.!

Character caret asciiValue.!

Character space asciiValue.!

Character byteCharacterSet.!

Character byteCharacterSet.!

Character byteCharacterSet.!

Character byteCharacterSet.!

Character byteCharacterSet.!

Character byteCharacterSet.!

Character byteCharacterSet.!

$\x1F42C asString.!

$\x1F42C asString.!

ProfStef next.!

"23:49:09, 31 May 2020: Image saved"!

"09:32:40, 02 June 2020: Dolphin Smalltalk Professional started"!

|d|
d:= Dictionary new
at: 'gorrion' put: 'pajaro';
at: 'olmo' put: 'arbol';
at: 'golondrina' put: 'pajaro';
at: 'sauce' put: 'arbol';
yourself.!

|d|
d:= Dictionary new
at: 'gorrion' put: 'pajaro';
at: 'olmo' put: 'arbol';
at: 'golondrina' put: 'pajaro';
at: 'sauce' put: 'arbol';
yourself.!

|d|
d:= Dictionary new
at: 'gorrion' put: 'pajaro';
at: 'olmo' put: 'arbol';
at: 'golondrina' put: 'pajaro';
at: 'sauce' put: 'arbol';
yourself.
d inspect.!

|d rta1 rta2 rta3|
d:= Dictionary new
at: 'gorrion' put: 'pajaro';
at: 'olmo' put: 'arbol';
at: 'golondrina' put: 'pajaro';
at: 'sauce' put: 'arbol';
yourself.
"d inspect."



rta1:=d at: 'golondrina'.

!

|d rta1 rta2 rta3|
d:= Dictionary new
at: 'gorrion' put: 'pajaro';
at: 'olmo' put: 'arbol';
at: 'golondrina' put: 'pajaro';
at: 'sauce' put: 'arbol';
yourself.
d inspect.

rta1:=d at: 'golondrina'.
!

|d rta1 rta2 rta3|
d:= Dictionary new
at: 'gorrion' put: 'pajaro';
at: 'olmo' put: 'arbol';
at: 'golondrina' put: 'pajaro';
at: 'sauce' put: 'arbol';
yourself.
"d inspect."

rta1:=d at: 'golondrina'.
rta2:=d at: 'pavo'.!

|d rta1 rta2 rta3|
d:= Dictionary new
at: 'gorrion' put: 'pajaro';
at: 'olmo' put: 'arbol';
at: 'golondrina' put: 'pajaro';
at: 'sauce' put: 'arbol';
yourself.
"d inspect."

rta1:=d at: 'golondrina'.
rta2:=d at: 'pavo'.!

|d rta1 rta2 rta3|
d:= Dictionary new
at: 'gorrion' put: 'pajaro';
at: 'olmo' put: 'arbol';
at: 'golondrina' put: 'pajaro';
at: 'sauce' put: 'arbol';
yourself.
"d inspect."

rta1:=d at: 'golondrina'. 
"pajaro"
rta2:=d at: 'gorrion'. 
"pajaro"
rta3:=d at: 'pavo'
"not found pavo"!

|d rta1 rta2 rta3|
d:= Dictionary new
at: 'gorrion' put: 'pajaro';
at: 'olmo' put: 'arbol';
at: 'golondrina' put: 'pajaro';
at: 'sauce' put: 'arbol';
yourself.
"d inspect."

rta1:=d at: 'golondrina'. 
"pajaro"!

|d rta1 rta2 rta3|
d:= Dictionary new
at: 'gorrion' put: 'pajaro';
at: 'olmo' put: 'arbol';
at: 'golondrina' put: 'pajaro';
at: 'sauce' put: 'arbol';
yourself.
"d inspect."

rta1:=d at: 'golondrina'. 
"pajaro"
rta2:=d at: 'gorrion'. 
"pajaro"!

|d rta1 rta2 rta3|
d:= Dictionary new
at: 'gorrion' put: 'pajaro';
at: 'olmo' put: 'arbol';
at: 'golondrina' put: 'pajaro';
at: 'sauce' put: 'arbol';
yourself.
"d inspect."

rta1:=d at: 'golondrina'. 
"pajaro"
rta2:=d at: 'gorrion'. 
"pajaro"
rta3:=d at: 'pavo'.
rta3 inspect.!

|d rta1 rta2 rta3|
d:= Dictionary new
at: 'gorrion' put: 'pajaro';
at: 'olmo' put: 'arbol';
at: 'golondrina' put: 'pajaro';
at: 'sauce' put: 'arbol';
yourself.
"d inspect."
"
rta1:=d at: 'golondrina'. 

rta2:=d at: 'gorrion'. 
pajaro" 
rta3:=d at: 'pavo'.
rta3 inspect.
!

|d rta1 rta2 rta3|
d:= Dictionary new
at: 'gorrion' put: 'pajaro';
at: 'olmo' put: 'arbol';
at: 'golondrina' put: 'pajaro';
at: 'sauce' put: 'arbol';
yourself.
"d inspect."
"
rta1:=d at: 'golondrina'. 

rta2:=d at: 'gorrion'. 
pajaro" 
rta3:=d at: 'pavo'.
rta3 inspect.!

|d rta1 rta2 rta3|
d:= Dictionary new
at: 'gorrion' put: 'pajaro';
at: 'olmo' put: 'arbol';
at: 'golondrina' put: 'pajaro';
at: 'sauce' put: 'arbol';
yourself.
"d inspect."
"
rta1:=d at: 'golondrina'. 

rta2:=d at: 'gorrion'. 
pajaro" 
rta3:=d at: 'pavo'.
rta3 inspect.!

|d rta1 rta2 rta3|
d:= Dictionary new
at: 'gorrion' put: 'pajaro';
at: 'olmo' put: 'arbol';
at: 'golondrina' put: 'pajaro';
at: 'sauce' put: 'arbol';
yourself.
"d inspect."
"
rta1:=d at: 'golondrina'. 

rta2:=d at: 'gorrion'. 
pajaro" 
rta3:=d at: 'pavo'.
rta3 inspect.
!

|d rta1 rta2 rta3|
d:= Dictionary new
at: 'gorrion' put: 'pajaro';
at: 'olmo' put: 'arbol';
at: 'golondrina' put: 'pajaro';
at: 'sauce' put: 'arbol';
yourself.
"d inspect."

rta1:=d at: 'golondrina'. 
"pajaro"
rta2:=d at: 'gorrion'. 
"pajaro" 
"rta3:=d at: 'pavo'."
"not found pavo"
d at:'fuego' ifAbsent:['no lo se'].!

|d rta1 rta2 rta3|
d:= Dictionary new
at: 'gorrion' put: 'pajaro';
at: 'olmo' put: 'arbol';
at: 'golondrina' put: 'pajaro';
at: 'sauce' put: 'arbol';
yourself.
"d inspect."

rta1:=d at: 'golondrina'. 
"pajaro"
rta2:=d at: 'gorrion'. 
"pajaro" 
d at: 'pavo'.!

|d rta1 rta2 rta3|
d:= Dictionary new
at: 'gorrion' put: 'pajaro';
at: 'olmo' put: 'arbol';
at: 'golondrina' put: 'pajaro';
at: 'sauce' put: 'arbol';
yourself.
"d inspect."

rta1:=d at: 'golondrina'. 
"pajaro"
rta2:=d at: 'gorrion'. 
"pajaro" 
d at: 'pavo'.
"rta3:=d at: 'pavo'."
"not found pavo"
"Dictionary(Object)>>errorNotFound:
Dictionary>>errorKeyNotFound:
Dictionary>>at:
UndefinedObject>>{unbound}doIt
CompiledExpression>>value:
SmalltalkWorkspace>>evaluateRange:ifFail:debug:
SmalltalkWorkspace>>evaluateRange:ifFail:
SmalltalkWorkspace>>evaluateAndDisplay:
SmalltalkWorkspace>>displayIt
Symbol>>forwardTo:
CommandDescription>>performAgainst:
-----protocolos-----
"
d at:'fuego' ifAbsent:['no lo se'].
d removeKey: 'fuego' ifAbsent:[^nil].!

"d at: 'pavo'."!

"d at: 'pavo'."!

"d at: 'pavo'."!

"d at: 'pavo'."!

"d at: 'pavo'."!

"d at: 'pavo'."!

|d rta1 rta2 rta3|
d:= Dictionary new
at: 'gorrion' put: 'pajaro';
at: 'olmo' put: 'arbol';
at: 'golondrina' put: 'pajaro';
at: 'sauce' put: 'arbol';
yourself.
"d inspect."

rta1:=d at: 'golondrina'. 
"pajaro"
rta2:=d at: 'gorrion'. 
"pajaro" 
"d at: 'pavo'."
"rta3:=d at: 'pavo'."
"not found pavo"
"Dictionary(Object)>>errorNotFound:
Dictionary>>errorKeyNotFound:
Dictionary>>at:
UndefinedObject>>{unbound}doIt
CompiledExpression>>value:
SmalltalkWorkspace>>evaluateRange:ifFail:debug:
SmalltalkWorkspace>>evaluateRange:ifFail:
SmalltalkWorkspace>>evaluateAndDisplay:
SmalltalkWorkspace>>displayIt
Symbol>>forwardTo:
CommandDescription>>performAgainst:
-----protocolos-----
"
d at:'fuego' ifAbsent:['no lo se'].
d removeKey: 'fuego' ifAbsent:[^nil].!

|d rta1 rta2 rta3|
d:= Dictionary new
at: 'gorrion' put: 'pajaro';
at: 'olmo' put: 'arbol';
at: 'golondrina' put: 'pajaro';
at: 'sauce' put: 'arbol';
yourself.
"d inspect."

rta1:=d at: 'golondrina'. 
"pajaro"
rta2:=d at: 'gorrion'. 
"pajaro" 
"d at: 'pavo'."
"rta3:=d at: 'pavo'."
"not found pavo"
"Dictionary(Object)>>errorNotFound:
Dictionary>>errorKeyNotFound:
Dictionary>>at:
UndefinedObject>>{unbound}doIt
CompiledExpression>>value:
SmalltalkWorkspace>>evaluateRange:ifFail:debug:
SmalltalkWorkspace>>evaluateRange:ifFail:
SmalltalkWorkspace>>evaluateAndDisplay:
SmalltalkWorkspace>>displayIt
Symbol>>forwardTo:
CommandDescription>>performAgainst:
-----protocolos-----
"
d at:'fuego' ifAbsent:['no lo se'].
d removeKey: 'fuego' ifAbsent:[^nil].!

|d rta1 rta2 rta3|
d:= Dictionary new
at: 'gorrion' put: 'pajaro';
at: 'olmo' put: 'arbol';
at: 'golondrina' put: 'pajaro';
at: 'sauce' put: 'arbol';
yourself.
"d inspect."

rta1:=d at: 'golondrina'. 
"pajaro"
rta2:=d at: 'gorrion'. 
"pajaro" 
"d at: 'pavo'."
"rta3:=d at: 'pavo'."
"not found pavo"
"Dictionary(Object)>>errorNotFound:
Dictionary>>errorKeyNotFound:
Dictionary>>at:
UndefinedObject>>{unbound}doIt
CompiledExpression>>value:
SmalltalkWorkspace>>evaluateRange:ifFail:debug:
SmalltalkWorkspace>>evaluateRange:ifFail:
SmalltalkWorkspace>>evaluateAndDisplay:
SmalltalkWorkspace>>displayIt
Symbol>>forwardTo:
CommandDescription>>performAgainst:
-----protocolos-----
"
d at:'fuego' ifAbsent:['no lo se'].
d removeKey: 'fuego' ifAbsent:[^nil].
d inspect.!

|d rta1 rta2 rta3|
d:= Dictionary new
at: 'gorrion' put: 'pajaro';
at: 'olmo' put: 'arbol';
at: 'golondrina' put: 'pajaro';
at: 'sauce' put: 'arbol';
yourself.
"d inspect."

rta1:=d at: 'golondrina'. 
"pajaro"
rta2:=d at: 'gorrion'. 
"pajaro" 
"d at: 'pavo'."
"rta3:=d at: 'pavo'."
"not found pavo"
"Dictionary(Object)>>errorNotFound:
Dictionary>>errorKeyNotFound:
Dictionary>>at:
UndefinedObject>>{unbound}doIt
CompiledExpression>>value:
SmalltalkWorkspace>>evaluateRange:ifFail:debug:
SmalltalkWorkspace>>evaluateRange:ifFail:
SmalltalkWorkspace>>evaluateAndDisplay:
SmalltalkWorkspace>>displayIt
Symbol>>forwardTo:
CommandDescription>>performAgainst:
-----protocolos-----
"
"d at:'fuego' ifAbsent:['no lo se']."
d removeKey: 'fuego' ifAbsent:[^nil].
d inspect.!

|d rta1 rta2 rta3|
d:= Dictionary new
at: 'gorrion' put: 'pajaro';
at: 'olmo' put: 'arbol';
at: 'golondrina' put: 'pajaro';
at: 'sauce' put: 'arbol';
yourself.
"d inspect."

rta1:=d at: 'golondrina'. 
"pajaro"
rta2:=d at: 'gorrion'. 
"pajaro" 
"d at: 'pavo'."
"rta3:=d at: 'pavo'."
"not found pavo"
"Dictionary(Object)>>errorNotFound:
Dictionary>>errorKeyNotFound:
Dictionary>>at:
UndefinedObject>>{unbound}doIt
CompiledExpression>>value:
SmalltalkWorkspace>>evaluateRange:ifFail:debug:
SmalltalkWorkspace>>evaluateRange:ifFail:
SmalltalkWorkspace>>evaluateAndDisplay:
SmalltalkWorkspace>>displayIt
Symbol>>forwardTo:
CommandDescription>>performAgainst:
-----protocolos-----
"
"d at:'fuego' ifAbsent:['no lo se']."
d removeKey: 'fuego' ifAbsent:[^nil].
"d inspect."!

|d rta1 rta2 rta3|
d:= Dictionary new
at: 'gorrion' put: 'pajaro';
at: 'olmo' put: 'arbol';
at: 'golondrina' put: 'pajaro';
at: 'sauce' put: 'arbol';
yourself.
"d inspect."

rta1:=d at: 'golondrina'. 
"pajaro"
rta2:=d at: 'gorrion'. 
"pajaro" 
"d at: 'pavo'."
"rta3:=d at: 'pavo'."
"not found pavo"
"Dictionary(Object)>>errorNotFound:
Dictionary>>errorKeyNotFound:
Dictionary>>at:
UndefinedObject>>{unbound}doIt
CompiledExpression>>value:
SmalltalkWorkspace>>evaluateRange:ifFail:debug:
SmalltalkWorkspace>>evaluateRange:ifFail:
SmalltalkWorkspace>>evaluateAndDisplay:
SmalltalkWorkspace>>displayIt
Symbol>>forwardTo:
CommandDescription>>performAgainst:
-----protocolos-----
"
"d at:'fuego' ifAbsent:['no lo se']."
d removeKey: 'fuego' ifAbsent:[^nil].!

|d rta1 rta2 rta3|
d:= Dictionary new
at: 'gorrion' put: 'pajaro';
at: 'olmo' put: 'arbol';
at: 'golondrina' put: 'pajaro';
at: 'sauce' put: 'arbol';
yourself.
"d inspect."

rta1:=d at: 'golondrina'. 
"pajaro"
rta2:=d at: 'gorrion'. 
"pajaro" 
"d at: 'pavo'."
"rta3:=d at: 'pavo'."
"not found pavo"
"Dictionary(Object)>>errorNotFound:
Dictionary>>errorKeyNotFound:
Dictionary>>at:
UndefinedObject>>{unbound}doIt
CompiledExpression>>value:
SmalltalkWorkspace>>evaluateRange:ifFail:debug:
SmalltalkWorkspace>>evaluateRange:ifFail:
SmalltalkWorkspace>>evaluateAndDisplay:
SmalltalkWorkspace>>displayIt
Symbol>>forwardTo:
CommandDescription>>performAgainst:
-----protocolos-----
"
"d at:'fuego' ifAbsent:['no lo se']."
d removeKey:'fuego' ifAbsent:[^nil].
d inspect.!

|d rta1 rta2 rta3|
d:= Dictionary new
at: 'gorrion' put: 'pajaro';
at: 'olmo' put: 'arbol';
at: 'golondrina' put: 'pajaro';
at: 'sauce' put: 'arbol';
yourself.
"d inspect."

rta1:=d at: 'golondrina'. 
"pajaro"
rta2:=d at: 'gorrion'. 
"pajaro" 
"d at: 'pavo'."
"rta3:=d at: 'pavo'."
"not found pavo"
"Dictionary(Object)>>errorNotFound:
Dictionary>>errorKeyNotFound:
Dictionary>>at:
UndefinedObject>>{unbound}doIt
CompiledExpression>>value:
SmalltalkWorkspace>>evaluateRange:ifFail:debug:
SmalltalkWorkspace>>evaluateRange:ifFail:
SmalltalkWorkspace>>evaluateAndDisplay:
SmalltalkWorkspace>>displayIt
Symbol>>forwardTo:
CommandDescription>>performAgainst:
-----protocolos-----
"
"d at:'fuego' ifAbsent:['no lo se']."
d removeKey:'fuego' ifAbsent:[^nil].
d inspect.!

|d rta1 rta2 rta3|
d:= Dictionary new
at: 'gorrion' put: 'pajaro';
at: 'olmo' put: 'arbol';
at: 'golondrina' put: 'pajaro';
at: 'sauce' put: 'arbol';
yourself.
"d inspect."

rta1:=d at: 'golondrina'. 
"pajaro"
rta2:=d at: 'gorrion'. 
"pajaro" 
"d at: 'pavo'."
"rta3:=d at: 'pavo'."
"not found pavo"
"Dictionary(Object)>>errorNotFound:
Dictionary>>errorKeyNotFound:
Dictionary>>at:
UndefinedObject>>{unbound}doIt
CompiledExpression>>value:
SmalltalkWorkspace>>evaluateRange:ifFail:debug:
SmalltalkWorkspace>>evaluateRange:ifFail:
SmalltalkWorkspace>>evaluateAndDisplay:
SmalltalkWorkspace>>displayIt
Symbol>>forwardTo:
CommandDescription>>performAgainst:
-----protocolos-----
"
"d at:'fuego' ifAbsent:['no lo se']."
"d removeKey:'fuego' ifAbsent:[^nil]."
d inspect.!

|d rta1 rta2 rta3|
d:= Dictionary new
at: 'gorrion' put: 'pajaro';
at: 'olmo' put: 'arbol';
at: 'golondrina' put: 'pajaro';
at: 'sauce' put: 'arbol';
yourself.
"d inspect."

rta1:=d at: 'golondrina'. 
"pajaro"
rta2:=d at: 'gorrion'. 
"pajaro" 
"d at: 'pavo'."
"rta3:=d at: 'pavo'."
"not found pavo"
"Dictionary(Object)>>errorNotFound:
Dictionary>>errorKeyNotFound:
Dictionary>>at:
UndefinedObject>>{unbound}doIt
CompiledExpression>>value:
SmalltalkWorkspace>>evaluateRange:ifFail:debug:
SmalltalkWorkspace>>evaluateRange:ifFail:
SmalltalkWorkspace>>evaluateAndDisplay:
SmalltalkWorkspace>>displayIt
Symbol>>forwardTo:
CommandDescription>>performAgainst:
-----protocolos-----
"
d at:'fuego' ifAbsent:['no lo se'].!

|d rta1 rta2 rta3|
d:= Dictionary new
at: 'gorrion' put: 'pajaro';
at: 'olmo' put: 'arbol';
at: 'golondrina' put: 'pajaro';
at: 'sauce' put: 'arbol';
at: 'fuego';
yourself.
"d inspect."

rta1:=d at: 'golondrina'. 
"pajaro"
rta2:=d at: 'gorrion'. 
"pajaro" 
"d at: 'pavo'."
"rta3:=d at: 'pavo'."
"not found pavo"
"Dictionary(Object)>>errorNotFound:
Dictionary>>errorKeyNotFound:
Dictionary>>at:
UndefinedObject>>{unbound}doIt
CompiledExpression>>value:
SmalltalkWorkspace>>evaluateRange:ifFail:debug:
SmalltalkWorkspace>>evaluateRange:ifFail:
SmalltalkWorkspace>>evaluateAndDisplay:
SmalltalkWorkspace>>displayIt
Symbol>>forwardTo:
CommandDescription>>performAgainst:
-----manejadores-----
"
d at:'fuego' ifAbsent:['no lo se'].!

|d rta1 rta2 rta3|
d:= Dictionary new
at: 'gorrion' put: 'pajaro';
at: 'olmo' put: 'arbol';
at: 'golondrina' put: 'pajaro';
at: 'sauce' put: 'arbol';
at: 'fuego' put: nil;
yourself.
"d inspect."

rta1:=d at: 'golondrina'. 
"pajaro"
rta2:=d at: 'gorrion'. 
"pajaro" 
"d at: 'pavo'."
"rta3:=d at: 'pavo'."
"not found pavo"
"Dictionary(Object)>>errorNotFound:
Dictionary>>errorKeyNotFound:
Dictionary>>at:
UndefinedObject>>{unbound}doIt
CompiledExpression>>value:
SmalltalkWorkspace>>evaluateRange:ifFail:debug:
SmalltalkWorkspace>>evaluateRange:ifFail:
SmalltalkWorkspace>>evaluateAndDisplay:
SmalltalkWorkspace>>displayIt
Symbol>>forwardTo:
CommandDescription>>performAgainst:
-----manejadores-----
"
d at:'fuego' ifAbsent:['no lo se'].
"si bajo la clave fuego, no existe "!

|d rta1 rta2 rta3|
d:= Dictionary new
at: 'gorrion' put: 'pajaro';
at: 'olmo' put: 'arbol';
at: 'golondrina' put: 'pajaro';
at: 'sauce' put: 'arbol';
at: 'fuego' put: nil;
yourself.
"d inspect."

rta1:=d at: 'golondrina'. 
"pajaro"
rta2:=d at: 'gorrion'. 
"pajaro" 
"d at: 'pavo'."
"rta3:=d at: 'pavo'."
"not found pavo"
"Dictionary(Object)>>errorNotFound:
Dictionary>>errorKeyNotFound:
Dictionary>>at:
UndefinedObject>>{unbound}doIt
CompiledExpression>>value:
SmalltalkWorkspace>>evaluateRange:ifFail:debug:
SmalltalkWorkspace>>evaluateRange:ifFail:
SmalltalkWorkspace>>evaluateAndDisplay:
SmalltalkWorkspace>>displayIt
Symbol>>forwardTo:
CommandDescription>>performAgainst:
-----manejadores-----
"
d at:'fuego' ifAbsent:['no lo se'].!


|d rta1 rta2 rta3|
d:= Dictionary new
at: 'gorrion' put: 'pajaro';
at: 'olmo' put: 'arbol';
at: 'golondrina' put: 'pajaro';
at: 'sauce' put: 'arbol';

yourself.
"d inspect."

rta1:=d at: 'golondrina'. 
"pajaro"
rta2:=d at: 'gorrion'. 
"pajaro" 
"d at: 'pavo'."
"rta3:=d at: 'pavo'."
"not found pavo"
"Dictionary(Object)>>errorNotFound:
Dictionary>>errorKeyNotFound:
Dictionary>>at:
UndefinedObject>>{unbound}doIt
CompiledExpression>>value:
SmalltalkWorkspace>>evaluateRange:ifFail:debug:
SmalltalkWorkspace>>evaluateRange:ifFail:
SmalltalkWorkspace>>evaluateAndDisplay:
SmalltalkWorkspace>>displayIt
Symbol>>forwardTo:
CommandDescription>>performAgainst:
-----manejadores-----
"
d at:'fuego' ifAbsent:['no lo se'].
"si bajo la clave fuego, no existe "
!


|d rta1 rta2 rta3|
d:= Dictionary new
at: 'gorrion' put: 'pajaro';
at: 'olmo' put: 'arbol';
at: 'golondrina' put: 'pajaro';
at: 'sauce' put: 'arbol';

yourself.
"d inspect."

rta1:=d at: 'golondrina'. 
"pajaro"
rta2:=d at: 'gorrion'. 
"pajaro" 
"d at: 'pavo'."
"rta3:=d at: 'pavo'."
"not found pavo"
"Dictionary(Object)>>errorNotFound:
Dictionary>>errorKeyNotFound:
Dictionary>>at:
UndefinedObject>>{unbound}doIt
CompiledExpression>>value:
SmalltalkWorkspace>>evaluateRange:ifFail:debug:
SmalltalkWorkspace>>evaluateRange:ifFail:
SmalltalkWorkspace>>evaluateAndDisplay:
SmalltalkWorkspace>>displayIt
Symbol>>forwardTo:
CommandDescription>>performAgainst:
-----manejadores-----
"
d at:'fuego' ifAbsent:['no lo se'].
"si la clave fuego, esta ausente (no existe), me da la respuesta 'no lo se' (realiza las operaciones del blocke)"
d at:'fuego' put:'fffffff'.
d inspect.
d removeKey:'fuego' ifAbsent:[^nil].
d inspect.!


|d rta1 rta2 rta3|
d:= Dictionary new
at: 'gorrion' put: 'pajaro';
at: 'olmo' put: 'arbol';
at: 'golondrina' put: 'pajaro';
at: 'sauce' put: 'arbol';

yourself.
"d inspect."

rta1:=d at: 'golondrina'. 
"pajaro"
rta2:=d at: 'gorrion'. 
"pajaro" 
"d at: 'pavo'."
"rta3:=d at: 'pavo'."
"not found pavo"
"Dictionary(Object)>>errorNotFound:
Dictionary>>errorKeyNotFound:
Dictionary>>at:
UndefinedObject>>{unbound}doIt
CompiledExpression>>value:
SmalltalkWorkspace>>evaluateRange:ifFail:debug:
SmalltalkWorkspace>>evaluateRange:ifFail:
SmalltalkWorkspace>>evaluateAndDisplay:
SmalltalkWorkspace>>displayIt
Symbol>>forwardTo:
CommandDescription>>performAgainst:
-----manejadores-----
"
d at:'fuego' ifAbsent:['no lo se'].
"si la clave fuego, esta ausente (no existe), me da la respuesta 'no lo se' (realiza las operaciones del blocke)"
d at:'fuego' put:'fffffff'.
d inspect.
d removeKey:'fuego' ifAbsent:[^nil].
d inspect.!


|d rta1 rta2 rta3|
d:= Dictionary new
at: 'gorrion' put: 'pajaro';
at: 'olmo' put: 'arbol';
at: 'golondrina' put: 'pajaro';
at: 'sauce' put: 'arbol';

yourself.
"d inspect."

rta1:=d at: 'golondrina'. 
"pajaro"
rta2:=d at: 'gorrion'. 
"pajaro" 
"d at: 'pavo'."
"rta3:=d at: 'pavo'."
"not found pavo"
"Dictionary(Object)>>errorNotFound:
Dictionary>>errorKeyNotFound:
Dictionary>>at:
UndefinedObject>>{unbound}doIt
CompiledExpression>>value:
SmalltalkWorkspace>>evaluateRange:ifFail:debug:
SmalltalkWorkspace>>evaluateRange:ifFail:
SmalltalkWorkspace>>evaluateAndDisplay:
SmalltalkWorkspace>>displayIt
Symbol>>forwardTo:
CommandDescription>>performAgainst:
-----manejadores-----
"
d at:'fuego' ifAbsent:['no lo se'].
"si la clave fuego, esta ausente (no existe), me da la respuesta 'no lo se' (realiza las operaciones del blocke)"
d at:'fuego' put:'fffffff'.
d inspect.!


|d rta1 rta2 rta3|
d:= Dictionary new
at: 'gorrion' put: 'pajaro';
at: 'olmo' put: 'arbol';
at: 'golondrina' put: 'pajaro';
at: 'sauce' put: 'arbol';

yourself.
"d inspect."

rta1:=d at: 'golondrina'. 
"pajaro"
rta2:=d at: 'gorrion'. 
"pajaro" 
"d at: 'pavo'."
"rta3:=d at: 'pavo'."
"not found pavo"
"Dictionary(Object)>>errorNotFound:
Dictionary>>errorKeyNotFound:
Dictionary>>at:
UndefinedObject>>{unbound}doIt
CompiledExpression>>value:
SmalltalkWorkspace>>evaluateRange:ifFail:debug:
SmalltalkWorkspace>>evaluateRange:ifFail:
SmalltalkWorkspace>>evaluateAndDisplay:
SmalltalkWorkspace>>displayIt
Symbol>>forwardTo:
CommandDescription>>performAgainst:
-----manejadores-----
"
d at:'fuego' ifAbsent:['no lo se'].
"si la clave fuego, esta ausente (no existe), me da la respuesta 'no lo se' (realiza las operaciones del blocke)"
d at:'fuego' put:'fffffff'.
d inspect.
d removeKey:'fuego' ifAbsent:[^nil].
d inspect.!


|d rta1 rta2 rta3|
d:= Dictionary new
at: 'gorrion' put: 'pajaro';
at: 'olmo' put: 'arbol';
at: 'golondrina' put: 'pajaro';
at: 'sauce' put: 'arbol';

yourself.
"d inspect."

rta1:=d at: 'golondrina'. 
"pajaro"
rta2:=d at: 'gorrion'. 
"pajaro" 
"d at: 'pavo'."
"rta3:=d at: 'pavo'."
"not found pavo"
"Dictionary(Object)>>errorNotFound:
Dictionary>>errorKeyNotFound:
Dictionary>>at:
UndefinedObject>>{unbound}doIt
CompiledExpression>>value:
SmalltalkWorkspace>>evaluateRange:ifFail:debug:
SmalltalkWorkspace>>evaluateRange:ifFail:
SmalltalkWorkspace>>evaluateAndDisplay:
SmalltalkWorkspace>>displayIt
Symbol>>forwardTo:
CommandDescription>>performAgainst:
-----manejadores-----
"
d at:'fuego' ifAbsent:['no lo se'].
"si la clave fuego, esta ausente (no existe), me da la respuesta 'no lo se' (realiza las operaciones del blocke)"
d at:'fuego' put:'fffffff'.
d inspect.
rta1:=d removeKey:'fuego' ifAbsent:[^nil].
d inspect.
rta1 inspect.!


|d rta1 rta2 rta3|
d:= Dictionary new
at: 'gorrion' put: 'pajaro';
at: 'olmo' put: 'arbol';
at: 'golondrina' put: 'pajaro';
at: 'sauce' put: 'arbol';

yourself.
"d inspect."

rta1:=d at: 'golondrina'. 
"pajaro"
rta2:=d at: 'gorrion'. 
"pajaro" 
"d at: 'pavo'."
"rta3:=d at: 'pavo'."
"not found pavo"
"Dictionary(Object)>>errorNotFound:
Dictionary>>errorKeyNotFound:
Dictionary>>at:
UndefinedObject>>{unbound}doIt
CompiledExpression>>value:
SmalltalkWorkspace>>evaluateRange:ifFail:debug:
SmalltalkWorkspace>>evaluateRange:ifFail:
SmalltalkWorkspace>>evaluateAndDisplay:
SmalltalkWorkspace>>displayIt
Symbol>>forwardTo:
CommandDescription>>performAgainst:
-----manejadores-----
"
d at:'fuego' ifAbsent:['no lo se'].
"si la clave fuego, esta ausente (no existe), me da la respuesta 'no lo se' (realiza las operaciones del blocke)"
"d at:'fuego' put:'fffffff'."
d inspect.
rta1:=d removeKey:'fuego' ifAbsent:[^nil].
"quita del diionario el elemento clae/alor indicado y lo retorna"
"si esta ausente me deuele nil en este caso"
d inspect.
rta1 inspect.!

"d at:'fuego' put:'fffffff'."!

"d at:'fuego' put:'fffffff'."!

"quita del diccionario el elemento clave/alor indicado y lo retorna"!

"quita del diccionario el elemento clave/alor indicado y lo retorna"!

"14:38:11, 02 June 2020: Image saved"!

"14:38:13, 02 June 2020: Image saved"!

1to:10by:2.!

1to:10by:3.!


x:= 1to:10by:3.
x inspect.!

|x|
x:= 1to:10by:3.
x inspect.!

x:= 1to:10by:3.!

x inspect.!


|d rta1 rta2 rta3|
d:= Dictionary new
at: 'gorrion' put: 'pajaro';
at: 'olmo' put: 'arbol';
at: 'golondrina' put: 'pajaro';
at: 'sauce' put: 'arbol';
yourself.
"d inspect."

rta1:=d at: 'golondrina'. 
"pajaro"
rta2:=d at: 'gorrion'.
"pajaro"
"d at: 'pavo'."
rta3:=d at: 'pavo'.!

"00:31:08, 03 June 2020: Image saved"!

"00:31:11, 03 June 2020: Image saved"!

"00:31:14, 03 June 2020: Image saved"!

"13:52:33, 19 June 2020: Dolphin Smalltalk Professional started"!

"13:57:31, 19 June 2020: Image saved"!

"11:48:04, 28 June 2020: Dolphin Smalltalk Professional started"!

Transcript nextPutAll:'Página de prueba'.!

Transcript nextPutAll:'Página de prueba'.!

Transcript nextPutAll:'Página de prueba'.!

Transcript nextPutAll:'Página de prueba'.!

Transcript nextPutAll:'Página de prueba'.!

Transcript nextPutAll:'Página de prueba'.!

Transcript nextPutAll:'Página de prueba'.!

Transcript nextPutAll:'Página de prueba'.!

Transcript show nextPutAll:'Página de prueba'.!

Transcript show nextPutAll:'Página de prueba'.!

Transcript show nextPutAll:'Página de prueba'.!

Transcript show nextPutAll:'Página de prueba'.!

Transcript show nextPutAll:'Página de prueba'.!

Transcript nextPutAll:'Página de prueba'.!

!

Transcript nextPutAll:'Página de prueba'.!

Transcript nextPutAll: 'Página de prueba'.!

Transcript nextPutAll: 'Página de prueba'.!

Transcript nextPutAll: 'Página de prueba'.!

Transcript nextPutAll: 'Página de prueba'.!

Transcript nextPutAll: 'Página de prueba'.!

Transcript nextPutAll: 'Página de prueba'.!

Transcript nextPutAll: 'Página de prueba'.!

Transcript nextPutAll: 'Página de prueba'.!

Transcript nextPutAll: 'Página de prueba'.!

Transcript nextPutAll: 'Página de prueba'.!

Transcript nextPutAll: 'Página de prueba'.!

Transcript nextPutAll: 'Página de prueba'.!

Transcript nextPutAll: 'Página de prueba'.!

!

Transcript nextPutAll: 'Página de prueba'.!

Transcript nextPutAll: 'Página de prueba'.!

Transcript nextPutAll: 'Página de prueba'.!

Transcript nextPutAll: 'Página de prueba'.!

Transcript nextPutAll: 'Página de prueba'.!

Transcript nextPutAll: 'Página de prueba'.!

Transcript nextPutAll: 'Página de prueba'.!

Transcript nextPutAll: 'Página de prueba'.!

Transcript nextPutAll: 'Página de prueba'.!

Transcript nextPutAll: 'Página de prueba'.!

Transcript nextPutAll: 'Página de prueba'.!

Transcript nextPutAll: 'Página de prueba'.!

Transcript nextPutAll: 'Página de prueba'.!

Transcript nextPutAll: 'Página de prueba'.!

"12:12:02, 28 June 2020: Image saved"!

Transcript nextPutAll: 'Database file closed at '; display: Time now; cr.!

Transcript nextPutAll: 'Database file closed at '; display: Time now; cr.!

!

Transcript nextPutAll: 'Database file closed at '; display: Time now; cr.!

Transcript nextPutAll: 'Página de prueba'.!

Transcript nextPutAll: 'Página de prueba'.!

!

Transcript nextPutAll: 'Página de prueba'; cr.!

Transcript nextPutAll: 'Página de prueba'; cr.!

Transcript nextPutAll: 'Página de prueba'; cr.!

Transcript nextPutAll: 'Página de prueba'.!

Transcript nextPutAll: 'Página de prueba'.!

Transcript nextPutAll: 'Página de prueba'.!

Transcript nextPutAll: 'Página de prueba'.!

Transcript nextPutAll: 'Página de prueba'; clrText.!

Transcript nextPutAll: 'Página de prueba'; clr.!

Transcript nextPutAll: 'Página de prueba'; clrTextBk.!

"12:18:45, 28 June 2020: Image saved"!

Transcript cr.!

Transcript cr.!

Transcript cr.!

Transcript cr.!

Transcript cr.!

Transcript cr.!

Transcript cr.!

Transcript nextPutAll: 'Página de prueba'.!

Transcript cr.!

Transcript nextPutAll: 'Database file closed at '; display: Time now; cr.!

Transcript cr.!

Transcript nextPutAll: 'Página de prueba'.!

Transcript cr.!

Transcript nextPutAll: 'Página de prueba'.!

Transcript nextPutAll: 'Página de prueba'.!

Transcript cr.!

Transcript cr. "este comando es el carreage return (salto de linea o retorno de carro (enter) ) envia el mensage o permite verlo en el system transcript"!

'EDAD :' printOn: Transcript.!

Transcript cr. "este comando es el carreage return (salto de linea o retorno de carro (enter) ) envia el mensage o permite verlo en el system transcript"!

'EDAD :' printOn: Transcript.!

'Database file closed at '; display: Time now; cr; printOn: Transcript.!

'Database file closed at '; display: Time now; printOn: Transcript.!

'Database file closed at '; display: Time now; printOn: Transcript.!

'Database file closed at '; display: Time now printOn: Transcript.!

'Database file closed at '; display: Time now printOn: Transcript.!

Transcript nexPullAll: 'Database file closed at '; display: Time now; cr.!

Transcript nexPullAll: 'Database file closed at '; display: Time now; cr.!

Transcript nexPullAll: 'Database file closed at '; display: Time now; cr.!

Transcript nexPullAll: 'Database file closed at '; display: Time now; cr.!

Transcript nexPutAll: 'Database file closed at '; display: Time now; cr.!

Transcript nexPutAll: 'Database file closed at '; display: Time now; cr.!

Transcript nextPutAll: 'Database file closed at '; display: Time now; cr.!

Transcript nextPutAll: 'Database file closed at '; display: Time now; cr.!

'EDAD :' printOn: Transcript nextPutAll: 'Database file closed at '; display: Time now; cr.!

'EDAD :' printOn: Transcript. Transcript nextPutAll: 'Database file closed at '; display: Time now; cr.!

'EDAD :' printOn: Transcript. Transcript nextPutAll: 'Database file closed at '; display: Time now; cr.!

'EDAD :' printOn: Transcript. Transcript nextPutAll: 'Database file closed at '; display: Time now; cr.!

Transcript nextPutAll: 'Database file closed at '; display: Time now; cr.!

Transcript nextPutAll: 'Database file closed at '; display: Time now; cr.!

'EDAD :' printOn: Transcript.!

'EDAD :' printOn: Transcript.!

'EDAD :' printOn: Transcript.!

'EDAD :' printOn: Transcript. Transcript nextPutAll: 'Database file closed at '; display: Time now; cr.!

Transcript space.!

Transcript space.!

Transcript space.!

Transcript space.!

Transcript space; cr .!

Transcript space; cr .!

Transcript space; cr .!

Transcript space; cr .!

Transcript space; cr .!

Transcript space; cr .!

Transcript space; cr.!

Transcript space; cr.!

Transcript space; cr.!

56 printOn: Transcript.!

56 printOn: Transcript.!

56 printOn: Transcript.!

56 printOn: Transcript.!

56 printOn: Transcript.!

56 printOn: Transcript.!

56 printOn: Transcript; cr .!

56 printOn: Transcript; cr .!

56 printOn: Transcript; cr.!

56 printOn: Transcript; cr.!

Transcript cr.!

Transcript clear.!

56 printOn: Transcript.!

56 printOn: Transcript.!

56 printOn: Transcript.!

Transcript cr.!

56 printOn: Transcript.!

Transcript cr.!

56+1 printOn: Transcript.!

56+1 printOn: Transcript.!

Transcript cr.!

"16:29:30, 28 June 2020: Image saved"!

"16:29:37, 28 June 2020: Image saved"!

"16:29:38, 28 June 2020: Image saved"!

class := String.!

class := String.!

class := String.!

class name.!

class name.!

Transcript class name.!

Transcript cr.!

Transcript cr.!

Transcript class name.!

Transcript class name.!

Transcript cr.!

Transcript cr.!

Transcript cr.!

Transcript class name.!

Transcript class name.!

Transcript cr.!

Transcript cr.!

Transcript cr.!

Transcript cr.!

56+1 printOn: Transcript.!

56+1 printOn: Transcript.!

Transcript cr.!

Transcript class name.!

Transcript cr.!

class name printOn: Transcript.!

Transcript cr.!

Transcript cr.!

Transcript cr.!

class := String.!

class name printOn: Transcript.!

class allSubclasses size.!

Transcript cr.!

class := String.!

class name printOn: Transcript.!

Transcript class allSubclasses size.!

Transcript cr.!

class := String.!

class name printOn: Transcript.!

class allSubclasses size printOn: Transcript.!

Transcript cr.!

class := String.!

class name printOn: Transcript.!

class allSubclasses size printOn: Transcript cr.!

Transcript cr.!

class := String.!

class name printOn: Transcript.!

(class allSubclasses size) printOn: Transcript cr.!

Transcript cr.!

class := String.!

class name printOn: Transcript.!

class := String.!

class name printOn: Transcript.!

class allSubclasses size printOn: Transcript cr.!

Transcript cr.!

class := String.!

class name printOn: Transcript.!

class allSubclasses size printOn: Transcript cr.!

Transcript cr.!

Transcript nextPutAll: class name cr.!

Transcript nextPutAll: class name; cr.!

Transcript nextPutAll: class name; class allSubclasses size cr.!

Transcript nextPutAll: class name; class allSubclasses size; cr.!

Transcript nextPutAll: class name; class allSubclasses size; cr.!

Transcript nextPutAll: class name; class allSubclasses size; cr.!

Transcript nextPutAll: class name; class allSubclasses size printOn: Transcript cr.!

Transcript nextPutAll: class name; class allSubclasses size printOn: Transcript cr.!

Transcript nextPutAll: class name; class allSubclasses size printOn: Transcript cr.!

Transcript nextPutAll: class name; class allSubclasses size printOn: Transcript cr.!

class := String.!

Transcript nextPutAll: class name; class allSubclasses size printOn: Transcript cr.!

class allSubclasses size printOn: Transcript cr.!

class allSubclasses size printOn: Transcript cr.!

class allSubclasses size printOn: Transcript cr.!

class allSubclasses size printOn: Transcript cr.!

class := String.!

class name printOn: Transcript.!

class allSubclasses size printOn: Transcript cr.!

Transcript cr.!

Transcript nextPutAll: class name; cr.!

nombre:= Prompter prompt: 'Ingrese su nombre'.!

nombre class printOn: Transcript cr.!

nombre class printOn: Transcript cr.!

nombre class printOn: Transcript cr.!

nombre:= Prompter prompt: 'Ingrese su nombre'.!

nombre class printOn: Transcript cr.!


nombre:= Prompter prompt: 'Ingrese su nombre'.
nombre class printOn: Transcript cr.!

Transcript nombre.!

nombre:= Prompter prompt: 'Ingrese su nombre'.!

Transcript nombre.!

nombre:= Prompter prompt: 'Ingrese su nombre'.!

nombre printOn: Transcript cr.!

nombre class printOn: Transcript cr.!

nombre:= Prompter prompt: 'Ingrese su nombre'.!

nombre printOn: Transcript cr.!

nombre class printOn: Transcript cr.!

nombre printOn: Transcript cr.!

nombre printOn: Transcript cr.!

nombre printOn: Transcript cr.!

nombre printOn: Transcript cr.!

nombre printOn: Transcript cr.!

nombre printOn: Transcript cr.!

nombre printOn: Transcript cr.!

nombre printOn: Transcript cr.!

nombre printOn: Transcript cr.!

nombre printOn: Transcript cr.!

nombre class printOn: Transcript cr.!

nombre class printOn: Transcript cr.!

nombre class printOn: Transcript cr.!

nombre class printOn: Transcript cr.!

nombre class printOn: Transcript cr.!

nombre class printOn: Transcript cr.!

nombre class printOn: Transcript cr.!

nombre printOn: Transcript cr.!

nombre printOn: Transcript cr.!

nombre printOn: Transcript cr.!

nombre printOn: Transcript cr.!

nombre printOn: Transcript cr.!

nombre class printOn: Transcript cr.!

nombre class printOn: Transcript cr.!

Transcript cr.!

Transcript cr.!

Transcript cr.!

Transcript cr.!

nombre:= Prompter prompt: 'Ingrese su nombre'.!

nombre printOn: Transcript cr.!

nombre printOn: Transcript cr.!

nombre class printOn: Transcript cr.!

Transcript cr.!

Transcript cr.!

precio:= Prompter prompt:'ingrese un precio'.!

nombre printOn: Transcript cr.!

nombre class printOn: Transcript cr.!

Transcript cr.!

precio:= Prompter prompt:'ingrese un precio'.!

nombre printOn: Transcript cr.!

nombre class printOn: Transcript cr.!

Transcript cr.!

precio:= Prompter prompt:'ingrese un precio'.!

precio printOn: Transcript cr.!

precio class printOn: Transcript cr.!

Transcript cr.!

precio:= Prompter prompt:'ingrese un precio'.!

(precio printOn: Transcript) cr.!

precio:= Prompter prompt:'ingrese un precio'.!

precio printOn: Transcript; cr.!

precio:= Prompter prompt:'ingrese un precio'.!

precio printOn: Transcript.!

precio printOn: Transcript.!

Transcript cr.!

precio:= Prompter prompt:'ingrese un precio'.!

precio printOn: Transcript.!

Transcript cr.!

precio:= Prompter prompt:'ingrese un precio'.!

precio printOn: Transcript.!

Transcript cr.!

precio class printOn: Transcript cr.!

precio class printOn: Transcript cr.!

precio:= Prompter prompt:'ingrese un precio' AsNumber.!

precio:= Prompter prompt:'ingrese un precio' asNumber.!

precio:= Prompter prompt:'ingrese un precio'.!

precio printOn: Transcript.!

Transcript cr.!

precio class printOn: Transcript cr.!

Transcript cr.!

precio printOn: Transcript.!

precio printOn: Transcript.!

precio printOn: Transcript.!

precio printOn: Transcript.!

Transcript cr.!

Transcript cr.!

precio printOn: Transcript.!

precio printOn: Transcript.!

Transcript cr.!

precio printOn: Transcript.!

Transcript cr.!

precio:= Prompter prompt:'ingrese un precio'.!

precio printOn: Transcript.!

precio+1.!

precio:= Prompter prompt:'ingrese un precio'.!

precio printOn: Transcript.!

precio asNumber+1.!

Transcript cr.!

Transcript cr.!

Transcript cr.!

Transcript cr.!

precio asNumber+1.!

precio asNumber+1.!

Transcript cr.!

Transcript cr.!

precio asNumber+1.!

Transcript cr.!

precio:= precio asNumber+1.!

Transcript cr.!

precio printOn: Transcript.!

Transcript cr.!

MessageBox warning: 'El número ingresado es incorrecto'.!

MessageBox warning: 'El número ingresado es incorrecto'.!

MessageBox warning: 'Cuidado' .!

MessageBox error: 'Cuidado'.!

MessageBox errorMsg: 'Cuidado'.!

sigue:= MessageBox confirm: '¿Desea seguir ingresando datos?'.!

sigue:= MessageBox confirm: '¿Desea seguir ingresando datos?'.!

MessageBox warning: 'El número ingresado es incorrecto'.!

"18:29:17, 28 June 2020: Image saved"!

Object subclass: #Espectaculo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Espectaculo guid: (GUID fromString: '{0bda2ec8-a3a6-4dc3-9714-2ecb0c4eb6bc}')!
Espectaculo comment: ''!
!Espectaculo categoriesForClass!Kernel-Objects! !
Object subclass: #Espectaculo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

"22:32:55, 28 June 2020: Image saved"!

Object subclass: #Espectaculo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

"22:40:40, 28 June 2020: testPackage: #(Espectaculo)"!

"22:41:09, 28 June 2020: Loading package 'testPackage' from: C:\Users\chato\Documents\Dolphin Smalltalk 7\Core\testPackage.pac"!

"Class Definitions"!

Object subclass: #Espectaculo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

"Global Aliases"!

"Loose Methods"!

"End of package definition"!

"Source Globals"!

"Classes"!

Espectaculo guid: (GUID fromString: '{0bda2ec8-a3a6-4dc3-9714-2ecb0c4eb6bc}')!

Espectaculo guid: (GUID fromString: '{0bda2ec8-a3a6-4dc3-9714-2ecb0c4eb6bc}')!
Espectaculo comment: ''!

Espectaculo comment:
''!
"Binary Globals"!

!

"22:42:19, 28 June 2020: Uninstalling package 'testPackage28062020'"!

"22:42:35, 28 June 2020: Loading package 'testPackage28062020' from: C:\Users\chato\Documents\Dolphin Smalltalk 7\Core\testPackage28062020.pac"!

"Class Definitions"!

"Global Aliases"!

"Loose Methods"!

"End of package definition"!

"Source Globals"!

"Classes"!

"Binary Globals"!

!

"22:42:53, 28 June 2020: Uninstalling package 'testPackage28062020'"!

"22:44:41, 28 June 2020: Image saved"!

"22:44:43, 28 June 2020: Image saved"!

"22:45:01, 28 June 2020: Image saved"!

"22:48:13, 28 June 2020: Image saved"!

"22:49:18, 28 June 2020: Dolphin Smalltalk Professional started"!

"22:49:42, 28 June 2020: Dolphin Smalltalk Professional started"!

"10:31:46, 30 June 2020: Dolphin Smalltalk Professional started"!

(Package manager packageNamed: 'SistemaEntradas') comment:
''!
"10:44:37, 30 June 2020: Uninstalling package 'testPackage'"!

"10:45:22, 30 June 2020: Image saved"!

"10:45:24, 30 June 2020: Image saved"!

"10:45:27, 30 June 2020: Image saved"!

Object subclass: #Teatro
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Teatro guid: (GUID fromString: '{bac66d9d-705e-425d-a2eb-510a0ae9ad7a}')!
Teatro comment: ''!
!Teatro categoriesForClass!Kernel-Objects! !
Object subclass: #Espectaculo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Espectaculo guid: (GUID fromString: '{c944d4be-2584-4027-9a0c-d3136915fba3}')!
Espectaculo comment: ''!
!Espectaculo categoriesForClass!Kernel-Objects! !
Object subclass: #Espectador
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Espectador guid: (GUID fromString: '{5e870d8d-c758-4f38-8344-1ae08cd34afb}')!
Espectador comment: ''!
!Espectador categoriesForClass!Kernel-Objects! !
Object subclass: #Cuenta
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Cuenta guid: (GUID fromString: '{8bed7bec-75c7-46cc-8efb-8abfa15a4bd2}')!
Cuenta comment: ''!
!Cuenta categoriesForClass!Kernel-Objects! !
Object subclass: #Cuenta
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

"11:14:59, 30 June 2020: Image saved"!

Object subclass: #Teatro
	instanceVariableNames: 'nombre direccion capacidad espectaculos cuentas'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Object subclass: #Teatro
	instanceVariableNames: 'nombre direccion capacidad espectaculos cuentas'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

"23:41:01, 30 June 2020: Image saved"!

"23:41:23, 30 June 2020: Image saved"!

"23:43:19, 30 June 2020: Image saved"!

"23:49:18, 30 June 2020: Image saved"!

"23:49:27, 30 June 2020: Image saved"!

"23:50:04, 30 June 2020: Image saved"!

"18:44:59, 02 July 2020: Dolphin Smalltalk Professional started"!

"18:45:43, 02 July 2020: Image saved"!

"18:46:32, 02 July 2020: Image saved"!

"18:53:05, 02 July 2020: Image saved"!

Object subclass: #Teatro
	instanceVariableNames: 'nombre direccion capacidad espectaculos cuentas'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

"19:14:35, 02 July 2020: Image saved"!

"19:14:37, 02 July 2020: Image saved"!

Object subclass: #Teatro
	instanceVariableNames: 'nombre direccion capacidad espectaculos cuentas'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Object subclass: #Teatro
	instanceVariableNames: 'nombre direccion capacidad espectaculos cuentas'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

!Teatro class methodsFor!
crearTeatro:unNombre direccion:unaDireccion cap:unaCapacidad 
"inicializa una instancia de Teatro"
"
nombre:=unNombre.
direccion:=unaDireccion.
capacidad:=unaCapacidad.
espectaculos:=
cuentas:="
	! !
!Teatro class categoriesFor: #crearTeatro:direccion:cap:!public! !


|d rta1 rta2 rta3|
d:= Dictionary new
at: 'gorrion' put: 'pajaro';
at: 'olmo' put: 'arbol';
at: 'golondrina' put: 'pajaro';
at: 'sauce' put: 'arbol';
yourself.
"d inspect."

rta1:=d at: 'golondrina'. 
"pajaro"
rta2:=d at: 'gorrion'.
"pajaro"
"d at: 'pavo'."
rta3:=d at: 'pavo'.
"not found pavo"
"Dictionary(Object)>>errorNotFound:
Dictionary>>errorKeyNotFound:
Dictionary>>at:
UndefinedObject>>{unbound}doIt
CompiledExpression>>value:
SmalltalkWorkspace>>evaluateRange:ifFail:debug:
SmalltalkWorkspace>>evaluateRange:ifFail:
SmalltalkWorkspace>>evaluateAndDisplay:
SmalltalkWorkspace>>displayIt
Symbol>>forwardTo:
CommandDescription>>performAgainst:
-----manejadores-----
"
d at:'fuego' ifAbsent:['no lo se'].
"si la clave fuego, esta ausente (no existe), me da la respuesta 'no lo se' (realiza las operaciones del blocke)"
d at:'fuego' put:'fffffff'.
d inspect.!


|d rta1 rta2 rta3|
d:= Dictionary new
at: 'gorrion' put: 'pajaro';
at: 'olmo' put: 'arbol';
at: 'golondrina' put: 'pajaro';
at: 'sauce' put: 'arbol';
yourself.
"d inspect."

rta1:=d at: 'golondrina'. 
"pajaro"
rta2:=d at: 'gorrion'.
"pajaro"
"d at: 'pavo'."
rta3:=d at: 'pavo'.
"not found pavo"
"Dictionary(Object)>>errorNotFound:
Dictionary>>errorKeyNotFound:
Dictionary>>at:
UndefinedObject>>{unbound}doIt
CompiledExpression>>value:
SmalltalkWorkspace>>evaluateRange:ifFail:debug:
SmalltalkWorkspace>>evaluateRange:ifFail:
SmalltalkWorkspace>>evaluateAndDisplay:
SmalltalkWorkspace>>displayIt
Symbol>>forwardTo:
CommandDescription>>performAgainst:
-----manejadores-----
"
d at:'fuego' ifAbsent:['no lo se'].
"si la clave fuego, esta ausente (no existe), me da la respuesta 'no lo se' (realiza las operaciones del blocke)"
d at:'fuego' put:'fffffff'.
d inspect.
rta1:=d removeKey:'fuego' ifAbsent:[^nil].!

|d rta1 rta2 rta3|
d:= Dictionary new
at: 'gorrion' put: 'pajaro';
at: 'olmo' put: 'arbol';
at: 'golondrina' put: 'pajaro';
at: 'sauce' put: 'arbol';
yourself.
"d inspect."

rta1:=d at: 'golondrina'. 
"pajaro"
rta2:=d at: 'gorrion'.
"pajaro"
"d at: 'pavo'."
rta3:=d at: 'pavo'.
"not found pavo"
"Dictionary(Object)>>errorNotFound:
Dictionary>>errorKeyNotFound:
Dictionary>>at:
UndefinedObject>>{unbound}doIt
CompiledExpression>>value:
SmalltalkWorkspace>>evaluateRange:ifFail:debug:
SmalltalkWorkspace>>evaluateRange:ifFail:
SmalltalkWorkspace>>evaluateAndDisplay:
SmalltalkWorkspace>>displayIt
Symbol>>forwardTo:
CommandDescription>>performAgainst:
-----manejadores-----
"
d at:'fuego' ifAbsent:['no lo se'].
"si la clave fuego, esta ausente (no existe), me da la respuesta 'no lo se' (realiza las operaciones del blocke)"
d at:'fuego' put:'fffffff'.
d inspect.
rta1:=d removeKey:'fuego' ifAbsent:[^nil].
"quita del diccionario el elemento clave/valor indicado y lo retorna"
"si esta ausente me devuelve nil en este caso"
d inspect.
rta1 inspect.!

|d rta1 rta2 rta3|
d:= Dictionary new
at: 'gorrion' put: 'pajaro';
at: 'olmo' put: 'arbol';
at: 'golondrina' put: 'pajaro';
at: 'sauce' put: 'arbol';
yourself.!


|d rta1 rta2 rta3|
d:= Dictionary new
at: 'gorrion' put: 'pajaro';
at: 'olmo' put: 'arbol';
at: 'golondrina' put: 'pajaro';
at: 'sauce' put: 'arbol';
yourself.
"d inspect."

rta1:=d at: 'golondrina'. 
"pajaro"

rta2:=d at: 'gorrion'.
"pajaro"
"d at: 'pavo'."
rta3:=d at: 'pavo'.
"not found pavo"
"Dictionary(Object)>>errorNotFound:
Dictionary>>errorKeyNotFound:
Dictionary>>at:
UndefinedObject>>{unbound}doIt
CompiledExpression>>value:
SmalltalkWorkspace>>evaluateRange:ifFail:debug:
SmalltalkWorkspace>>evaluateRange:ifFail:
SmalltalkWorkspace>>evaluateAndDisplay:
SmalltalkWorkspace>>displayIt
Symbol>>forwardTo:
CommandDescription>>performAgainst:
-----manejadores-----
"
d at:'fuego' ifAbsent:['no lo se'].!

|d rta1 rta2 rta3|
d:= Dictionary new
at: 'gorrion' put: 'pajaro';
at: 'olmo' put: 'arbol';
at: 'golondrina' put: 'pajaro';
at: 'sauce' put: 'arbol';
yourself.
"d inspect."

rta1:=d at: 'golondrina'. 
"pajaro"

rta2:=d at: 'gorrion'.
"pajaro"
"d at: 'pavo'."
rta3:=d at: 'pavo'.
"not found pavo"
"Dictionary(Object)>>errorNotFound:
Dictionary>>errorKeyNotFound:
Dictionary>>at:
UndefinedObject>>{unbound}doIt
CompiledExpression>>value:
SmalltalkWorkspace>>evaluateRange:ifFail:debug:
SmalltalkWorkspace>>evaluateRange:ifFail:
SmalltalkWorkspace>>evaluateAndDisplay:
SmalltalkWorkspace>>displayIt
Symbol>>forwardTo:
CommandDescription>>performAgainst:
-----manejadores-----
"
d at:'fuego' ifAbsent:['no lo se'].
"si la clave fuego, esta ausente (no existe), me da la respuesta 'no lo se' (realiza las operaciones del blocke)"
d at:'fuego' put:'fffffff'.
d inspect.
rta1:=d removeKey:'fuego' ifAbsent:[^nil].
"quita del diccionario el elemento clave/valor indicado y lo retorna"
"si esta ausente me devuelve nil en este caso"
d inspect.
rta1 inspect.!


|d rta1 rta2 rta3|
d:= Dictionary new
at: 'gorrion' put: 'pajaro';
at: 'olmo' put: 'arbol';
at: 'golondrina' put: 'pajaro';
at: 'sauce' put: 'arbol';
yourself.
"d inspect."

rta1:=d at: 'golondrina'. 
"pajaro"

rta2:=d at: 'gorrion'.
"pajaro"
"d at: 'pavo'."
rta3:=d at: 'pavo'.
"not found pavo"
"Dictionary(Object)>>errorNotFound:
Dictionary>>errorKeyNotFound:
Dictionary>>at:
UndefinedObject>>{unbound}doIt
CompiledExpression>>value:
SmalltalkWorkspace>>evaluateRange:ifFail:debug:
SmalltalkWorkspace>>evaluateRange:ifFail:
SmalltalkWorkspace>>evaluateAndDisplay:
SmalltalkWorkspace>>displayIt
Symbol>>forwardTo:
CommandDescription>>performAgainst:
-----manejadores-----
"
d at:'fuego' ifAbsent:['no lo se'].
"si la clave fuego, esta ausente (no existe), me da la respuesta 'no lo se' (realiza las operaciones del blocke)"
d at:'fuego' put:'fffffff'.
d inspect.
rta1:=d removeKey:'fuego' ifAbsent:[^nil].
"quita del diccionario el elemento clave/valor indicado y lo retorna"
"si esta ausente me devuelve nil en este caso"
d inspect.
rta1 inspect.!

|d rta1 rta2 rta3|
d:= Dictionary new
at: 'gorrion' put: 'pajaro';
at: 'olmo' put: 'arbol';
at: 'golondrina' put: 'pajaro';
at: 'sauce' put: 'arbol';
yourself.
"d inspect."

rta1:=d at: 'golondrina'. 
"pajaro"

rta2:=d at: 'gorrion'.
"pajaro"
"d at: 'pavo'."
rta3:=d at: 'pavo'.
"not found pavo"
"Dictionary(Object)>>errorNotFound:
Dictionary>>errorKeyNotFound:
Dictionary>>at:
UndefinedObject>>{unbound}doIt
CompiledExpression>>value:
SmalltalkWorkspace>>evaluateRange:ifFail:debug:
SmalltalkWorkspace>>evaluateRange:ifFail:
SmalltalkWorkspace>>evaluateAndDisplay:
SmalltalkWorkspace>>displayIt
Symbol>>forwardTo:
CommandDescription>>performAgainst:
-----manejadores-----
"
d at:'fuego' ifAbsent:['no lo se'].
"si la clave fuego, esta ausente (no existe), me da la respuesta 'no lo se' (realiza las operaciones del blocke)"
d at:'fuego' put:'fffffff'.
d inspect.!

"
|x|
x:= 1to:10by:2.
x inspect.
"
"::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::"

|d rta1 rta2 rta3|
d:= Dictionary new
at: 'gorrion' put: 'pajaro';
at: 'olmo' put: 'arbol';
at: 'golondrina' put: 'pajaro';
at: 'sauce' put: 'arbol';
yourself.
"d inspect."

rta1:=d at: 'golondrina'. 
"pajaro"


"rta2:=d at: 'gorrion'."
"pajaro"
"d at: 'pavo'."
"rta3:=d at: 'pavo'.
"

"not found pavo"
"Dictionary(Object)>>errorNotFound:
Dictionary>>errorKeyNotFound:
Dictionary>>at:
UndefinedObject>>{unbound}doIt
CompiledExpression>>value:
SmalltalkWorkspace>>evaluateRange:ifFail:debug:
SmalltalkWorkspace>>evaluateRange:ifFail:
SmalltalkWorkspace>>evaluateAndDisplay:
SmalltalkWorkspace>>displayIt
Symbol>>forwardTo:
CommandDescription>>performAgainst:
-----manejadores-----
"
d at:'fuego' ifAbsent:['no lo se'].
"si la clave fuego, esta ausente (no existe), me da la respuesta 'no lo se' (realiza las operaciones del blocke)"
d at:'fuego' put:'fffffff'.
d inspect.
rta1:=d removeKey:'fuego' ifAbsent:[^nil].
"quita del diccionario el elemento clave/valor indicado y lo retorna"
"si esta ausente me devuelve nil en este caso"
d inspect.
rta1 inspect.!

"
|x|
x:= 1to:10by:2.
x inspect.
"
"::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::"

|d rta1 rta2 rta3|
d:= Dictionary new
at: 'gorrion' put: 'pajaro';
at: 'olmo' put: 'arbol';
at: 'golondrina' put: 'pajaro';
at: 'sauce' put: 'arbol';
yourself.
"d inspect."

rta1:=d at: 'golondrina'. 
"pajaro"


"rta2:=d at: 'gorrion'."
"pajaro"
"d at: 'pavo'."
"rta3:=d at: 'pavo'.
"

"not found pavo"
"Dictionary(Object)>>errorNotFound:
Dictionary>>errorKeyNotFound:
Dictionary>>at:
UndefinedObject>>{unbound}doIt
CompiledExpression>>value:
SmalltalkWorkspace>>evaluateRange:ifFail:debug:
SmalltalkWorkspace>>evaluateRange:ifFail:
SmalltalkWorkspace>>evaluateAndDisplay:
SmalltalkWorkspace>>displayIt
Symbol>>forwardTo:
CommandDescription>>performAgainst:
-----manejadores-----
"
d at:'fuego' ifAbsent:['no lo se'].
"si la clave fuego, esta ausente (no existe), me da la respuesta 'no lo se' (realiza las operaciones del blocke)"
d at:'fuego' put:'fffffff'.
d inspect.

"rta1:=d removeKey:'fuego' ifAbsent:[^nil]."

"quita del diccionario el elemento clave/valor indicado y lo retorna"
"si esta ausente me devuelve nil en este caso"

"d inspect."
"rta1 inspect."!

"
|x|
x:= 1to:10by:2.
x inspect.
"
"::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::"

|d rta1 rta2 rta3|
d:= Dictionary new
at: 'gorrion' put: 'pajaro';
at: 'olmo' put: 'arbol';
at: 'golondrina' put: 'pajaro';
at: 'sauce' put: 'arbol';
yourself.
"d inspect."

rta1:=d at: 'golondrina'. 
"pajaro"


"rta2:=d at: 'gorrion'."
"pajaro"
"d at: 'pavo'."
"rta3:=d at: 'pavo'.
"

"not found pavo"
"Dictionary(Object)>>errorNotFound:
Dictionary>>errorKeyNotFound:
Dictionary>>at:
UndefinedObject>>{unbound}doIt
CompiledExpression>>value:
SmalltalkWorkspace>>evaluateRange:ifFail:debug:
SmalltalkWorkspace>>evaluateRange:ifFail:
SmalltalkWorkspace>>evaluateAndDisplay:
SmalltalkWorkspace>>displayIt
Symbol>>forwardTo:
CommandDescription>>performAgainst:
-----manejadores-----
"
d at:'fuego' ifAbsent:['no lo se'].
"si la clave fuego, esta ausente (no existe), me da la respuesta 'no lo se' (realiza las operaciones del blocke)"
d at:'fuego' put:'fffffff'.
d a:'fuego' pu:'ggggg'.


d inspect.

"rta1:=d removeKey:'fuego' ifAbsent:[^nil]."

"quita del diccionario el elemento clave/valor indicado y lo retorna"
"si esta ausente me devuelve nil en este caso"

"d inspect."
"rta1 inspect."!

"
|x|
x:= 1to:10by:2.
x inspect.
"
"::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::"

|d rta1 rta2 rta3|
d:= Dictionary new
at: 'gorrion' put: 'pajaro';
at: 'olmo' put: 'arbol';
at: 'golondrina' put: 'pajaro';
at: 'sauce' put: 'arbol';
yourself.
"d inspect."

"rta1:=d at: 'golondrina'. "
"pajaro"


"rta2:=d at: 'gorrion'."
"pajaro"
"d at: 'pavo'."
"rta3:=d at: 'pavo'.
"

"not found pavo"
"Dictionary(Object)>>errorNotFound:
Dictionary>>errorKeyNotFound:
Dictionary>>at:
UndefinedObject>>{unbound}doIt
CompiledExpression>>value:
SmalltalkWorkspace>>evaluateRange:ifFail:debug:
SmalltalkWorkspace>>evaluateRange:ifFail:
SmalltalkWorkspace>>evaluateAndDisplay:
SmalltalkWorkspace>>displayIt
Symbol>>forwardTo:
CommandDescription>>performAgainst:
-----manejadores-----
"
d at:'fuego' ifAbsent:['no lo se'].
"si la clave fuego, esta ausente (no existe), me da la respuesta 'no lo se' (realiza las operaciones del blocke)"
d at:'fuego' put:'fffffff'.
d a:'fuego' pu:'ggggg'.


d inspect.

"rta1:=d removeKey:'fuego' ifAbsent:[^nil]."

"quita del diccionario el elemento clave/valor indicado y lo retorna"
"si esta ausente me devuelve nil en este caso"

"d inspect."
"rta1 inspect."!

"
|x|
x:= 1to:10by:2.
x inspect.
"
"::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::"

|d rta1 rta2 rta3|
d:= Dictionary new
at: 'gorrion' put: 'pajaro';
at: 'olmo' put: 'arbol';
at: 'golondrina' put: 'pajaro';
at: 'sauce' put: 'arbol';
yourself.
"d inspect."

"rta1:=d at: 'golondrina'. "
"pajaro"


"rta2:=d at: 'gorrion'."
"pajaro"
"d at: 'pavo'."
"rta3:=d at: 'pavo'.
"

"not found pavo"
"Dictionary(Object)>>errorNotFound:
Dictionary>>errorKeyNotFound:
Dictionary>>at:
UndefinedObject>>{unbound}doIt
CompiledExpression>>value:
SmalltalkWorkspace>>evaluateRange:ifFail:debug:
SmalltalkWorkspace>>evaluateRange:ifFail:
SmalltalkWorkspace>>evaluateAndDisplay:
SmalltalkWorkspace>>displayIt
Symbol>>forwardTo:
CommandDescription>>performAgainst:
-----manejadores-----
"
d at:'fuego' ifAbsent:['no lo se'].
"si la clave fuego, esta ausente (no existe), me da la respuesta 'no lo se' (realiza las operaciones del blocke)"
d at:'fuego' put:'fffffff'.
d a:'fuego' put:'ggggg'.


d inspect.

"rta1:=d removeKey:'fuego' ifAbsent:[^nil]."

"quita del diccionario el elemento clave/valor indicado y lo retorna"
"si esta ausente me devuelve nil en este caso"

"d inspect."
"rta1 inspect."!

"
|x|
x:= 1to:10by:2.
x inspect.
"
"::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::"

|d rta1 rta2 rta3|
d:= Dictionary new
at: 'gorrion' put: 'pajaro';
at: 'olmo' put: 'arbol';
at: 'golondrina' put: 'pajaro';
at: 'sauce' put: 'arbol';
yourself.
"d inspect."

"rta1:=d at: 'golondrina'. "
"pajaro"


"rta2:=d at: 'gorrion'."
"pajaro"
"d at: 'pavo'."
"rta3:=d at: 'pavo'.
"

"not found pavo"
"Dictionary(Object)>>errorNotFound:
Dictionary>>errorKeyNotFound:
Dictionary>>at:
UndefinedObject>>{unbound}doIt
CompiledExpression>>value:
SmalltalkWorkspace>>evaluateRange:ifFail:debug:
SmalltalkWorkspace>>evaluateRange:ifFail:
SmalltalkWorkspace>>evaluateAndDisplay:
SmalltalkWorkspace>>displayIt
Symbol>>forwardTo:
CommandDescription>>performAgainst:
-----manejadores-----
"
d at:'fuego' ifAbsent:['no lo se'].
"si la clave fuego, esta ausente (no existe), me da la respuesta 'no lo se' (realiza las operaciones del blocke)"
d at:'fuego' put:'fffffff'.
d at:'fuego' put:'ggggg'.


d inspect.

"rta1:=d removeKey:'fuego' ifAbsent:[^nil]."

"quita del diccionario el elemento clave/valor indicado y lo retorna"
"si esta ausente me devuelve nil en este caso"

"d inspect."
"rta1 inspect."!


|d rta1 rta2 rta3|
d:= Dictionary new
at: 'gorrion' put: 'pajaro';
at: 'olmo' put: 'arbol';
at: 'golondrina' put: 'pajaro';
at: 'sauce' put: 'arbol';
yourself.
"d inspect."

"rta1:=d at: 'golondrina'. "
"pajaro"


"rta2:=d at: 'gorrion'."
"pajaro"
"d at: 'pavo'."
"rta3:=d at: 'pavo'.
"

"not found pavo"
"Dictionary(Object)>>errorNotFound:
Dictionary>>errorKeyNotFound:
Dictionary>>at:
UndefinedObject>>{unbound}doIt
CompiledExpression>>value:
SmalltalkWorkspace>>evaluateRange:ifFail:debug:
SmalltalkWorkspace>>evaluateRange:ifFail:
SmalltalkWorkspace>>evaluateAndDisplay:
SmalltalkWorkspace>>displayIt
Symbol>>forwardTo:
CommandDescription>>performAgainst:
-----manejadores-----
"
d at:'fuego' ifAbsent:['no lo se'].
"si la clave fuego, esta ausente (no existe), me da la respuesta 'no lo se' (realiza las operaciones del blocke)"
d at:'fuego' put:'fffffff'.
d at:'fuego' put:'ggggg'.


d inspect.!


|sc|
sc:=SortedCollection new.
sc add:3.
sc add:0.

sc inspect.!


|ic|
ic:= Collection new.
ic add:'aaaaa'.
ic add:'zzzzzz'.

ic inspect.!

|ic|
ic:= Collection new.
ic add:'aaaaa'.
ic add:'zzzzzz'.

ic inspect.!


|ic|
ic:= OrderedCollection new.
ic add:'aaaaa'.
ic add:'zzzzzz'.

ic inspect.!


|ic|
ic:= OrderedCollection new.
ic add:'zzzzzz'.
ic add:'aaaaa'.


ic inspect.!

|ic|
ic:=Collection new.
ic add:'zzzzzz'.
ic add:'aaaaa'.


ic inspect.!

|ic|
ic:= OrderedCollection new.
ic add:'zzzzzz'.
ic add:'aaaaa'.


ic inspect.!


|ic|
ic:= OrderedCollection new.
ic add:'zzzzz'.
ic add:'aaaaa'.

ic inspect.!

"00:25:54, 03 July 2020: Image saved"!

"00:26:05, 03 July 2020: Image saved"!

"00:26:07, 03 July 2020: Image saved"!

"00:26:15, 03 July 2020: Image saved"!

"00:26:19, 03 July 2020: Image saved"!

"00:26:27, 03 July 2020: Image saved"!

"07:47:12, 03 July 2020: Dolphin Smalltalk Professional started"!

Object subclass: #Cuenta
	instanceVariableNames: 'numero titular'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

!Cuenta methodsFor!
iniCuenta:unEspectador! !
!Cuenta categoriesFor: #iniCuenta:!public! !

12 asString.!

12 asString.!

12 asString.!

|x|
x:=12.
x asString.!

|x|
x:=12.
x asString.!

|x y|
x:=12.
y:= x asString.!

|x y|
x:=12.
y:= x asString.
y inspect.!

|x y|
x:='murcielago'.
y := x shuffled.                                            "randomly shuffle string"
y inspect.!

|x y|
x:='murcielago'.
y := x shuffled.                                            "randomly shuffle string"
y inspect.!

|x y|
x:='murcielago'.
y := x shuffled.                                            "randomly shuffle string"
y inspect.!

|x y|
x:='mur ciel ago'.
"'asd' randomizeUsing: new "
y := x shuffled.                                            "randomly shuffle string"
y inspect.!

|x y|
x:='mur ciel ago'.
"'asd' randomizeUsing: new "
y := x shuffled.                                            "randomly shuffle string"
y inspect.!

|x y|
x:='mur ciel ago'.
"'asd' randomizeUsing: new "
y := x shuffled.                                            "randomly shuffle string"
y inspect.!

|x y|
x:='mur ciel ago'.
x inspect.!

|x y|
x:='mur ciel ago'.!

|x y|
x:='mur ciel ago'.!

|x y|
x:='mur ciel ago'.
x inspect.!

45 asCharacter.!

55 asCharacter.!

100 atRandom.!

100 atRandom.!

Random new next.!


Random new next.
100 atRandom.!

x:=100 atRandom.!


|x y|
Random new next.
x:=100 atRandom.!

|x|
Random new next.
x:=100 atRandom.!

Random new next; yourself.!

Random new next; yourself. x next.!

Random new next; yourself. x next.!

x:= Random new next; yourself. x next.!

x:=100 atRandom.!

x:=100 atRandom.!

100 atRandom.!

x inspect.!

x inspect.!

x:=100 atRandom.!

x:=100 atRandom.!

x:=100 atRandom.!

y := x shuffled.                                  "randomly shuffle string"!

y := x shuffled.                                  "randomly shuffle string"
y inspect.!

|x y|
x:='mur ciel ago'.
x inspect.
"'asd' randomizeUsing: new "
y := x shuffled.                                  "randomly shuffle string"
y inspect.!

"18:28:26, 03 July 2020: Image saved"!

"18:28:29, 03 July 2020: Image saved"!

"18:28:34, 03 July 2020: Dolphin Smalltalk Professional started"!

x inspect.!

|x y|
x:='mur ciel ago'.
x inspect.
"'asd' randomizeUsing: new "
y := x shuffled.                                  "randomly shuffle string"
y inspect.
55 asCharacter.

x:= Random new next; yourself. x next.
x:=100 atRandom.
x inspect.!

|x y z|
x:='mur ciel ago'.
x inspect.
"'asd' randomizeUsing: new "
y := x shuffled.                                  "randomly shuffle string"
y inspect.
55 asCharacter.

z:= Random new next; yourself. x next.
z:=100 atRandom.
z inspect.!

55 asCharacter.!

45 asCharacter.!

65 asCharacter.!

|x y z|
x:='mur ciel ago'.
x inspect.
"'asd' randomizeUsing: new "
y := x shuffled.                                  "randomly shuffle string"
y inspect.
"65 asCharacter.A"

z:= Random new next; yourself. x next.
z:=100 atRandom.
z inspect.!

|c y z|
c:='mur ciel ago'.
c inspect.
"'asd' randomizeUsing: new "
y := c shuffled.                                  "randomly shuffle string"
y inspect.
"65 asCharacter.A"

z:= Random new next; yourself. x next.
z:=100 atRandom.
z inspect.!

'asd' randomizeUsing: 3.!

'asd' randomizeUsing: 3.!

'asd' randomizeUsing: 10 atRandom.!

|c y z|
c:='mur ciel ago'.
c inspect.


z:= Random new next; yourself. y next.
z:=100 atRandom.
z inspect.
'asd' randomizeUsing: z.!

Object subclass: #Cuenta
	instanceVariableNames: 'titular'
	classVariableNames: 'numero'
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Object subclass: #Cuenta
	instanceVariableNames: 'titular'
	classVariableNames: 'Numero'
	poolDictionaries: ''
	classInstanceVariableNames: ''!

!Cuenta methodsFor!
iniCuenta:unEspectador
Numero:=Numero+1.
! !
!Cuenta categoriesFor: #iniCuenta:!public! !

Object subclass: #Cuenta
	instanceVariableNames: 'titular'
	classVariableNames: 'Numero'
	poolDictionaries: ''
	classInstanceVariableNames: ''!

!Cuenta methodsFor!
iniCuenta:unEspectador
Numero:=Numero+1.
! !
!Cuenta categoriesFor: #iniCuenta:!public! !

Object subclass: #Cuenta
	instanceVariableNames: 'titular'
	classVariableNames: 'Numero'
	poolDictionaries: ''
	classInstanceVariableNames: ''!

!Cuenta methodsFor!
iniCuenta:unEspectador
Numero:=Numero+1.
titular:=unEspectador.! !
!Cuenta categoriesFor: #iniCuenta:!public! !

!Cuenta methodsFor!
iniCuenta:unEspectador
Numero:=Numero+1.
titular:=unEspectador.! !
!Cuenta categoriesFor: #iniCuenta:!public! !

z:= Random new next; yourself. z next.!

z inspect.!

z:=100 atRandom.!

z:=z+100 atRandom.!

z:=100 atRandom+z .!

|c y z|
c:='mur ciel ago'.
c inspect.


z:= Random new next; yourself. z next.
z:=100 atRandom+z .
z inspect.!

!Cuenta methodsFor!
verCuenta:numero
^titular.! !
!Cuenta categoriesFor: #verCuenta:!public! !

!Cuenta methodsFor!
modCuenta:numeroCuenta! !
!Cuenta categoriesFor: #modCuenta:!public! !

!Cuenta methodsFor!
verTitular
^titular.! !
!Cuenta categoriesFor: #verTitular!public! !

Cuenta removeSelector: #verCuenta: ifAbsent: []!

!Cuenta methodsFor!
verNumeroCuenta
^Numero.! !
!Cuenta categoriesFor: #verNumeroCuenta!public! !

Object subclass: #Cuenta
	instanceVariableNames: 'titular numero'
	classVariableNames: 'Numero'
	poolDictionaries: ''
	classInstanceVariableNames: ''!

!Cuenta methodsFor!
verNumeroCuenta
^numero.! !
!Cuenta categoriesFor: #verNumeroCuenta!public! !

!Cuenta methodsFor!
iniCuenta:unEspectador
numero:=Numero.
Numero:=Numero+1.
titular:=unEspectador.! !
!Cuenta categoriesFor: #iniCuenta:!public! !

!Cuenta class methodsFor!
crearCuenta:unEspectador
^(self new) iniCuenta: unEspectador! !
!Cuenta class categoriesFor: #crearCuenta:!public! !

!Cuenta methodsFor!
iniCuenta:unEspectador
"inicializa la cuenta"
numero:=Numero.
Numero:=Numero+1.
titular:=unEspectador.! !
!Cuenta categoriesFor: #iniCuenta:!public! !

!Cuenta class methodsFor!
crearCuenta:unEspectador
"crea la cuenta"
^(self new) iniCuenta: unEspectador! !
!Cuenta class categoriesFor: #crearCuenta:!public! !

!Cuenta class methodsFor!
crearCuenta:unEspectador
"crea la cuenta"
^(self new) iniCuenta: unEspectador! !
!Cuenta class categoriesFor: #crearCuenta:!public! !

!Cuenta methodsFor!
iniCuenta:unEspectador
"inicializa la cuenta"

Numero:=Numero+1.
numero:=Numero.
titular:=unEspectador.! !
!Cuenta categoriesFor: #iniCuenta:!public! !

nil+1.!

nil+1.!

|a|
a:=a+1.!

a:=nil.!

a:=nil.!

a:=nil.!

a inspect.!

|a|
a inspect.
!

|b|
b inspect.!

|b|
b inspect.
b:=nil.!

|b|
b inspect.
b:=nil.
b inspect.
b:=b+1.
b inspect.!

|b|
b inspect.
b:=nil.
b inspect.
b+1.
b inspect.!

!Cuenta class methodsFor!
crearCuenta:unEspectador
"crea la cuenta"
Numero:=1.
^(self new) iniCuenta: unEspectador! !
!Cuenta class categoriesFor: #crearCuenta:!public! !

!Cuenta class methodsFor!
crearCuenta:unEspectador
"crea la cuenta"
^(self new) iniCuenta: unEspectador! !
!Cuenta class categoriesFor: #crearCuenta:!public! !

Numero:=Numero+1.!

Object subclass: #Cuenta
	instanceVariableNames: 'titular numero'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

!Cuenta methodsFor!
iniCuenta:unEspectador numeroActual:unNumero
"inicializa la cuenta"

numero:=unNumero.
titular:=unEspectador.! !
!Cuenta categoriesFor: #iniCuenta:numeroActual:!public! !

Cuenta removeSelector: #iniCuenta: ifAbsent: []!

"20:03:18, 03 July 2020: Image saved"!

"20:03:21, 03 July 2020: Image saved"!

"12:19:58, 04 July 2020: Dolphin Smalltalk Professional started"!

!Cuenta class methodsFor!
crearCuenta:unEspectador
"crea la cuenta"
^(self new) iniCuenta: unEspectador.! !
!Cuenta class categoriesFor: #crearCuenta:!public! !

!Cuenta class methodsFor!
crearCuenta:unEspectador numeroCuenta:unNumero
"crea la cuenta"
^(self new) iniCuenta: unEspectador numero:unNumero.! !
!Cuenta class categoriesFor: #crearCuenta:numeroCuenta:!public! !

!Cuenta class methodsFor!
crearCuenta:unEspectador
"crea la cuenta" "deberia probar implenmentar otra forma de asignarle un numero de cliente/espectador "
^(self new) iniCuenta: unEspectador.! !
!Cuenta class categoriesFor: #crearCuenta:!public! !

!Cuenta class methodsFor!
crearCuenta:unEspectador
"crea la cuenta" "deberia probar implenmentar otra forma de asignarle un numero de cliente/espectador "
^(self new) iniCuenta: unEspectador numero:1.! !
!Cuenta class categoriesFor: #crearCuenta:!public! !

!Cuenta class methodsFor!
crearCuenta:unEspectador
"crea la cuenta" "deberia probar implenmentar otra forma de asignarle un numero de cliente/espectador random"
^(self new) iniCuenta: unEspectador numero:1.! !
!Cuenta class categoriesFor: #crearCuenta:!public! !

!Cuenta class methodsFor!
crearCuenta:unEspectador numeroCuenta:unNumero
"crea la cuenta"
^(self new) iniCuenta: unEspectador numero:unNumero.! !
!Cuenta class categoriesFor: #crearCuenta:numeroCuenta:!public! !

!Cuenta class methodsFor!
crearCuenta:unEspectador
"crea la cuenta" "deberia probar implenmentar otra forma de asignarle un numero de cliente/espectador random"
^(self new) iniCuenta: unEspectador numero:1.! !
!Cuenta class categoriesFor: #crearCuenta:!public! !

!Cuenta class methodsFor!
crearCuenta:unEspectador numeroCuenta:unNumero
"crea la cuenta"
^(self new) iniCuenta: unEspectador numeroActual:unNumero.! !
!Cuenta class categoriesFor: #crearCuenta:numeroCuenta:!public! !

!Cuenta class methodsFor!
crearCuenta:unEspectador
"crea la cuenta" "deberia probar implenmentar otra forma de asignarle un numero de cliente/espectador random"
^(self new) iniCuenta: unEspectador numeroActual:1.! !
!Cuenta class categoriesFor: #crearCuenta:!public! !

!Cuenta methodsFor!
modCuenta:numeroCuenta
"esto deberia moverse a la clase teatro u otra en otro caso"! !
!Cuenta categoriesFor: #modCuenta:!public! !

Cuenta removeSelector: #modCuenta: ifAbsent: []!

"13:27:36, 04 July 2020: Image saved"!

!Cuenta class methodsFor!
crearCuenta:unEspectador
"crea la cuenta" "deberia probar implenmentar otra forma de asignarle un numero de cliente/espectador random"
^(self new) iniCuenta: unEspectador numeroActual:1.! !
!Cuenta class categoriesFor: #crearCuenta:!public! !

Object subclass: #Espectador
	instanceVariableNames: 'nombre apellido dni'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

!Espectador methodsFor!
iniEspectador:unNombre apellido:unApellido dni:unDNI

nombre:=unNombre.
apellido:=unApellido.
dni:=unDNI.! !
!Espectador categoriesFor: #iniEspectador:apellido:dni:!public! !

!Espectador class methodsFor!
crearEspectador:unNombre apellido:unApellido dni:unDNI

^(self new) iniEspectador: unNombre apellido: unApellido dni: unDNI.! !
!Espectador class categoriesFor: #crearEspectador:apellido:dni:!public! !

!Espectador methodsFor!
verNombre
^nombre.! !
!Espectador categoriesFor: #verNombre!public! !

!Espectador methodsFor!
verApellido
^apellido.! !
!Espectador categoriesFor: #verApellido!public! !

!Espectador methodsFor!
verDNI
^dni.! !
!Espectador categoriesFor: #verDNI!public! !

"13:52:13, 04 July 2020: Image saved"!

Object subclass: #Espectaculo
	instanceVariableNames: 'nombre fechaYhorario descripcion entradasVendidas entradasTotales precioEntrada'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

!Espectaculo methodsFor!
comProbarDisponibilidad
^entradasTotales-entradasVendidas.! !
!Espectaculo categoriesFor: #comProbarDisponibilidad!public! !

!Espectaculo methodsFor!
iniEspectaculo:unNombre fechaYhorario:unaFecha descripcion:unaDescripcion entradasVendidas:cantVendidas entradasTotales:cantTotales

nombre:=unNombre.
fechaYhorario:=unaFecha.
descripcion:=unaDescripcion.
entradasTotales:=cantTotales.
entradasVendidas:=cantVendidas.! !
!Espectaculo categoriesFor: #iniEspectaculo:fechaYhorario:descripcion:entradasVendidas:entradasTotales:!public! !

!Espectaculo class methodsFor!
crearEspectaculo:nombre fechaYhorario:fecha_y_horario descripcion:unaDescripcion entradasVendidas:entradasVendidas entradasTotales:entradasTotales precioEntrada:unPrecio
! !
!Espectaculo class categoriesFor: #crearEspectaculo:fechaYhorario:descripcion:entradasVendidas:entradasTotales:precioEntrada:!public! !

!Espectaculo methodsFor!
iniEspectaculo:unNombre fechaYhorario:unaFecha descripcion:unaDescripcion entradasVendidas:cantVendidas entradasTotales:cantTotales precioEntrada:precioEntrada

nombre:=unNombre.
fechaYhorario:=unaFecha.
descripcion:=unaDescripcion.
entradasTotales:=cantTotales.
entradasVendidas:=cantVendidas.
self precioEntrada:precioEntrada.! !
!Espectaculo categoriesFor: #iniEspectaculo:fechaYhorario:descripcion:entradasVendidas:entradasTotales:precioEntrada:!public! !

!Espectaculo methodsFor!
iniEspectaculo:unNombre fechaYhorario:unaFecha descripcion:unaDescripcion entradasVendidas:cantVendidas entradasTotales:cantTotales precioEntrada:precio

nombre:=unNombre.
fechaYhorario:=unaFecha.
descripcion:=unaDescripcion.
entradasTotales:=cantTotales.
entradasVendidas:=cantVendidas.
precioEntrada:=precioEntrada.! !
!Espectaculo categoriesFor: #iniEspectaculo:fechaYhorario:descripcion:entradasVendidas:entradasTotales:precioEntrada:!public! !

!Espectaculo methodsFor!
iniEspectaculo:unNombre fechaYhorario:unaFecha descripcion:unaDescripcion entradasVendidas:cantVendidas entradasTotales:cantTotales precioEntrada:precio

nombre:=unNombre.
fechaYhorario:=unaFecha.
descripcion:=unaDescripcion.
entradasTotales:=cantTotales.
entradasVendidas:=cantVendidas.
precioEntrada:=precio.! !
!Espectaculo categoriesFor: #iniEspectaculo:fechaYhorario:descripcion:entradasVendidas:entradasTotales:precioEntrada:!public! !

!Espectaculo methodsFor!
iniEspectaculo:unNombre fechaYhorario:unaFecha descripcion:unaDescripcion entradasVendidas:cantVendidas entradasTotales:cantTotales precioEntrada:precio

nombre:=unNombre.
fechaYhorario:=unaFecha.
descripcion:=unaDescripcion.
entradasTotales:=cantTotales.
entradasVendidas:=cantVendidas.
precioEntrada:=precio.! !
!Espectaculo categoriesFor: #iniEspectaculo:fechaYhorario:descripcion:entradasVendidas:entradasTotales:precioEntrada:!public! !

Espectaculo removeSelector: #iniEspectaculo:fechaYhorario:descripcion:entradasVendidas:entradasTotales: ifAbsent: []!

!Espectaculo methodsFor!
iniEspectaculo:unNombre fechaYhorario:unaFecha descripcion:unaDescripcion entradasVendidas:cantVendidas entradasTotales:cantTotales precioEntrada:precio

nombre:=unNombre.
fechaYhorario:=unaFecha.
descripcion:=unaDescripcion.
entradasTotales:=cantTotales.
entradasVendidas:=cantVendidas.
precioEntrada:=precio.! !
!Espectaculo categoriesFor: #iniEspectaculo:fechaYhorario:descripcion:entradasVendidas:entradasTotales:precioEntrada:!public! !

!Espectaculo methodsFor!
iniEspectaculo:unNombre fechaYhorario:unaFecha descripcion:unaDescripcion entradasVendidas:cantVendidas entradasTotales:cantTotales precioEntrada:precio

nombre:=unNombre.
fechaYhorario:=unaFecha.
descripcion:=unaDescripcion.
entradasTotales:=cantTotales.
entradasVendidas:=cantVendidas.
precioEntrada:=precio.! !
!Espectaculo categoriesFor: #iniEspectaculo:fechaYhorario:descripcion:entradasVendidas:entradasTotales:precioEntrada:!public! !

!Espectaculo class methodsFor!
crearEspectaculo:nombre fechaYhorario:fecha_y_horario descripcion:unaDescripcion entradasVendidas:entradasVendidas entradasTotales:entradasTotales precioEntrada:unPrecio

^(self new) iniEspectaculo: nombre fechaYhorario: fecha_y_horario descripcion: unaDescripcion entradasVendidas: entradasVendidas entradasTotales: entradasTotales precioEntrada: unPrecio.
! !
!Espectaculo class categoriesFor: #crearEspectaculo:fechaYhorario:descripcion:entradasVendidas:entradasTotales:precioEntrada:!public! !

!Espectaculo methodsFor!
verNombre
^nombre.! !
!Espectaculo categoriesFor: #verNombre!public! !

!Espectaculo methodsFor!
verFecha_y_horario
^fechaYhorario.! !
!Espectaculo categoriesFor: #verFecha_y_horario!public! !

!Espectaculo methodsFor!
verDescripcion
^descripcion.! !
!Espectaculo categoriesFor: #verDescripcion!public! !

!Espectaculo methodsFor!
verEntradasVendidas
^entradasVendidas.! !
!Espectaculo categoriesFor: #verEntradasVendidas!public! !

!Espectaculo methodsFor!
verEntradasTotales
^entradasTotales.! !
!Espectaculo categoriesFor: #verEntradasTotales!public! !

!Espectaculo methodsFor!
verPrecioEntrada
^precioEntrada .! !
!Espectaculo categoriesFor: #verPrecioEntrada!public! !

!Espectaculo methodsFor!
verPrecioEntrada
^precioEntrada.! !
!Espectaculo categoriesFor: #verPrecioEntrada!public! !

"16:53:29, 04 July 2020: Image saved"!

"16:54:25, 04 July 2020: Image saved to 'C:\Users\chato\Documents\Dolphin Smalltalk 7\SistemaEntradas04072020(Edson).img7'"!

Object subclass: #Teatro
	instanceVariableNames: 'nombre direccion capacidad espectaculos cuentas'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

!Teatro methodsFor!
iniTeatro:unNombre direccion:unaDireccion capacidad:unaCapacidad espectaculos:espectaculo cuentas:cuenta
! !
!Teatro categoriesFor: #iniTeatro:direccion:capacidad:espectaculos:cuentas:!public! !

!Teatro methodsFor!
iniTeatro:unNombre direccion:unaDireccion capacidad:unaCapacidad espectaculos:espectaculo cuentas:cuenta

nombre:=unNombre.
! !
!Teatro categoriesFor: #iniTeatro:direccion:capacidad:espectaculos:cuentas:!public! !

!Teatro methodsFor!
iniTeatro:unNombre direccion:unaDireccion capacidad:unaCapacidad espectaculos:espectaculo cuentas:cuenta

nombre:=unNombre.
direccion:=unaDireccion.
capacidad:=unaCapacidad.
espectaculos:=OrderedCollection new.
! !
!Teatro categoriesFor: #iniTeatro:direccion:capacidad:espectaculos:cuentas:!public! !

!Teatro methodsFor!
iniTeatro:unNombre direccion:unaDireccion capacidad:unaCapacidad espectaculos:espectaculo cuentas:cuenta

nombre:=unNombre.
direccion:=unaDireccion.
capacidad:=unaCapacidad.
espectaculos:=OrderedCollection new.
cuentas:=OrderedCollection new.
! !
!Teatro categoriesFor: #iniTeatro:direccion:capacidad:espectaculos:cuentas:!public! !

!Teatro methodsFor!
iniTeatro:unNombre direccion:unaDireccion capacidad:unaCapacidad espectaculos:espectaculo cuentas:cuenta

nombre:=unNombre.
direccion:=unaDireccion.
capacidad:=unaCapacidad.
espectaculos:=OrderedCollection new.
cuentas:=OrderedCollection new.
! !
!Teatro categoriesFor: #iniTeatro:direccion:capacidad:espectaculos:cuentas:!public! !

!Teatro methodsFor!
iniTeatro:unNombre direccion:unaDireccion capacidad:unaCapacidad

nombre:=unNombre.
direccion:=unaDireccion.
capacidad:=unaCapacidad.
espectaculos:=OrderedCollection new.
cuentas:=OrderedCollection new.
! !
!Teatro categoriesFor: #iniTeatro:direccion:capacidad:!public! !

Teatro removeSelector: #iniTeatro:direccion:capacidad:espectaculos:cuentas: ifAbsent: []!

!Teatro methodsFor!
iniTeatro:unNombre direccion:unaDireccion capacidad:unaCapacidad

nombre:=unNombre.
direccion:=unaDireccion.
capacidad:=unaCapacidad.
espectaculos:=OrderedCollection new.
cuentas:=OrderedCollection new.
! !
!Teatro categoriesFor: #iniTeatro:direccion:capacidad:!public! !

!Teatro class methodsFor!
crearTeatro:unNombre direccion:unaDireccion cap:unaCapacidad 
"inicializa una instancia de Teatro"

^(self new) iniTeatro: unNombre direccion: unaDireccion capacidad: unaCapacidad.

! !
!Teatro class categoriesFor: #crearTeatro:direccion:cap:!public! !

!Teatro class methodsFor!
crearTeatro:unNombre direccion:unaDireccion cap:unaCapacidad 
"inicializa una instancia de Teatro"

^(self new) iniTeatro: unNombre direccion: unaDireccion capacidad: unaCapacidad.! !
!Teatro class categoriesFor: #crearTeatro:direccion:cap:!public! !

!Teatro class methodsFor!
crearTeatro:unNombre direccion:unaDireccion cap:unaCapacidad 
"inicializa una instancia de Teatro"

^(self new) iniTeatro: unNombre direccion: unaDireccion capacidad: unaCapacidad.! !
!Teatro class categoriesFor: #crearTeatro:direccion:cap:!public! !

"18:14:28, 04 July 2020: Image saved"!

teatro:=Teatro new.!

teatro:=Teatro new crearTeatro: 'LunaPark' direccion: 'direccionDelLunaPark' cap: 9,290.!

"18:25:00, 04 July 2020: Image saved"!

Libro new.!

teatro:=Teatro crearTeatro: 'LunaPark' direccion: 'direccionDelLunaPark' cap: 9,290.!

teatro:=Teatro crearTeatro: 'LunaPark' direccion: 'direccionDelLunaPark' cap: 9,290.!

|teatro|

teatro:=Teatro crearTeatro: 'LunaPark' direccion: 'direccionDelLunaPark' cap: 9,290.!

teatro:=Teatro crearTeatro: 'LunaPark' direccion: 'direccionDelLunaPark' cap: 9,290.!

|teatro|

teatro:=Teatro crearTeatro: 'LunaPark' direccion: 'direccionDelLunaPark' cap: 9,290.!

teatro inspect.!

teatro inspect.!

|teatro|
teatro inspect.
teatro:=Teatro crearTeatro: 'LunaPark' direccion: 'direccionDelLunaPark' cap: 9,290.
teatro inspect.!


|l1 l2 isbn titulo autor editorial|
isbn:=Prompter prompt: 'Ingrese ISBN'.
titulo:=Prompter prompt: 'Ingrese titulo del libro'.
autor:=Prompter prompt: 'Ingrese nombre del autor'.
editorial:=Prompter prompt: 'Ingrese editorial'.
l1 inspect.
l1:=Libro crearLibroIsbn: isbn tit: titulo aut: autor edit: editorial.
l1 inspect.!

|teatro|
teatro:=Teatro crearTeatro: 'LunaPark' direccion: 'direccionDelLunaPark' cap: 9,290.
teatro inspect.!

|teatro|
teatro:=Teatro crearTeatro: 'LunaPark' direccion: 'direccionDelLunaPark' cap: 9290.
teatro inspect.!

teatro inspect.!

|teatro|!

teatro inspect.!

teatro:=Teatro crearTeatro: 'LunaPark' direccion: 'direccionDelLunaPark' cap: 9290.!

teatro inspect.!

|teatro|!

teatro:=Teatro crearTeatro: Prompter prompt: 'ingrese el nombre del teatro' direccion: 'direccionDelLunaPark' cap: 9290.!

teatro:=Teatro crearTeatro: Prompter prompt: 'ingrese el nombre del teatro'; direccion: 'direccionDelLunaPark' cap: 9290.!

teatro:=Teatro crearTeatro: (Prompter prompt: 'ingrese el nombre del teatro') direccion: 'direccionDelLunaPark' cap: 9290.!

teatro inspect.!

|teatro|!

teatro:=Teatro crearTeatro: (Prompter prompt: 'ingrese el nombre del teatro') direccion: (Prompter prompt: 'ingrese una direccion') cap: (Prompter prompt: 'ingrese la capacidad').!

teatro inspect.!

|teatro|!

teatro:=Teatro crearTeatro: (Prompter prompt: 'ingrese el nombre del teatro') direccion: (Prompter prompt: 'ingrese una direccion') cap: (Prompter prompt: 'ingrese la capacidad') asNumber.!

teatro inspect.!

"18:43:39, 04 July 2020: Image saved"!

"18:44:09, 04 July 2020: Image saved"!

!Teatro methodsFor!
agregarEspectaculo:unEspectaculo
espectaculos addFirst: unEspectaculo.! !
!Teatro categoriesFor: #agregarEspectaculo:!public! !

!Teatro methodsFor!
agregarEspectaculo:unEspectaculo
espectaculos addFirst: unEspectaculo.! !
!Teatro categoriesFor: #agregarEspectaculo:!public! !

!Teatro methodsFor!
agregarEspectaculo:unEspectaculo
espectaculos addLast: unEspectaculo.! !
!Teatro categoriesFor: #agregarEspectaculo:!public! !

"19:22:22, 04 July 2020: Image saved"!
"12:04:27, 05 July 2020: Dolphin Smalltalk Professional started"!

!Espectador methodsFor!
iniEspectadorNom:unNombre apellido:unApellido dni:unDNI

nombre:=unNombre.
apellido:=unApellido.
dni:=unDNI.! !
!Espectador categoriesFor: #iniEspectadorNom:apellido:dni:!public! !

Espectador removeSelector: #iniEspectador:apellido:dni: ifAbsent: []!

!Espectador class methodsFor!
crearEspectadorNom:unNombre apellido:unApellido dni:unDNI

^(self new) iniEspectadorNom: unNombre apellido: unApellido dni: unDNI.! !
!Espectador class categoriesFor: #crearEspectadorNom:apellido:dni:!public! !

Espectador class removeSelector: #crearEspectador:apellido:dni: ifAbsent: []!

!Espectaculo methodsFor!
comprobarDisponibilidad
^entradasTotales-entradasVendidas.! !
!Espectaculo categoriesFor: #comprobarDisponibilidad!public! !

Espectaculo removeSelector: #comProbarDisponibilidad ifAbsent: []!

!Espectaculo methodsFor!
iniEspectaculoNom:unNombre fechaYhorario:unaFecha descripcion:unaDescripcion entradasVendidas:cantVendidas entradasTotales:cantTotales precioEntrada:precio

nombre:=unNombre.
fechaYhorario:=unaFecha.
descripcion:=unaDescripcion.
entradasTotales:=cantTotales.
entradasVendidas:=cantVendidas.
precioEntrada:=precio.! !
!Espectaculo categoriesFor: #iniEspectaculoNom:fechaYhorario:descripcion:entradasVendidas:entradasTotales:precioEntrada:!public! !

Espectaculo removeSelector: #iniEspectaculo:fechaYhorario:descripcion:entradasVendidas:entradasTotales:precioEntrada: ifAbsent: []!

!Espectaculo class methodsFor!
crearEspectaculoNom:nombre fechaYhorario:fecha_y_horario descripcion:unaDescripcion entradasVendidas:entradasVendidas entradasTotales:entradasTotales precioEntrada:unPrecio

^(self new) iniEspectaculoNom: nombre fechaYhorario: fecha_y_horario descripcion: unaDescripcion entradasVendidas: entradasVendidas entradasTotales: entradasTotales precioEntrada: unPrecio.
! !
!Espectaculo class categoriesFor: #crearEspectaculoNom:fechaYhorario:descripcion:entradasVendidas:entradasTotales:precioEntrada:!public! !

Espectaculo class removeSelector: #crearEspectaculo:fechaYhorario:descripcion:entradasVendidas:entradasTotales:precioEntrada: ifAbsent: []!

"12:07:28, 05 July 2020: Image saved"!

"12:07:31, 05 July 2020: Image saved"!

!Teatro methodsFor!
iniTeatroNom:unNombre direccion:unaDireccion capacidad:unaCapacidad

nombre:=unNombre.
direccion:=unaDireccion.
capacidad:=unaCapacidad.
espectaculos:=OrderedCollection new.
cuentas:=OrderedCollection new.
! !
!Teatro categoriesFor: #iniTeatroNom:direccion:capacidad:!public! !

Teatro removeSelector: #iniTeatro:direccion:capacidad: ifAbsent: []!

!Teatro methodsFor!
agregarEspectaculo:unEspectaculo
espectaculos add: unEspectaculo.! !
!Teatro categoriesFor: #agregarEspectaculo:!public! !

!Teatro methodsFor!
agregarCuenta:unaCuenta
cuentas add: unaCuenta.! !
!Teatro categoriesFor: #agregarCuenta:!public! !

!Teatro class methodsFor!
crearTeatroNom:unNombre direccion:unaDireccion cap:unaCapacidad 
^(self new) iniTeatroNom: unNombre direccion: unaDireccion capacidad: unaCapacidad.! !
!Teatro class categoriesFor: #crearTeatroNom:direccion:cap:!public! !

!Teatro class methodsFor!
crearTeatroNom:unNombre direccion:unaDireccion cap:unaCapacidad 
^(self new) iniTeatroNom: unNombre direccion: unaDireccion capacidad: unaCapacidad.! !
!Teatro class categoriesFor: #crearTeatroNom:direccion:cap:!public! !

Teatro class removeSelector: #crearTeatro:direccion:cap: ifAbsent: []!

"12:09:08, 05 July 2020: Image saved"!

"12:09:13, 05 July 2020: Image saved"!

"Declaracion de variables"
|teatro espectaculo espectador cuenta|

"Inicializa instancia de Teatro"
teatro:=Teatro crearTeatroNom: (Prompter prompt: 'Ingrese el nombre del teatro') direccion: (Prompter prompt: 'Ingrese una direccion') cap: (Prompter prompt: 'Ingrese la capacidad') asNumber.

"Inicializa instancia de Espectaculo"
espectaculo:=Espectaculo crearEspectaculoNom: (Prompter prompt: 'Ingrese el nombre del espectaculo') fechaYhorario: (Prompter prompt: 'Ingrese el fecha y horario') descripcion: (Prompter prompt: 'Ingrese una descripcion') entradasVendidas: 0 entradasTotales: 100 precioEntrada: (Prompter prompt: 'Ingrese el precio de la entrada').

"Agregar espectaculo al teatro"
teatro agregarEspectaculo: espectaculo.

teatro inspect.

"Crear cuenta de espectador no registrado"

"Inicializa instancia de Espectador"
espectador:=Espectador crearEspectadorNom: (Prompter prompt: 'Ingrese el nombre del espectador') apellido: (Prompter prompt: 'Ingrese el apellido del espectador') dni: (Prompter prompt: 'Ingrese el dni del espectador').

"Inicializa instancia de Cuenta"
cuenta:=Cuenta crearCuenta: espectador.

"Agregar cuenta a Teatro"
teatro agregarCuenta: cuenta.

teatro inspect.!

"12:17:14, 05 July 2020: Image saved"!

"12:17:15, 05 July 2020: Image saved"!

"12:17:22, 05 July 2020: Image saved"!

"12:17:23, 05 July 2020: Image saved"!

"12:17:24, 05 July 2020: Image saved"!

"12:17:46, 05 July 2020: Image saved"!

"12:18:01, 05 July 2020: Dolphin Smalltalk Professional started"!

"12:20:47, 05 July 2020: Dolphin Smalltalk Professional started"!

"Declaracion de variables"
|teatro espectaculo espectador cuenta|

"Inicializa instancia de Teatro"
teatro:=Teatro crearTeatroNom: (Prompter prompt: 'Ingrese el nombre del teatro') direccion: (Prompter prompt: 'Ingrese una direccion') cap: (Prompter prompt: 'Ingrese la capacidad') asNumber.

"Inicializa instancia de Espectaculo"
espectaculo:=Espectaculo crearEspectaculoNom: (Prompter prompt: 'Ingrese el nombre del espectaculo') fechaYhorario: (Prompter prompt: 'Ingrese el fecha y horario') descripcion: (Prompter prompt: 'Ingrese una descripcion') entradasVendidas: 0 entradasTotales: 100 precioEntrada: (Prompter prompt: 'Ingrese el precio de la entrada').

"Agregar espectaculo al teatro"
teatro agregarEspectaculo: espectaculo.

"Crear cuenta de espectador no registrado"

"Inicializa instancia de Espectador"
espectador:=Espectador crearEspectadorNom: (Prompter prompt: 'Ingrese el nombre del espectador') apellido: (Prompter prompt: 'Ingrese el apellido del espectador') dni: (Prompter prompt: 'Ingrese el dni del espectador').

"Inicializa instancia de Cuenta"
cuenta:=Cuenta crearCuenta: espectador.

"Agregar cuenta a Teatro"
teatro agregarCuenta: cuenta.

teatro inspect.!

"Declaracion de variables"
|teatro espectaculo espectador cuenta|

"Inicializa instancia de Teatro"
teatro:=Teatro crearTeatroNom: (Prompter prompt: 'Ingrese el nombre del teatro') direccion: (Prompter prompt: 'Ingrese una direccion') cap: (Prompter prompt: 'Ingrese la capacidad') asNumber.

"Inicializa instancia de Espectaculo"
espectaculo:=Espectaculo crearEspectaculoNom: (Prompter prompt: 'Ingrese el nombre del espectaculo') fechaYhorario: (Prompter prompt: 'Ingrese el fecha y horario') descripcion: (Prompter prompt: 'Ingrese una descripcion') entradasVendidas: 0 entradasTotales: 100 precioEntrada: (Prompter prompt: 'Ingrese el precio de la entrada').

"Agregar espectaculo al teatro"
teatro agregarEspectaculo: espectaculo.

"Crear cuenta de espectador no registrado"

"Inicializa instancia de Espectador"
espectador:=Espectador crearEspectadorNom: (Prompter prompt: 'Ingrese el nombre del espectador') apellido: (Prompter prompt: 'Ingrese el apellido del espectador') dni: (Prompter prompt: 'Ingrese el dni del espectador').

"Inicializa instancia de Cuenta"
cuenta:=Cuenta crearCuenta: espectador.

"Agregar cuenta a Teatro"
teatro agregarCuenta: cuenta.

teatro inspect.
!

"12:23:43, 05 July 2020: Image saved"!

